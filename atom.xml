<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ChionLab</title>
  <subtitle>欢迎来到Chion82的未来道具研究所 ( ゜- ゜)つロ 乾杯~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.chionlab.moe/"/>
  <updated>2016-09-09T16:05:42.000Z</updated>
  <id>http://blog.chionlab.moe/</id>
  
  <author>
    <name>Chion Tang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mixins是有害的（Mixins Considered Harmful）［下篇］</title>
    <link href="http://blog.chionlab.moe/2016/08/28/mixins-considered-harmful-2/"/>
    <id>http://blog.chionlab.moe/2016/08/28/mixins-considered-harmful-2/</id>
    <published>2016-08-28T08:32:22.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2016/07/23/mixins-considered-harmful/">上篇</a></p>
<p>原文：<a href="https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html" target="_blank" rel="external">Facebook React: Mixins Considered Harmful</a></p>
<blockquote>
<p>Migrating from Mixins<br>Let’s make it clear that mixins are not technically deprecated. If you use React.createClass(), you may keep using them. We only say that they didn’t work well for us, and so we won’t recommend using them in the future.<br>Every section below corresponds to a mixin usage pattern that we found in the Facebook codebase. For each of them, we describe the problem and a solution that we think works better than mixins. The examples are written in ES5 but once you don’t need mixins, you can switch to ES6 classes if you’d like.<br>We hope that you find this list helpful. Please let us know if we missed important use cases so we can either amend the list or be proven wrong!</p>
</blockquote>
<h2 id="从Mixins迁移"><a href="#从Mixins迁移" class="headerlink" title="从Mixins迁移"></a>从Mixins迁移</h2><p>有一点需要说明的是，从技术上来讲，mixins不是被弃用的。如果你在使用<code>React.createClass()</code>，你可以继续使用它们。我们只是说它们对我们而言不能很好地运用，并且我们不推荐在未来中继续使用它们。下面的每一章节对应了我们在Facebook代码库中发现的mixin的使用场景。对于每种情况，我们会说明问题所在，并展示我们认为比使用mixins更好的解决方案。示例都使用ES5编写，但当你不再需要mixins时，你可以随心所欲地切换到ES6 classes。<br>我们希望你能从这个列表中得到帮助。如果我们缺漏了一些比较重要的应用场景，请告知我们，因此我们能拓展这个列表，或者证明其中的部分是错误的。</p>
<blockquote>
<p>Performance Optimizations<br>One of the most commonly used mixins is PureRenderMixin. You might be using it in some components to prevent unnecessary re-renders when the props and state are shallowly equal to the previous props and state:</p>
</blockquote>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>使用率最高的mixins之一是 <a href="https://facebook.github.io/react/docs/pure-render-mixin.html" target="_blank" rel="external">PureRenderMixin</a> 。你可能正在一些组件中使用它，当props和state跟上次的值是浅层相等时，可<a href="https://facebook.github.io/react/docs/advanced-performance.html#shouldcomponentupdate-in-action" target="_blank" rel="external">避免不必要的重渲染</a>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> PureRenderMixin = <span class="built_in">require</span>(<span class="string">'react-addons-pure-render-mixin'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> Button = React.createClass(&#123;</div><div class="line">  mixins: [PureRenderMixin],</div><div class="line"></div><div class="line">  <span class="comment">// ...</span></div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><blockquote>
<p>To express the same without mixins, you can use the shallowCompare function directly instead:</p>
</blockquote>
<p>为了达到相同的效果而不使用mixins，你可以直接使用<a href="https://facebook.github.io/react/docs/shallow-compare.html" target="_blank" rel="external">shallowCompare</a>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> shallowCompare = <span class="built_in">require</span>(<span class="string">'react-addons-shallow-compare'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> Button = React.createClass(&#123;</div><div class="line">  shouldComponentUpdate: <span class="function"><span class="keyword">function</span>(<span class="params">nextProps, nextState</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> shallowCompare(<span class="keyword">this</span>, nextProps, nextState);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// ...</span></div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>If you use a custom mixin implementing a shouldComponentUpdate function with different algorithm, we suggest exporting just that single function from a module and calling it directly from your components.</p>
<p>We understand that more typing can be annoying. For the most common case, we plan to introduce a new base class called React.PureComponent in the next minor release. It uses the same shallow comparison as PureRenderMixin does today.</p>
</blockquote>
<p>如果你使用一个自定义的mixin，以不同的算法实现 <code>shouldComponentUpdate</code> 方法，我们建议从模块中导出该单一的方法，并在你的组件中直接调用它。<br>我们理解频繁的编码是令人不快的。对于更普遍的情况，我们计划在下一个小版本发布中引入一个新的基类<code>React.PureComponent</code>。它将使用浅层对比算法，正如今天的<code>PureRenderMixin</code>。</p>
<blockquote>
<p>Subscriptions and Side Effects<br>The second most common type of mixins that we encountered are mixins that subscribe a React component to a third-party data source. Whether this data source is a Flux Store, an Rx Observable, or something else, the pattern is very similar: the subscription is created in componentDidMount, destroyed in componentWillUnmount, and the change handler calls this.setState().</p>
</blockquote>
<h2 id="订阅和副作用"><a href="#订阅和副作用" class="headerlink" title="订阅和副作用"></a>订阅和副作用</h2><p>我们遇到的第二种最常见的mixins类型是那些用来订阅React组件到第三方数据源的mixins。无论这些数据源是一个Flux Store，还是一个Rx Observable，抑或是其他的，该模式都是相似的：订阅在<code>componentDidMount</code>中产生，在<code>componentWillUnmount</code>中被销毁，而变更处理函数将调用 <code>this.setState()</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> SubscriptionMixin = &#123;</div><div class="line">  getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      comments: DataSource.getComments()</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    DataSource.addChangeListener(<span class="keyword">this</span>.handleChange);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    DataSource.removeChangeListener(<span class="keyword">this</span>.handleChange);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  handleChange: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      comments: DataSource.getComments()</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> CommentList = React.createClass(&#123;</div><div class="line">  mixins: [SubscriptionMixin],</div><div class="line"></div><div class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Reading comments from state managed by mixin.</span></div><div class="line">    <span class="keyword">var</span> comments = <span class="keyword">this</span>.state.comments;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &#123;comments.map(function(comment) &#123;</div><div class="line">          return &lt;Comment comment=&#123;comment&#125; key=&#123;comment.id&#125; /&gt;</div><div class="line">        &#125;)&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">module.exports = CommentList;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Solution</p>
<p>If there is just one component subscribed to this data source, it is fine to embed the subscription logic right into the component. Avoid premature abstractions.</p>
<p>If several components used this mixin to subscribe to a data source, a nice way to avoid repetition is to use a pattern called “higher-order components”. It can sound intimidating so we will take a closer look at how this pattern naturally emerges from the component model.</p>
</blockquote>
<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>如果只有一个组件被订阅到这个数据源，直接将订阅逻辑内嵌到该组件中不失为一个良策。避免草率的抽象。</p>
<p>如果多个组件都使用这个mixin来订阅到一个数据源，一个好的避免重复冗余的方法是使用一种被称为“<a href="https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750" target="_blank" rel="external">高阶组件(higher-order components，又称HOC)</a>”的模式。这听起来让人生畏，所以我们将仔细分析这个模式如何自然地套用到组件模型上。</p>
<blockquote>
<p>Higher-Order Components Explained<br>Let’s forget about React for a second. Consider these two functions that add and multiply numbers, logging the results as they do that:</p>
</blockquote>
<h3 id="高阶组件的解释"><a href="#高阶组件的解释" class="headerlink" title="高阶组件的解释"></a>高阶组件的解释</h3><p>让我们暂时忘记React。想想这两个实现相加和相乘的函数，通过这样来实现记录计算结果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addAndLog</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = x + y;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'result:'</span>, result);</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiplyAndLog</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = x * y;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'result:'</span>, result);</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>These two functions are not very useful but they help us demonstrate a pattern that we can later apply to components.</p>
<p>Let’s say that we want to extract the logging logic out of these functions without changing their signatures. How can we do this? An elegant solution is to write a higher-order function, that is, a function that takes a function as an argument and returns a function.</p>
<p>Again, it sounds more intimidating than it really is:</p>
</blockquote>
<p>这两个函数并不是十分有用，但它们可以帮助我们描述一个典型的模式，这个模式我们之后将把它应用到组件上。</p>
<p>假设我们想从这些函数中抽离记录逻辑而不修改它们的签名。如何做到这点？一个优雅的方案是，写一个更高阶的函数，这个更高阶的函数实际上是一个将函数作为其参数，并返回一个新函数的函数。</p>
<p>又一次，它听起来让人生畏，但实际上它是更简单的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">withLogging</span>(<span class="params">wrappedFunction</span>) </span>&#123;</div><div class="line">  <span class="comment">// Return a function with the same API...</span></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="comment">// ... that calls the original function</span></div><div class="line">    <span class="keyword">var</span> result = wrappedFunction(x, y);</div><div class="line">    <span class="comment">// ... but also logs its result!</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'result:'</span>, result);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>The withLogging higher-order function lets us write add and multiply without the logging statements, and later wrap them to get addAndLog and multiplyAndLog with exactly the same signatures as before:</p>
</blockquote>
<p>这个 <code>withLogging</code> 高阶函数让我们在实现相加和相乘逻辑时不需考虑记录逻辑，在这之后我们通过嵌套的方式来得到与之前签名一致的 <code>addAndLog</code> 和 <code>multiplyAndLog</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x * y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">withLogging</span>(<span class="params">wrappedFunction</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result = wrappedFunction(x, y);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'result:'</span>, result);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Equivalent to writing addAndLog by hand:</span></div><div class="line"><span class="keyword">var</span> addAndLog = withLogging(add);</div><div class="line"></div><div class="line"><span class="comment">// Equivalent to writing multiplyAndLog by hand:</span></div><div class="line"><span class="keyword">var</span> multiplyAndLog = withLogging(multiply);</div></pre></td></tr></table></figure>
<blockquote>
<p>Higher-order components are a very similar pattern, but applied to components in React. We will apply this transformation from mixins in two steps.</p>
<p>As a first step, we will split our CommentList component in two, a child and a parent. The child will be only concerned with rendering the comments. The parent will set up the subscription and pass the up-to-date data to the child via props.</p>
</blockquote>
<p>高阶组件是一种非常相似的模式，只不过它是应用在React组件上的而已。我们将这种转换应用到mixins上，只需要两步即可。</p>
<p>第一步，我们将<code>CommentList</code>组件分为子和父两部分。子组件只关心渲染评论，而父组件将设置订阅，并将最新的数据通过props传递到子组件上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// This is a child component.</span></div><div class="line"><span class="comment">// It only renders the comments it receives as props.</span></div><div class="line"><span class="keyword">var</span> CommentList = React.createClass(&#123;</div><div class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Note: now reading from props rather than state.</span></div><div class="line">    <span class="keyword">var</span> comments = <span class="keyword">this</span>.props.comments;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &#123;comments.map(function(comment) &#123;</div><div class="line">          return &lt;Comment comment=&#123;comment&#125; key=&#123;comment.id&#125; /&gt;</div><div class="line">        &#125;)&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// This is a parent component.</div><div class="line">// It subscribes to the data source and renders &lt;CommentList /&gt;.</div><div class="line">var CommentListWithSubscription = React.createClass(&#123;</div><div class="line">  getInitialState: function() &#123;</div><div class="line">    return &#123;</div><div class="line">      comments: DataSource.getComments()</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  componentDidMount: function() &#123;</div><div class="line">    DataSource.addChangeListener(this.handleChange);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  componentWillUnmount: function() &#123;</div><div class="line">    DataSource.removeChangeListener(this.handleChange);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  handleChange: function() &#123;</div><div class="line">    this.setState(&#123;</div><div class="line">      comments: DataSource.getComments()</div><div class="line">    &#125;);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  render: function() &#123;</div><div class="line">    // We pass the current state as props to CommentList.</div><div class="line">    return &lt;CommentList comments=&#123;this.state.comments&#125; /&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">module.exports = CommentListWithSubscription;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>There is just one final step left to do.</p>
<p>Remember how we made withLogging() take a function and return another function wrapping it? We can apply a similar pattern to React components.</p>
<p>We will write a new function called withSubscription(WrappedComponent). Its argument could be any React component. We will pass CommentList as WrappedComponent, but we could also apply withSubscription() to any other component in our codebase.</p>
<p>This function would return another component. The returned component would manage the subscription and render <wrappedcomponent> with the current data.</wrappedcomponent></p>
<p>We call this pattern a “higher-order component”.</p>
<p>The composition happens at React rendering level rather than with a direct function call. This is why it doesn’t matter whether the wrapped component is defined with createClass(), as an ES6 class or a function. If WrappedComponent is a React component, the component created by withSubscription() can render it.</p>
</blockquote>
<p>只剩下最后一步了。</p>
<p>还记得我们如何使得<code>withLogging()</code>传入一个函数并返回另一个嵌套它的函数吗？我们可以将相似的模式应用到React组件上来。</p>
<p>我们将编写一个新的函数，叫做<code>withSubscription(WrappedComponent)</code>。它的参数可以是任意的React组件。我们将传递<code>CommentList</code>作为<code>WrappedComponent</code>，但我们也可以在我们的代码基中将<code>withSubscription()</code>应用到任意其他的组件上。</p>
<p>这个函数会返回另一个组件。返回的组件将会管理好订阅，并渲染包含数据的<code>&lt;WrappedComponent /&gt;</code>。</p>
<p>我们把这种模式称为一个“高阶组件”。</p>
<p>这种合成发生在React的渲染层，而不是通过一个直接的函数调用。这就是为什么无论内嵌的组件是由<code>createClass()</code>创建的，还是由ES6 class生成的，抑或是一个函数，都无关紧要了。如果<code>WrappedComponent</code>是一个React组件，通过<code>withSubscription()</code>创建的组件都能渲染它。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// This function takes a component...</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">withSubscription</span>(<span class="params">WrappedComponent</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...and returns another component...</span></div><div class="line">  <span class="keyword">return</span> React.createClass(&#123;</div><div class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        comments: DataSource.getComments()</div><div class="line">      &#125;;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// ... that takes care of the subscription...</span></div><div class="line">      DataSource.addChangeListener(<span class="keyword">this</span>.handleChange);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      DataSource.removeChangeListener(<span class="keyword">this</span>.handleChange);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    handleChange: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.setState(&#123;</div><div class="line">        comments: DataSource.getComments()</div><div class="line">      &#125;);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// ... and renders the wrapped component with the fresh data!</span></div><div class="line">      <span class="keyword">return</span> &lt;WrappedComponent comments=&#123;this.state.comments&#125; /&gt;;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Now we can declare CommentListWithSubscription by applying withSubscription to CommentList:</p>
</blockquote>
<p>现在我们可以通过应用<code>withSubscription</code>到<code>CommentList</code>上来声明<code>CommentListWithSubscription</code>了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> CommentList = React.createClass(&#123;</div><div class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> comments = <span class="keyword">this</span>.props.comments;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &#123;comments.map(function(comment) &#123;</div><div class="line">          return &lt;Comment comment=&#123;comment&#125; key=&#123;comment.id&#125; /&gt;</div><div class="line">        &#125;)&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// withSubscription() returns a new component that</div><div class="line">// is subscribed to the data source and renders</div><div class="line">// &lt;CommentList /&gt; with up-to-date data.</div><div class="line">var CommentListWithSubscription = withSubscription(CommentList);</div><div class="line"></div><div class="line">// The rest of the app is interested in the subscribed component</div><div class="line">// so we export it instead of the original unwrapped CommentList.</div><div class="line">module.exports = CommentListWithSubscription;</div></pre></td></tr></table></figure>
<blockquote>
<p>Solution, Revisited<br>Now that we understand higher-order components better, let’s take another look at the complete solution that doesn’t involve mixins. There are a few minor changes that are annotated with inline comments:</p>
</blockquote>
<h3 id="解决方案，重现"><a href="#解决方案，重现" class="headerlink" title="解决方案，重现"></a>解决方案，重现</h3><p>现在我们能更好的理解高阶组件了，让我们来再看一次完整的、无需涉及mixins的解决方案。内联的注释有少量修改。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">withSubscription</span>(<span class="params">WrappedComponent</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> React.createClass(&#123;</div><div class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        comments: DataSource.getComments()</div><div class="line">      &#125;;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      DataSource.addChangeListener(<span class="keyword">this</span>.handleChange);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      DataSource.removeChangeListener(<span class="keyword">this</span>.handleChange);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    handleChange: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.setState(&#123;</div><div class="line">        comments: DataSource.getComments()</div><div class="line">      &#125;);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// Use JSX spread syntax to pass all props and state down automatically.</span></div><div class="line">      <span class="keyword">return</span> &lt;WrappedComponent &#123;...this.props&#125; &#123;...this.state&#125; /&gt;;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Optional change: convert CommentList to a functional component</div><div class="line">// because it doesn't use lifecycle hooks or state.</div><div class="line">function CommentList(props) &#123;</div><div class="line">  var comments = props.comments;</div><div class="line">  return (</div><div class="line">    &lt;div&gt;</div><div class="line">      &#123;comments.map(function(comment) &#123;</div><div class="line">        return &lt;Comment comment=&#123;comment&#125; key=&#123;comment.id&#125; /&gt;</div><div class="line">      &#125;)&#125;</div><div class="line">    &lt;/div&gt;</div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Instead of declaring CommentListWithSubscription,</div><div class="line">// we export the wrapped component right away.</div><div class="line">module.exports = withSubscription(CommentList);</div></pre></td></tr></table></figure>
<blockquote>
<p>Higher-order components are a powerful pattern. You can pass additional arguments to them if you want to further customize their behavior. After all, they are not even a feature of React. They are just functions that receive components and return components that wrap them.</p>
<p>Like any solution, higher-order components have their own pitfalls. For example, if you heavily use refs, you might notice that wrapping something into a higher-order component changes the ref to point to the wrapping component. In practice we discourage using refs for component communication so we don’t think it’s a big issue. In the future, we might consider adding ref forwarding to React to solve this annoyance.</p>
</blockquote>
<p>高阶组件是一个强大的模式。你可以给它们传递更多的参数，如果你想要进一步高度定制它们的行为。毕境，它们甚至不是React的特性之一。它们只是接受传入组件，并返回嵌套了传入组件的新组件的函数而已。</p>
<p>就像其它解决方案，高阶函数同样有他们的潜在风险。比如，如果你大量地使用refs（组件引用），你可能会发现，将任意组件嵌套进高阶组件里面时，内层组件的ref会被改变。在实践中我们不建议使用refs来实现组件间通信，所以我们不认为这是个大问题。在未来，我们将考虑引入ref重定向到React中来解决这个问题。</p>
<blockquote>
<p>Rendering Logic<br>The next most common use case for mixins that we discovered in our codebase is sharing rendering logic between components.</p>
<p>Here is a typical example of this pattern:</p>
</blockquote>
<h2 id="渲染逻辑"><a href="#渲染逻辑" class="headerlink" title="渲染逻辑"></a>渲染逻辑</h2><p>在我们的代码库中，我们发现的下一个常见的mixins用例是组件间渲染逻辑的共享。</p>
<p>以下是这个模式的典型例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> RowMixin = &#123;</div><div class="line">  <span class="comment">// Called by components from render()</span></div><div class="line">  renderHeader: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div className='row-header'&gt;</div><div class="line">        &lt;h1&gt;</div><div class="line">          &#123;this.getHeaderText() /* Defined by components */&#125;</div><div class="line">        &lt;/h1&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> UserRow = React.createClass(&#123;</div><div class="line">  mixins: [RowMixin],</div><div class="line"></div><div class="line">  <span class="comment">// Called by RowMixin.renderHeader()</span></div><div class="line">  getHeaderText: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.user.fullName;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &#123;this.renderHeader() /* Defined by RowMixin */&#125;</div><div class="line">        &lt;h2&gt;&#123;this.props.user.biography&#125;&lt;/h2&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>Multiple components may be sharing RowMixin to render the header, and each of them would need to define getHeaderText().</p>
</blockquote>
<p>多个组件可能共享了<code>RowMixin</code>来渲染行头，而每个这些组件都需要定义一个<code>getHeaderText()</code>方法。</p>
<blockquote>
<p>Solution</p>
<p>If you see rendering logic inside a mixin, it’s time to extract a component!</p>
<p>Instead of RowMixin, we will define a <row> component. We will also replace the convention of defining a getHeaderText() method with the standard mechanism of top-data flow in React: passing props.</row></p>
<p>Finally, since neither of those components currently need lifecycle hooks or state, we can declare them as simple functions:</p>
</blockquote>
<h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><p>如果你看见了一个mixin里面含有渲染逻辑，那么是时候把它们抽离到组件中了！</p>
<p>我们将定义一个<code>&lt;Row&gt;</code>组件来取代<code>RowMixin</code>。我们也将会把借由定义一个<code>getHeaderText()</code>方法来实现转换的方式替换成React中标准的自顶向下数据流机制：传递props。</p>
<p>最后，因为这些组件现在都不再需要生命周期钩子和状态了，我们会把他们定义为简单的函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">RowHeader</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;div className='row-header'&gt;</div><div class="line">      &lt;h1&gt;&#123;props.text&#125;&lt;/h1&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">UserRow</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;RowHeader text=&#123;props.user.fullName&#125; /&gt;</div><div class="line">      &lt;h2&gt;&#123;props.user.biography&#125;&lt;/h2&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Props keep component dependencies explicit, easy to replace, and enforceable with tools like Flow and TypeScript.</p>
</blockquote>
<p>Props使得组件依赖保持显式、易于替换、对诸如Flow和TypeScript一类的工具更易执行。</p>
<blockquote>
<p>Note:</p>
<p>Defining components as functions is not required. There is also nothing wrong with using lifecycle hooks and state—they are first-class React features. We use functional components in this example because they are easier to read and we didn’t need those extra features, but classes would work just as fine.</p>
</blockquote>
<p>备注：<br>将组件定义为函数不是必需的。使用React的头等特性：生命周期钩子和状态也是没有任何错误的。我们在这个示例中使用函数式组件，因为它们可以更易于阅读，并且我们不需要那些另外的特性，但使用classes也是一样的效果。</p>
<blockquote>
<p>Context<br>Another group of mixins we discovered were helpers for providing and consuming React context. Context is an experimental unstable feature, has certain issues, and will likely change its API in the future. We don’t recommend using it unless you’re confident there is no other way of solving your problem.</p>
<p>Nevertheless, if you already use context today, you might have been hiding its usage with mixins like this:</p>
</blockquote>
<h2 id="上下文（Context）"><a href="#上下文（Context）" class="headerlink" title="上下文（Context）"></a>上下文（Context）</h2><p>我们发现的另外一系列mixins是提供和消费React Context的辅助器。Context是一个实验性的不稳定特性，存在确定的缺陷，而且它的API在未来可能会被改变。我们不推荐使用它，除非你十分确定没有其他方法来解决你的问题。</p>
<p>尽管如此，如果你已经使用了context，你可能把它的使用隐藏在了mixins里，就像这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> RouterMixin = &#123;</div><div class="line">  contextTypes: &#123;</div><div class="line">    router: React.PropTypes.object.isRequired</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// The mixin provides a method so that components</span></div><div class="line">  <span class="comment">// don't have to use the context API directly.</span></div><div class="line">  push: <span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.context.router.push(path)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Link = React.createClass(&#123;</div><div class="line">  mixins: [RouterMixin],</div><div class="line"></div><div class="line">  handleClick: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    e.stopPropagation();</div><div class="line"></div><div class="line">    <span class="comment">// This method is defined in RouterMixin.</span></div><div class="line">    <span class="keyword">this</span>.push(<span class="keyword">this</span>.props.to);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;a onClick=&#123;this.handleClick&#125;&gt;</div><div class="line">        &#123;this.props.children&#125;</div><div class="line">      &lt;/a&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = Link;</div></pre></td></tr></table></figure>
<blockquote>
<p>Solution<br>We agree that hiding context usage from consuming components is a good idea until the context API stabilizes. However, we recommend using higher-order components instead of mixins for this.</p>
<p>Let the wrapping component grab something from the context, and pass it down with props to the wrapped component:</p>
</blockquote>
<h3 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h3><p>在context的API稳定之前，我们认为，将context的调用在组件中隐藏起来是个好主意。不过，我们推荐使用高阶组件来取代mixins来实现这点。</p>
<p>让外层组件从context中获取数据，并通过props传递到内层组件中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">withRouter</span>(<span class="params">WrappedComponent</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> React.createClass(&#123;</div><div class="line">    contextTypes: &#123;</div><div class="line">      router: React.PropTypes.object.isRequired</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// The wrapper component reads something from the context</span></div><div class="line">      <span class="comment">// and passes it down as a prop to the wrapped component.</span></div><div class="line">      <span class="keyword">var</span> router = <span class="keyword">this</span>.context.router;</div><div class="line">      <span class="keyword">return</span> &lt;WrappedComponent &#123;...this.props&#125; router=&#123;router&#125; /&gt;;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var Link = React.createClass(&#123;</div><div class="line">  handleClick: function(e) &#123;</div><div class="line">    e.stopPropagation();</div><div class="line"></div><div class="line">    // The wrapped component uses props instead of context.</div><div class="line">    this.props.router.push(this.props.to);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  render: function() &#123;</div><div class="line">    return (</div><div class="line">      &lt;a onClick=&#123;this.handleClick&#125;&gt;</div><div class="line">        &#123;this.props.children&#125;</div><div class="line">      &lt;/a&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// Don't forget to wrap the component!</div><div class="line">module.exports = withRouter(Link);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>If you’re using a third party library that only provides a mixin, we encourage you to file an issue with them linking to this post so that they can provide a higher-order component instead. In the meantime, you can create a higher-order component around it yourself in exactly the same way.</p>
</blockquote>
<p>如果你在使用一个只提供mixin的第三方库，我们建议你去提交一个issue，引用本文链接，让他们去做成高阶组件。在这期间，通过完全一样的方式，你可以自己动手围绕它做一个高阶组件。</p>
<blockquote>
<p>Utility Methods<br>Sometimes, mixins are used solely to share utility functions between components:</p>
</blockquote>
<h2 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h2><p>有时候，mixins仅仅是用作在组件间共享的通用工具函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ColorMixin = &#123;</div><div class="line">  getLuminance(color) &#123;</div><div class="line">    <span class="keyword">var</span> c = <span class="built_in">parseInt</span>(color, <span class="number">16</span>);</div><div class="line">    <span class="keyword">var</span> r = (c &amp; <span class="number">0xFF0000</span>) &gt;&gt; <span class="number">16</span>;</div><div class="line">    <span class="keyword">var</span> g = (c &amp; <span class="number">0x00FF00</span>) &gt;&gt; <span class="number">8</span>;</div><div class="line">    <span class="keyword">var</span> b = (c &amp; <span class="number">0x0000FF</span>);</div><div class="line">    <span class="keyword">return</span> (<span class="number">0.299</span> * r + <span class="number">0.587</span> * g + <span class="number">0.114</span> * b);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Button = React.createClass(&#123;</div><div class="line">  mixins: [ColorMixin],</div><div class="line"></div><div class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> theme = <span class="keyword">this</span>.getLuminance(<span class="keyword">this</span>.props.color) &gt; <span class="number">160</span> ? <span class="string">'dark'</span> : <span class="string">'light'</span>;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div className=&#123;theme&#125;&gt;</div><div class="line">        &#123;this.props.children&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Solution<br>Put utility functions into regular JavaScript modules and import them. This also makes it easier to test them or use them outside of your components:</p>
</blockquote>
<h3 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案"></a>解决方案</h3><p>将通用的工具方法放入常规的JavaScript模块中，并引入它们。这同样使得测试和组件外调用变得简单：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getLuminance = <span class="built_in">require</span>(<span class="string">'../utils/getLuminance'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> Button = React.createClass(&#123;</div><div class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> theme = getLuminance(<span class="keyword">this</span>.props.color) &gt; <span class="number">160</span> ? <span class="string">'dark'</span> : <span class="string">'light'</span>;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div className=&#123;theme&#125;&gt;</div><div class="line">        &#123;this.props.children&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>Other Use Cases<br>Sometimes people use mixins to selectively add logging to lifecycle hooks in some components. In the future, we intend to provide an official DevTools API that would let you implement something similar without touching the components. However it’s still very much a work in progress. If you heavily depend on logging mixins for debugging, you might want to keep using those mixins for a little longer.</p>
<p>If you can’t accomplish something with a component, a higher-order component, or a utility module, it could be mean that React should provide this out of the box. File an issue to tell us about your use case for mixins, and we’ll help you consider alternatives or perhaps implement your feature request.</p>
<p>Mixins are not deprecated in the traditional sense. You can keep using them with React.createClass(), as we won’t be changing it further. Eventually, as ES6 classes gain more adoption and their usability problems in React are solved, we might split React.createClass() into a separate package because most people wouldn’t need it. Even in that case, your old mixins would keep working.</p>
<p>We believe that the alternatives above are better for the vast majority of cases, and we invite you to try writing React apps without using mixins.</p>
</blockquote>
<h2 id="其他用例"><a href="#其他用例" class="headerlink" title="其他用例"></a>其他用例</h2><p>有时候，人们使用mixins来向一些组件添加选择性的生命周期钩子日志记录。在未来，我们计划提供一个官方的开发工具API来实现相似功能，而无需触碰组件代码。虽然这仍有大量正在进度中的工作需要完成。如果你十分依赖日志记录mixins来调试，你可能还要继续保持使用它们一段时间。</p>
<p>如果你借助一个组件、一个高阶组件、或者一个通用模块，仍然不能完成一些事情，这意味着React应该是难以完成这样的事情的。向我们提交一个issue，告诉我们你的mixins使用场景，我们会帮助你考虑可选的方案，或者是在未来实现你的新特性请求。</p>
<p>Mixins在传统感官中不是完全抛弃的。你可以通过<code>React.createClass()</code>继续使用它们，因为我们不会在未来修改它。最终，当ES6 classes得到更广泛的采用，并且它们在React中使用上的问题得到解决时，我们也许会将<code>React.createClass()</code>分离到独立的包之中，因为大多数人不再需要它。即使是在那样的情况下，你的老mixins仍然能够继续工作。</p>
<p>我们相信，以上所提到的可选方案对于绝大多数的场景是更好的选择，我们邀请你来尝试在不使用mixins的情况下编写React应用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2016/07/23/mixins-considered-harmful/&quot;&gt;上篇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&quot;https://facebook.github.io/react/blog/2016/07/13/mixins-consid
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="front-end" scheme="http://blog.chionlab.moe/tags/front-end/"/>
    
      <category term="React" scheme="http://blog.chionlab.moe/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>mixins是有害的（Mixins Considered Harmful）［上篇］</title>
    <link href="http://blog.chionlab.moe/2016/07/23/mixins-considered-harmful/"/>
    <id>http://blog.chionlab.moe/2016/07/23/mixins-considered-harmful/</id>
    <published>2016-07-23T12:12:22.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html" target="_blank" rel="external">Facebook React: Mixins Considered Harmful</a></p>
<blockquote>
<p>“How do I share the code between several components?” is one of the first questions that people ask when they learn React. Our answer has always been to use component composition for code reuse. You can define a component and use it in several other components.</p>
</blockquote>
<p>“我如何在多个组件（components）之间共享代码？”，这是React初学者的问题之一。我们的答案一直都是，通过组件组合的方法来实现代码复用。你可以定义一个组件，并在其它的组件中使用它。</p>
<blockquote>
<p>It is not always obvious how a certain pattern can be solved with composition. React is influenced by functional programming but it came into the field that was dominated by object-oriented libraries. It was hard for engineers both inside and outside of Facebook to give up on the patterns they were used to.</p>
</blockquote>
<p>通过组件组合的方式来解决某一种情况不总是显而易见的。React受函数式编程影响，但结果它成为了由面向对象库组成的存在。无伦是Facebook内部员工，还是非Facebook的程序员，抛弃以往的开发方式都是困难的。</p>
<blockquote>
<p>To ease the initial adoption and learning, we included certain escape hatches into React. The mixin system was one of those escape hatches, and its goal was to give you a way to reuse code between components when you aren’t sure how to solve the same problem with composition.</p>
</blockquote>
<p>为了让入门学习变得简单，我们引入了一些解决方案（原文“escape hatches”即逃生舱，此处语义为解决问题的一些trick）。Mixin系统是其中的一个方法，它的目的是，当你不知道如何通过组件组合来解决问题时，来给你一个方法来实现组件间的代码复用。</p>
<blockquote>
<p>Three years passed since React was released. The landscape has changed. Multiple view libraries now adopt a component model similar to React. Using composition over inheritance to build declarative user interfaces is no longer a novelty. We are also more confident in the React component model, and we have seen many creative uses of it both internally and in the community.<br>In this post, we will consider the problems commonly caused by mixins. Then we will suggest several alternative patterns for the same use cases. We have found those patterns to scale better with the complexity of the codebase than mixins.</p>
</blockquote>
<p>React发布后三年过去了，大环境发生了改变。大多数视图库现在都采用类似React的组件模型。通过多个组件在继承关系之上的组合来构建用户界面不再是一个新奇的方式。我们也对React的组件模型更加自信，并且在内部和社区中，都看到了许多具有创新性的使用方式。<br>在这篇文章中，我们会讨论由mixins造成的普遍问题。然后我们会提出一些同等情况下的可选替代方案。这些新的方案，在同等的代码复杂度下，比用mixins的可扩展性更好。</p>
<h2 id="为什么说Mixins不好？"><a href="#为什么说Mixins不好？" class="headerlink" title="为什么说Mixins不好？"></a>为什么说Mixins不好？</h2><blockquote>
<p>At Facebook, React usage has grown from a few components to thousands of them. This gives us a window into how people use React. Thanks to declarative rendering and top-down data flow, many teams were able to fix a bunch of bugs while shipping new features as they adopted React.</p>
</blockquote>
<p>在Facebook，React的使用从少量的组件演变成上千的组件数量。这给我们看见了人们是如何使用React的。多亏于声明性的渲染和自上而下的数据流，很多团队能够在迁移项目到React的时候修复一些bug。</p>
<blockquote>
<p>However it’s inevitable that some of our code using React gradually became incomprehensible. Occasionally, the React team would see groups of components in different projects that people were afraid to touch. These components were too easy to break accidentally, were confusing to new developers, and eventually became just as confusing to the people who wrote them in the first place. Much of this confusion was caused by mixins. At the time, I wasn’t working at Facebook but I came to the same conclusions after writing my fair share of terrible mixins.</p>
</blockquote>
<p>但是，一个很难避免的情况是，一些代码在使用了React了之后逐渐降低了可读性。有时，使用React的开发团队中会出现一些人们不太愿意去触碰的组件，而这些组件在不同的项目中被使用了。这些组件太容易意外损坏，这不但困扰了新加入的开发者，最终也困扰了一开始编写这些组件的人。这些麻烦的问题大多是由mixins造成的。在那时，我还未在Facebook工作，但在使用了一系列糟糕的mixins之后，我也能得出跟现在一样的结论。</p>
<blockquote>
<p>This doesn’t mean that mixins themselves are bad. People successfully employ them in different languages and paradigms, including some functional languages. At Facebook, we extensively use traits in Hack which are fairly similar to mixins. Nevertheless, we think that mixins are unnecessary and problematic in React codebases. Here’s why.</p>
</blockquote>
<p>这并不代表mixins都是不好的。人们成功地在不同的语言和范例中应用了mixins，其中包括了一些函数式语言。在Facebook，我们大量使用了类似mixins的一些比较hack的实现方式。我们认为mixins在React中是不再必要的，而且是非常容易出问题的。接下来讨论这是为什么。</p>
<h2 id="Mixins引入了隐性的依赖"><a href="#Mixins引入了隐性的依赖" class="headerlink" title="Mixins引入了隐性的依赖"></a>Mixins引入了隐性的依赖</h2><blockquote>
<p>Sometimes a component relies on a certain method defined in the mixin, such as getClassName(). Sometimes it’s the other way around, and mixin calls a method like renderHeader() on the component. JavaScript is a dynamic language so it’s hard to enforce or document these dependencies.<br>Mixins break the common and usually safe assumption that you can rename a state key or a method by searching for its occurrences in the component file. You might write a stateful component and then your coworker might add a mixin that reads this state. In a few months, you might want to move that state up to the parent component so it can be shared with a sibling. Will you remember to update the mixin to read a prop instead? What if, by now, other components also use this mixin?</p>
</blockquote>
<p>有时候一个组件依赖一个在mixin中定义的确定的方法，比如<code>getClassName()</code>。有时候在另一个场景下，mixin在组件上调用了一个方法，比如<code>renderHeader()</code>。JavaScript是一种动态语言，所以去强制定义或者记录这些依赖是很困难的。<br>Mixins打破了一个通用的、通常是安全的假设：你可以通过在组件源码文件中搜索的方式来重命名一个方法或者一个状态的key。你写了一个具有状态的组件，然后你的组员加入了一个mixin来读取它的状态。过了一两个月，你想把这个状态挪到父组件上，来实现跟相邻组件共享。你会记得同时更新这个mixin的代码，把它改为读取prop吗？再如果，现在还有其它组件也使用了这个mixin？</p>
<blockquote>
<p>These implicit dependencies make it hard for new team members to contribute to a codebase. A component’s render() method might reference some method that isn’t defined on the class. Is it safe to remove? Perhaps it’s defined in one of the mixins. But which one of them? You need to scroll up to the mixin list, open each of those files, and look for this method. Worse, mixins can specify their own mixins, so the search can be deep.<br>Often, mixins come to depend on other mixins, and removing one of them breaks the other. In these situations it is very tricky to tell how the data flows in and out of mixins, and what their dependency graph looks like. Unlike components, mixins don’t form a hierarchy: they are flattened and operate in the same namespace.</p>
</blockquote>
<p>这些隐形的依赖使得新成员在现有代码基础上继续开发变得困难。一个组件的<code>render()</code>方法也许引用了一些不在本类中定义的方法，删除它们是否安全？也许它们定义在mixins中，但是在哪个里面呢？你需要滚动到mixin列表，打开每个mixin的源码，来找这些方法。更坏的是，mixins可以定义它们自己的mixins，所以这次查找是一次深度查找。<br>经常地，mixins还依赖其它的mixins，如果你删除其中之一，可能会波及到另外的。在这种情况下，说明数据如何在mixins流入流出就变得很棘手了，更别说画出它们之间的依赖关系图。不像组件，mixins不会构成继承链：它们是扁平化的，并在同一个命名空间中起作用。</p>
<h2 id="Mixins造成命名冲突"><a href="#Mixins造成命名冲突" class="headerlink" title="Mixins造成命名冲突"></a>Mixins造成命名冲突</h2><blockquote>
<p>There is no guarantee that two particular mixins can be used together. For example, if FluxListenerMixin defines handleChange() and WindowSizeMixin defines handleChange(), you can’t use them together. You also can’t define a method with this name on your own component.<br>It’s not a big deal if you control the mixin code. When you have a conflict, you can rename that method on one of the mixins. However it’s tricky because some components or other mixins may already be calling this method directly, and you need to find and fix those calls as well.</p>
</blockquote>
<p>从没有保证说任意两个mixins可以在一起使用。比如，如果<code>FluxListenerMixin</code>定义了<code>handleChange()</code>，<code>WindowSizeMixin</code>也定义了<code>handleChange()</code>，你就不能把它们拿在一块用。你也不能在你的组件中用这个名字来命名方法。<br>如果你能控制mixin的代码，那问题是不大的。当你遇到了命名冲突，你可以在其中的mixin中修改那个方法的名字。但是，如果有另外的mixins或是组件已经直接调用了这个方法，这就变得很棘手了，你需要同时找到和修复这些调用。</p>
<blockquote>
<p>If you have a name conflict with a mixin from a third party package, you can’t just rename a method on it. Instead, you have to use awkward method names on your component to avoid clashes.<br>The situation is no better for mixin authors. Even adding a new method to a mixin is always a potentially breaking change because a method with the same name might already exist on some of the components using it, either directly or through another mixin. Once written, mixins are hard to remove or change. Bad ideas don’t get refactored away because refactoring is too risky.</p>
</blockquote>
<p>如果你在使用一个第三方包的mixin时遇到了命名冲突，你就不能改它的方法名了。取而代之，你需要在你的组件中使用很蹩脚的方法名来避免冲突。<br>这样的情况对于mixin作者来说并没有好多少。加入一个新方法到mixin中总是一个潜在的风险，因为在已经使用了这个mixin的组件中，可能早就存在同名的方法了，无伦是直接调用还是通过其它mixin来调用。一旦mixins写好，就很困难去修改或者移除其中的东西。一些欠佳的实现方式得不到重构，因为重构的风险太大。</p>
<h2 id="Mixins造成滚雪球式的复杂性"><a href="#Mixins造成滚雪球式的复杂性" class="headerlink" title="Mixins造成滚雪球式的复杂性"></a>Mixins造成滚雪球式的复杂性</h2><blockquote>
<p>Even when mixins start out simple, they tend to become complex over time. The example below is based on a real scenario I’ve seen play out in a codebase.<br>A component needs some state to track mouse hover. To keep this logic reusable, you might extract handleMouseEnter(), handleMouseLeave() and isHovering() into a HoverMixin. Next, somebody needs to implement a tooltip. They don’t want to duplicate the logic in HoverMixin so they create a TooltipMixin that uses HoverMixin. TooltipMixin reads isHovering() provided by HoverMixin in its componentDidUpdate() and either shows or hides the tooltip.</p>
</blockquote>
<p>虽然mixins是从简单开始的，但它们会随着时间变得越来越复杂。下面的例子是基于一个真实的情况。<br>一个组件需要一些状态来跟踪鼠标的悬浮（hover）。为了使这个逻辑可复用，你抽取了<code>handleMouseEnter()</code>、<code>handleMouseLeave()</code>、<code>isHovering()</code>方法到一个<code>HoverMixin</code>里。接下来，有人需要实现一个悬浮提示框（tooltip）。他们不想拷贝<code>HoverMixin</code>里的逻辑代码，因此创建了一个<code>TooltipMixin</code>，这个<code>TooltipMixin</code>引用了<code>HoverMixin</code>，<code>TooltipMixin</code>在它的<code>componentDidUpdate()</code>中读取由<code>HoverMixin</code>提供的<code>isHovering()</code>来显示或者隐藏提示框。</p>
<blockquote>
<p>A few months later, somebody wants to make the tooltip direction configurable. In an effort to avoid code duplication, they add support for a new optional method called getTooltipOptions() to TooltipMixin. By this time, components that show popovers also use HoverMixin. However popovers need a different hover delay. To solve this, somebody adds support for an optional getHoverOptions() method and implements it in TooltipMixin. Those mixins are now tightly coupled.<br>This is fine while there are no new requirements. However this solution doesn’t scale well. What if you want to support displaying multiple tooltips in a single component? You can’t define the same mixin twice in a component. What if the tooltips need to be displayed automatically in a guided tour instead of on hover? Good luck decoupling TooltipMixin from HoverMixin. What if you need to support the case where the hover area and the tooltip anchor are located in different components? You can’t easily hoist the state used by mixin up into the parent component. Unlike components, mixins don’t lend themselves naturally to such changes.</p>
</blockquote>
<p>几个月后，有人想让这个提示框的弹出方向变得可配置。为了避免代码重复，他们添加了一个新的配置方法<code>getTooltipOptions()</code>到<code>TooltipMixin</code>。在这时，需要弹出浮层的组件也使用了<code>HoverMixin</code>。但是浮层需要不同的鼠标悬浮延时。为了解决这个问题，有人添加并实现了一个配置方法<code>getHoverOptions()</code>到<code>TooltipMixin</code>中。这两个mixins现在紧紧耦合在一起了。<br>如果没有新的需求，这样是没有问题的。但是这个方法的可扩展性并不强。如果你想在同一个组件里面支持显示多个提示框呢？你不能在一个组件里面定义两次同一个mixin。如果提示框需要在用户引导里自动弹出，而不是在鼠标悬浮时弹出呢？你想解耦<code>TooltipMixin</code>和<code>HoverMixin</code>？祝你好运。如果你想让鼠标悬浮点和提示框锚点在不同的组件中呢？你不能轻易地将mixin使用的状态抬升到父组件中。不像组件，mixins在遇到这些改变时并不能很自然地交付。</p>
<blockquote>
<p>Every new requirement makes the mixins harder to understand. Components using the same mixin become increasingly coupled with time. Any new capability gets added to all of the components using that mixin. There is no way to split a “simpler” part of the mixin without either duplicating the code or introducing more dependencies and indirection between mixins. Gradually, the encapsulation boundaries erode, and since it’s hard to change or remove the existing mixins, they keep getting more abstract until nobody understands how they work.<br>These are the same problems we faced building apps before React. We found that they are solved by declarative rendering, top-down data flow, and encapsulated components. At Facebook, we have been migrating our code to use alternative patterns to mixins, and we are generally happy with the results. You can read about those patterns below.</p>
</blockquote>
<p>每个新需求让mixins变得越来越难以理解。随着时间，使用同一个mixin的组件之间的耦合度变得越来越高。任何新的功能都会同时被附加到所有使用了这个mixin的组件。没有方法去分离这个mixin的“更简单”的部分，除非去拷贝其中的代码，或者在mixins之间引入更多的依赖和奇技淫巧。逐渐地，原来的封装会瓦解，并且因为更改或者移除已经存在的mixins是困难的，它们会变得更抽象，直到没人理解它们是怎么工作的。<br>这些问题跟我们在React出来之前构建应用程序时遇到的问题是一样的。我们认为这些问题可以通过声明性的渲染、自上而下的数据流和组件封装来解决。在Facebook，我们已经将代码的实现方式从mixins迁移到了取而代之的模式，并且我们对结果很乐观。你可以继续阅读来了解我们的新模式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Facebook Reac
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="front-end" scheme="http://blog.chionlab.moe/tags/front-end/"/>
    
      <category term="React" scheme="http://blog.chionlab.moe/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>OpenWRT下双WAN配置</title>
    <link href="http://blog.chionlab.moe/2016/07/13/openwrt-multiwan-configuration/"/>
    <id>http://blog.chionlab.moe/2016/07/13/openwrt-multiwan-configuration/</id>
    <published>2016-07-13T14:24:37.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>晚上好。博主前段时间因沉迷CGSS和PS4游戏，长时间未更新博客，实在不好。现在正值暑假，博主在公司实习，今晚趁未加班，写一篇早就想写的openwrt路由器干货。</p>
<p>本文讲述如何在openwrt家用智能路由器上配置双WAN带宽叠加。</p>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul>
<li>两条或更多的宽带，或者是支持单线多拨的宽带。</li>
<li>已经安装MWAN3及luci图形化配置界面（Pandorabox固件默认已安装）。</li>
</ul>
<h2 id="VLAN配置"><a href="#VLAN配置" class="headerlink" title="VLAN配置"></a>VLAN配置</h2><blockquote>
<p>什么是VLAN？VLAN是在同一物理局域网内用于划分若干个不同广播域（子网）的技术，子网内的主机可以互相通信，不同子网的主机之间不可互相通信。<br>什么是VLAN ID？用于标识每个VLAN子网的ID。<br>为什么要划分VLAN？在OpenWRT下，接口是根据VLAN划分的，每个逻辑接口（interface）可对应一个VLAN ID作为物理接口，这将在后面的步骤中体现出来。</p>
</blockquote>
<p>在openwrt的web配置页面上，进入 网络-&gt;交换机 (Network-&gt;Switch)。<br>默认情况下，已经分配的VLAN应该有1个或者2个。<br>通过插拔网线的方法，将配置页上的端口和路由器的物理RJ45接口对应上来。<br>在小米路由器mini上，默认分配如下两个vlan：<br><img src="/images/openwrt-switch-1.png" alt=""><br>其中，VLAN1用作LAN，连接了除端口4以外的所有物理端口；VLAN2是默认的WAN，只连接端口4。（此处端口4即为小米路由器mini上的蓝色WAN RJ45物理端口）<br>注意，端口状态“不关联”(untagged)，即该端口作为本VLAN成员，进行二层交换；若选择“关联”(tagged)，端口之间通信无二层交换，而是冲突广播（hub方式）。</p>
<p>选择一个端口作为第二个WAN口的端口，在现有的VLAN配置中将其设置为“关”，然后新建一个VLAN，将该端口设置为“不关联”，其他端口设置为“关”，CPU设置为“关联”。注意，小米路由器mini有一个特殊的端口7，按照原有的两个VLAN，将其设置为“关联”即可。<br>如图，博主选择端口1来作为第二个WAN端口，在VLAN1中将其设置为“关”，并在新建的VLAN3中设置其为“不关联”。<br><img src="/images/openwrt-switch-2.png" alt=""><br>保存即可。</p>
<h2 id="新建WAN接口"><a href="#新建WAN接口" class="headerlink" title="新建WAN接口"></a>新建WAN接口</h2><p>进入 网络-&gt;接口，将当前<code>WAN</code>接口更名为<code>WAN1</code>，并添加一个新接口，命名为<code>WAN2</code>。<br>在<code>WAN2</code>的配置中，设置第二条宽带的拨号方式，在“物理设置”中选择刚才添加的VLAN3（<code>eth0.3</code>）。<br><img src="/images/openwrt-interface-1.png" alt=""></p>
<p><strong>重要</strong><br>进入<code>WAN1</code>的编辑页，在“高级设置”中，勾选“使用默认网关”，填写“使用网关跃点”为40；<br>进入<code>WAN2</code>的编辑页，在“高级设置”中，勾选“使用默认网关”，填写“使用网关跃点”为41；</p>
<p>若有更多的WAN需要添加，方法类似，需要注意每个WAN接口的网关跃点必须不一样。</p>
<p>设置完成后，在接口总览中应该能看到两个WAN都成功获取到IP，如果是PPPoE方式，应该都已经拨号成功。<br><img src="/images/openwrt-interface-2.png" alt=""></p>
<h2 id="MWAN3配置"><a href="#MWAN3配置" class="headerlink" title="MWAN3配置"></a>MWAN3配置</h2><p>接下来需要通过MWAN3实现多WAN负载均衡。</p>
<p>进入 网络-&gt;负载均衡。</p>
<ul>
<li><p>接口配置<br>进入 配置-&gt;接口。<br>删除所有已有的默认接口。<br>添加两个接口，分别为<code>WAN1</code>，<code>WAN2</code>。<br>在接口详情的“跟踪的IP地址”中，可添加几个国内的主机IP作为检测接口是否上线的ping地址。当ping该IP多次超时后，即该接口视作下线。<br>博主的固件版本下，这个跟踪功能并不好使，经常误判断接口下线，因此我清空了跟踪的IP地址，并视作接口始终上线。<br><img src="/images/openwrt-mwan-1.png" alt=""></p>
</li>
<li><p>成员配置<br>进入 配置-&gt;成员，删除所有已有的默认成员，添加两个成员，分别命名为<code>wan_1</code>, <code>wan_2</code>。<br>成员<code>wan_1</code>设置接口为<code>WAN1</code>，跃点数1，接口比重1；<br>成员<code>wan_2</code>设置接口为<code>WAN2</code>，跃点数1，接口比重1；</p>
</li>
<li><p>策略配置<br>进入 配置-&gt;策略，添加一个策略<code>balanced</code>（或者编辑已有的<code>balanced</code>策略），使用的成员为<code>wan_1</code>, <code>wan_2</code>。</p>
</li>
<li><p>规则配置<br>进入 配置-&gt;规则，保留已有的<code>https</code>规则。如果没有<code>default_rule</code>规则，则添加一条<code>default_rule</code>规则，目标地址设置为<code>0.0.0.0/0</code>，协议选择<code>all</code>，使用的策略为<code>balanced</code>，其他留空。</p>
</li>
<li><p>保存并应用全部设置，此时应该能够实现双线负载均衡了。</p>
</li>
</ul>
<p>至此，openwrt路由器上的双WAN配置实现带宽叠加已经完成了，可以测速看看了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;晚上好。博主前段时间因沉迷CGSS和PS4游戏，长时间未更新博客，实在不好。现在正值暑假，博主在公司实习，今晚趁未加班，写一篇早就想写的openwrt路由器干货。&lt;/p&gt;
&lt;p&gt;本文讲述如何在openwrt家用智能路由器上配置双WAN带宽叠加。&lt;/p&gt;
&lt;h2 id=&quot;前提
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="OpenWRT" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OpenWRT/"/>
    
    
      <category term="openwrt" scheme="http://blog.chionlab.moe/tags/openwrt/"/>
    
      <category term="router" scheme="http://blog.chionlab.moe/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>cron任务的locale问题</title>
    <link href="http://blog.chionlab.moe/2016/04/29/cron-job-locale-issues/"/>
    <id>http://blog.chionlab.moe/2016/04/29/cron-job-locale-issues/</id>
    <published>2016-04-29T13:15:58.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://www.mk-mode.com/octopress/2013/11/26/linux-cron-locale-behavior/" target="_blank" rel="external">Linux - cron での locale の挙動！ - mk-mode BLOG</a></p>
<blockquote>
<p>こんばんは。<br>Linux で、自分が作成したスクリプトがコンソール上では正常に動作するのに、 cron で定時起動させようとすると文字コードの関係でうまく日本語出力ができないことがあります。<br>以下、それについての備忘録です。</p>
</blockquote>
<p>晚上好。<br>在Linux下，自己编写的（shell）脚本，在终端下手动运行是一切正常的。但是，由于字符编码的关系，当cron在试图以定时任务来执行该脚本时，日语文字却不能被正常输出。<br>以下是解决这一问题的备忘录。</p>
<blockquote>
<p>0. 前提条件<br>CentOS 6.4 (32bit) での作業を想定。<br>cron は crontab -e ではなく、 /etc/cron.d/ ディレクトリ配下にファイルを設置する方法。<br>文字化けが起こるスクリプトは “UTF-8” でエンコードされていて、日本語出力を伴うことを想定。<br>（当然、日本語出力を伴わないのならロケールの心配もない）</p>
</blockquote>
<h2 id="0-条件"><a href="#0-条件" class="headerlink" title="0. 条件"></a>0. 条件</h2><ul>
<li>假定操作系统是CentOS 6.4 (32bit) （译者注：6.X, 64位同样适用）</li>
<li>不使用cron的<code>crontab -e</code>，而是在<code>/etc/cron.d/</code>目录下建立配置文件来设置cron任务（译者注：同样适用于通过<code>crontab -e</code>设置的任务）</li>
<li>脚本使用UTF-8编码，并假定脚本的执行将伴随有日语文字输出，且（由cron执行时）出现了乱码。<br>（当然，如果日语输出不受locale影响，则无需担心。）</li>
</ul>
<blockquote>
<p>1. cron 外（コンソール）でのロケール<br>普通にコンソールで locale コマンドでロケールを確認してみる。</p>
</blockquote>
<h2 id="1-在cron外部（用户终端）的locale"><a href="#1-在cron外部（用户终端）的locale" class="headerlink" title="1. 在cron外部（用户终端）的locale"></a>1. 在cron外部（用户终端）的locale</h2><p>在一般的用户终端（console）中，尝试通过<code>locale</code>命令来确认当前环境的locale。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># locale</span></div><div class="line">LANG=ja_JP.UTF<span class="number">-8</span></div><div class="line">LC_CTYPE=<span class="string">"ja_JP.UTF-8"</span></div><div class="line">LC_NUMERIC=<span class="string">"ja_JP.UTF-8"</span></div><div class="line">LC_TIME=<span class="string">"ja_JP.UTF-8"</span></div><div class="line">LC_COLLATE=<span class="string">"ja_JP.UTF-8"</span></div><div class="line">LC_MONETARY=<span class="string">"ja_JP.UTF-8"</span></div><div class="line">LC_MESSAGES=<span class="string">"ja_JP.UTF-8"</span></div><div class="line">LC_PAPER=<span class="string">"ja_JP.UTF-8"</span></div><div class="line">LC_NAME=<span class="string">"ja_JP.UTF-8"</span></div><div class="line">LC_ADDRESS=<span class="string">"ja_JP.UTF-8"</span></div><div class="line">LC_TELEPHONE=<span class="string">"ja_JP.UTF-8"</span></div><div class="line">LC_MEASUREMENT=<span class="string">"ja_JP.UTF-8"</span></div><div class="line">LC_IDENTIFICATION=<span class="string">"ja_JP.UTF-8"</span></div><div class="line">LC_ALL=</div></pre></td></tr></table></figure></p>
<blockquote>
<p>2. cron 内でのロケール<br>次に cron 内で locale コマンドを実行させてみる。<br>例えば、以下のようなファイル /etc/cron.d/locale_test を作成してみる。</p>
</blockquote>
<h2 id="2-cron内的locale"><a href="#2-cron内的locale" class="headerlink" title="2. cron内的locale"></a>2. cron内的locale</h2><p>接下来，我们尝试在cron内执行<code>locale</code>命令。（译者注：其实就是在cron job中运行<code>locale</code>命令）<br>如下例，尝试创建一个文件<code>/home/hoge/work/locale.log</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* * * * * root locale &gt; /home/hoge/work/locale.log</div></pre></td></tr></table></figure></p>
<blockquote>
<p>毎分 “/home/hoge/work/” ディレクトリ内に “locale.log” というファイルが作成されるので、内容を確認してみる。</p>
</blockquote>
<p>每分钟，<code>/home/hoge/work/</code>下的<code>locale.log</code>文件都会被写入新数据，我们来尝试确认该文件内容。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">LANG=</div><div class="line">LC_CTYPE=<span class="string">"POSIX"</span></div><div class="line">LC_NUMERIC=<span class="string">"POSIX"</span></div><div class="line">LC_TIME=<span class="string">"POSIX"</span></div><div class="line">LC_COLLATE=<span class="string">"POSIX"</span></div><div class="line">LC_MONETARY=<span class="string">"POSIX"</span></div><div class="line">LC_MESSAGES=<span class="string">"POSIX"</span></div><div class="line">LC_PAPER=<span class="string">"POSIX"</span></div><div class="line">LC_NAME=<span class="string">"POSIX"</span></div><div class="line">LC_ADDRESS=<span class="string">"POSIX"</span></div><div class="line">LC_TELEPHONE=<span class="string">"POSIX"</span></div><div class="line">LC_MEASUREMENT=<span class="string">"POSIX"</span></div><div class="line">LC_IDENTIFICATION=<span class="string">"POSIX"</span></div><div class="line">LC_ALL=</div></pre></td></tr></table></figure></p>
<blockquote>
<p>“ja_JP.UTF-8” でなく “POSIX” となっている。<br>これでは、UTF-8 でエンコードされているスクリプトは日本語表示で不具合を起こすでしょう。</p>
</blockquote>
<p><code>ja_JP.UTF-8</code>并不在<code>POSIX</code>集合内。<br>因此，使用UTF-8编码的脚本在遇到日语输出时会出错。</p>
<blockquote>
<p>3. 対処方法<br>cron 内で UTF-8 でデンコードされたスクリプトを実行させる場合は、以下のように LC_CTYPE, LANG を設定してやる。</p>
</blockquote>
<h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3. 解决方法"></a>3. 解决方法</h2><p>要在cron中运行通过UTF-8编码的脚本，需要设定<code>LC_CTYPE</code>和<code>LANG</code>。如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LC_CTYPE=<span class="string">"ja_JP.utf8"</span></div><div class="line">LANG=<span class="string">"ja_JP.utf8"</span></div><div class="line"></div><div class="line">* * * * * root locale &gt; /home/hoge/work/locale.log</div></pre></td></tr></table></figure></p>
<blockquote>
<p>再度 “/home/hoge/work/” ディレクトリ内の “locale.log” の内容を確認してみる。</p>
</blockquote>
<p>再次确认<code>/home/hoge/work/</code>目录下的<code>locale.log</code>文件的内容。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">LANG=<span class="string">"ja_JP.utf8"</span></div><div class="line">LC_CTYPE=<span class="string">"ja_JP.utf8"</span></div><div class="line">LC_NUMERIC=<span class="string">"ja_JP.utf8"</span></div><div class="line">LC_TIME=<span class="string">"ja_JP.utf8"</span></div><div class="line">LC_COLLATE=<span class="string">"ja_JP.utf8"</span></div><div class="line">LC_MONETARY=<span class="string">"ja_JP.utf8"</span></div><div class="line">LC_MESSAGES=<span class="string">"ja_JP.utf8"</span></div><div class="line">LC_PAPER=<span class="string">"ja_JP.utf8"</span></div><div class="line">LC_NAME=<span class="string">"ja_JP.utf8"</span></div><div class="line">LC_ADDRESS=<span class="string">"ja_JP.utf8"</span></div><div class="line">LC_TELEPHONE=<span class="string">"ja_JP.utf8"</span></div><div class="line">LC_MEASUREMENT=<span class="string">"ja_JP.utf8"</span></div><div class="line">LC_IDENTIFICATION=<span class="string">"ja_JP.utf8"</span></div><div class="line">LC_ALL=</div></pre></td></tr></table></figure></p>
<blockquote>
<p>“ja_JP.utf8” になりました。（UTF-8 と utf8 の違いはあるが問題ない）<br>これで、日本語出力で文字化けすることがなくなります。</p>
</blockquote>
<p>现在是<code>ja_JP.utf8</code>了。（UTF-8和utf8的区别并不是个问题）<br>现在，（cron job任务的）的日语输出不会再乱码了。</p>
<blockquote>
<p>4. 参考<br>上記では任意のスクリプトについて話したが、UTF-8 エンコードの Ruby スクリプト（日本語出力を伴うもの）を cron 起動させるには以下のように -Ku オプションで文字コードを指定することでも対処可能である。</p>
</blockquote>
<h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><p>上面的记录是针对任意的脚本。若需通过cron运行含有日语输出的Ruby脚本，可以通过<code>-Ku</code>选项指定字符编码。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* * * * * root /usr/local/bin/ruby -Ku test_script.rb</div></pre></td></tr></table></figure></p>
<blockquote>
<p>5. 後始末<br>当然、テストで作成した cron スクリプトは不要なので削除しておく。</p>
<p>以上。</p>
</blockquote>
<h2 id="5-后续清理"><a href="#5-后续清理" class="headerlink" title="5. 后续清理"></a>5. 后续清理</h2><p>当然，在刚才的测试中添加的cron任务脚本（locale命令）是不再需要的，请删除它。</p>
<h2 id="译者注"><a href="#译者注" class="headerlink" title="译者注"></a>译者注</h2><p>本文locale问题的解决方案对于简体中文也是同样适用的，只需将本文中的<code>ja_JP</code>替换成<code>zh_CN</code>即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://www.mk-mode.com/octopress/2013/11/26/linux-cron-locale-behavior/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux - cron での local
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux/"/>
    
    
      <category term="maintenance" scheme="http://blog.chionlab.moe/tags/maintenance/"/>
    
      <category term="linux" scheme="http://blog.chionlab.moe/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>网易云音乐反向代理163-music-unlock更新记录</title>
    <link href="http://blog.chionlab.moe/2016/04/06/163-music-unlock-update-log/"/>
    <id>http://blog.chionlab.moe/2016/04/06/163-music-unlock-update-log/</id>
    <published>2016-04-06T15:40:45.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>这几天，博主去年开发的<a href="https://github.com/Chion82/163-music-unlock" target="_blank" rel="external">163-music-unlock</a>（<a href="https://blog.chionlab.moe/2016/01/21/netease-music-app-reversed-proxy/">开发笔记</a>）用户数急剧增加，GitHub repo获得了160多个star（甚至上了GitHub的Trending列表，作者还是有点小激动的），服务器每日请求数达到10万、600IP。随着用户增多，项目也收到了不少Issue反馈，总结如下：</p>
<ul>
<li>歌曲加载速度慢（特别是版权歌曲）</li>
<li>无法下载付费歌曲</li>
<li>无法加载其他用户的个人资料和歌单信息</li>
<li>部分付费歌曲无法播放</li>
</ul>
<h2 id="提高反代性能"><a href="#提高反代性能" class="headerlink" title="提高反代性能"></a>提高反代性能</h2><p>检查nginx access log，发现其中有多个请求状态为499。499为nginx特有的状态码，含义是客户端未等待服务器回应而主动关闭连接。<br>经过测试，发现网易云音乐客户端调用API接口时都有超时重试机制，并且超时时间比较短，大概在3～5秒左右，若服务器未在该时间内响应，客户端会直接关闭连接而重试，导致服务器上有大量499请求记录。<br>首要目标是提高服务器反代性能。其实在这之前，反代服务器基本上只有博主在使用，性能问题不明显，歌曲很快就可以加载出来了，而最近用户数量上升后，明显感觉到歌曲加载速度非常慢。<br>由于反代服务器架设在SLHK节点的VPS上，经过测试，发现瓶颈在SLHK到<code>music.163.com</code>的链路上。由于nginx的优化，nginx直接到网易的反代性能还能接受。但是python脚本调用网易云音乐API时速度很慢，甚至很多时候会直接导致gunicorn主动关闭超时请求。<br>python脚本主要处理歌曲播放地址API和歌曲下载地址API这两种请求，其他请求都直接由nginx直接反代到网易了。<br>由于网易云音乐主服务器在国内，使用国内云服务器当然是最佳的。博主测试发现，反代python脚本运行在腾讯云或阿里云上时，调用网易云音乐API速度非常快。<br>但是如果直接将反代服务器架设在腾讯云或阿里云上，有个问题：客户端是使用<code>music.163.com</code>这个域名访问80端口web服务的，而国内云平台会拦截未备案域名的web请求。但是，直接通过IP访问web服务（即HTTP头中，Host的值为服务器IP）时，不会被拦截。<br>SLHK VPS到腾讯云或阿里云的链路情况也很好。因此，我将python脚本放在腾讯云上运行，而反代服务器依然使用SLHK VPS，只不过在SLHK VPS上，将歌曲播放地址API和歌曲下载地址API的URL反代到腾讯云上（直接使用腾讯云的IP），其他URL请求维持原样。<br>将python脚本部署在腾讯云上，并在SLHK VPS上修改nginx配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">upstream balanced_backend &#123;</div><div class="line">        server music.163.com;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">        listen 80;</div><div class="line">        server_name music.163.com;</div><div class="line">        resolver 114.114.114.114;</div><div class="line"></div><div class="line">        #一般请求直接反代到music.163.com</div><div class="line">        location / &#123;</div><div class="line">               proxy_pass http://balanced_backend;</div><div class="line">               proxy_next_upstream     error timeout invalid_header http_500;</div><div class="line">               proxy_connect_timeout   6s;</div><div class="line">               proxy_send_timeout       6s;</div><div class="line">               proxy_read_timeout       6s;</div><div class="line">               proxy_set_header Host $host;</div><div class="line">               proxy_set_header X-Real-IP $remote_addr;</div><div class="line">               proxy_set_header Accept-Encoding &quot;&quot;;</div><div class="line">               subs_filter_types *;</div><div class="line">               subs_filter &apos;&quot;st&quot;:-.+?,&apos; &apos;&quot;st&quot;:0,&apos; ir;</div><div class="line">               subs_filter &apos;&quot;pl&quot;:0&apos; &apos;&quot;pl&quot;:320000&apos;;</div><div class="line">               subs_filter &apos;&quot;dl&quot;:0&apos; &apos;&quot;dl&quot;:320000&apos;;</div><div class="line">               subs_filter &apos;&quot;sp&quot;:0&apos; &apos;&quot;sp&quot;:7&apos;;</div><div class="line">               subs_filter &apos;&quot;cp&quot;:0&apos; &apos;&quot;cp&quot;:1&apos;;</div><div class="line">               subs_filter &apos;&quot;subp&quot;:0&apos; &apos;&quot;subp&quot;:1&apos;;</div><div class="line">               subs_filter &apos;&quot;fl&quot;:0&apos; &apos;&quot;fl&quot;:320000&apos;;</div><div class="line">               subs_filter &apos;&quot;fee&quot;:.+?,&apos; &apos;&quot;fee&quot;:0,&apos; ir;</div><div class="line">      	       subs_filter &apos;&quot;abroad&quot;:1,&apos; &apos;&apos;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        #歌曲播放地址API</div><div class="line">        location /eapi/song/enhance/player/url &#123;</div><div class="line">               proxy_pass http://&lt;腾讯云IP&gt;:5001;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        #歌曲下载地址API</div><div class="line">        location /eapi/song/enhance/download/url &#123;</div><div class="line">               proxy_pass http://&lt;腾讯云IP&gt;:5001;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为了进一步提高python反代脚本的性能，增加gunicorn的进程数到16。当某个请求使得某个服务进程（或者说是worker）调用网易API而发生io阻塞时，整个进程都会被阻塞而无法接手下一个请求，因此理论上，这种网络io瓶颈型的服务，进程数越多越好。但是单个gunicorn进程内存占用大，经测试，在博主的1G内存腾讯云上，开50个gunicorn进程已接近极限，而性能甚至不如16个进程。<br>通过gunicorn运行反代服务的启动脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line">cd /root/163-music-unlock/server    #替换为本项目下的server目录</div><div class="line">/usr/local/bin/gunicorn -w 16 runapi:app -b 0.0.0.0:5001 --access-logfile /var/log/gunicorn.access.log --error-logfile /var/log/gunicorn.error.log --log-file /var/log/gunicorn.log</div></pre></td></tr></table></figure></p>
<h2 id="增加下载地址API反代"><a href="#增加下载地址API反代" class="headerlink" title="增加下载地址API反代"></a>增加下载地址API反代</h2><p>之前的版本中，python脚本只处理歌曲在线播放地址的API，所以下架歌曲或付费歌曲只能试听，无法下载。经过抓包发现，在线播放API和下载地址API只有细微的差异：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在线播放API，服务器返回格式：</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"code"</span> : <span class="number">200</span>,</div><div class="line">  <span class="string">"data"</span> : [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"id"</span> : <span class="number">123456</span>,</div><div class="line">      <span class="string">"url"</span>: <span class="string">"http://m1.music.net/music.mp3"</span>,</div><div class="line">      <span class="string">"br"</span> : <span class="number">64000</span>,</div><div class="line">      <span class="string">"size"</span>: <span class="number">12345</span>,</div><div class="line">      <span class="string">"md5"</span> : <span class="string">"11111111111111111111111111111111"</span>,</div><div class="line">      <span class="string">"code"</span>: <span class="number">200</span>,</div><div class="line">      <span class="string">"expi"</span>: <span class="number">1200</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"mp3"</span>,</div><div class="line">      <span class="string">"gain"</span>: <span class="number">0</span>,</div><div class="line">      <span class="string">"fee"</span>: <span class="number">0</span>,</div><div class="line">      <span class="string">"canExtend"</span>: False</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div><div class="line"><span class="comment">//下载地址API，服务器返回格式：</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"code"</span> : <span class="number">200</span>,</div><div class="line">  <span class="string">"data"</span> : &#123;</div><div class="line">    <span class="string">"id"</span> : <span class="number">123456</span>,</div><div class="line">    <span class="string">"url"</span>: <span class="string">"http://m1.music.net/music.mp3"</span>,</div><div class="line">    <span class="string">"br"</span> : <span class="number">64000</span>,</div><div class="line">    <span class="string">"size"</span>: <span class="number">12345</span>,</div><div class="line">    <span class="string">"md5"</span> : <span class="string">"11111111111111111111111111111111"</span>,</div><div class="line">    <span class="string">"code"</span>: <span class="number">200</span>,</div><div class="line">    <span class="string">"expi"</span>: <span class="number">1200</span>,</div><div class="line">    <span class="string">"type"</span>: <span class="string">"mp3"</span>,</div><div class="line">    <span class="string">"gain"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"fee"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"canExtend"</span>: False</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>python脚本只需要做稍微的调整就可以同时兼容下载地址API了。<br>经过测试，IOS和OSX客户端都可以下载付费音乐了。但是，安卓客户端在下载付费音乐时，虽然有下载速度，但是最后会报网络错误下载失败，怀疑是因为安卓客户端会校验下载文件的md5，而python反代脚本获取到的付费音乐信息不含文件md5（python脚本所调用的网易云音乐API不返回文件md5信息），直接给客户端返回<code>&quot;md5&quot;:null</code>所致。</p>
<h2 id="解决https反代的问题"><a href="#解决https反代的问题" class="headerlink" title="解决https反代的问题"></a>解决https反代的问题</h2><p>Issue中反映的无法查看其他用户资料和歌单的问题，经过抓包发现，是因为这部分API是https的，而服务器上只有http反代。博主尝试使用自签证书在nginx上实现https反代，但是IOS客户端不接受自签证书。虽然客户端可以通过PAC配置文件或者iptables，实现只将http请求转发到反代服务器，而https请求直接到网易云音乐服务器，但是在IOS或安卓上，这样的配置对于用户而言是十分繁琐的，因此还是在服务器上实现https反代。<br>通过在TCP层的转发，是可以实现免SSL证书反代https请求的。因此，在反代服务器上通过iptables实现443端口转发：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#先在/etc/sysctl.conf中设置net.ipv4.ip_forward=1</div><div class="line">iptables -t nat -A PREROUTING -p tcp --dport 443 -j DNAT --to-destination 223.252.199.7:443</div><div class="line">iptables -t nat -A POSTROUTING -j MASQUERADE</div></pre></td></tr></table></figure></p>
<p>其中，<code>223.252.199.7</code>即<code>music.163.com</code>指向的网易云音乐服务器IP。<br>另外，据github网友 <a href="https://github.com/Max-Sum" target="_blank" rel="external">Max-Sum</a> 在 <a href="https://github.com/Chion82/163-music-unlock/issues/11" target="_blank" rel="external">issue#11</a> 中提到，使用<code>SNI Proxy</code>可实现根据域名转发，即可在反代服务器443端口上架设多个https服务。<br>若使用SNI Proxy，配置文件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">user daemon</div><div class="line">pidfile /var/run/sniproxy.pid</div><div class="line"></div><div class="line">error_log &#123;</div><div class="line">    syslog daemon</div><div class="line">    priority notice</div><div class="line">&#125;</div><div class="line"></div><div class="line">listen &lt;YOUR_SERVER_IP&gt;:443 &#123;</div><div class="line">    proto tls</div><div class="line">    table https_hosts</div><div class="line"></div><div class="line">    access_log &#123;</div><div class="line">        filename /var/log/sniproxy/https_access.log</div><div class="line">        priority notice</div><div class="line">    &#125;</div><div class="line">    fallback 127.0.0.1:443</div><div class="line">&#125;</div><div class="line"></div><div class="line">table https_hosts &#123;</div><div class="line">    music.163.com 223.252.199.7:443</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="部分付费歌曲无法播放"><a href="#部分付费歌曲无法播放" class="headerlink" title="部分付费歌曲无法播放"></a>部分付费歌曲无法播放</h2><p>免费午餐不会永久。前段时间，网易已经封了一部分付费歌曲，python脚本目前使用的API<code>http://music.163.com/api/song/detail/</code>，一部分付费歌曲已经不返回文件信息了。博主发现，部分付费专辑／付费歌曲（无论是否包月会员都需要付费的音乐）已经无法获取到音乐文件信息，而大部分包月付费包中的音乐还可以获取到最低音质的音乐文件信息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天，博主去年开发的&lt;a href=&quot;https://github.com/Chion82/163-music-unlock&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;163-music-unlock&lt;/a&gt;（&lt;a href=&quot;https://blo
    
    </summary>
    
      <category term="开发笔记" scheme="http://blog.chionlab.moe/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="http://blog.chionlab.moe/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/Python/"/>
    
    
      <category term="hack" scheme="http://blog.chionlab.moe/tags/hack/"/>
    
      <category term="nginx" scheme="http://blog.chionlab.moe/tags/nginx/"/>
    
      <category term="maintenance" scheme="http://blog.chionlab.moe/tags/maintenance/"/>
    
      <category term="python" scheme="http://blog.chionlab.moe/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>WeChatMomentStat：微信朋友圈导出工具开发记录</title>
    <link href="http://blog.chionlab.moe/2016/03/31/WeChatMomentStat-update-log/"/>
    <id>http://blog.chionlab.moe/2016/03/31/WeChatMomentStat-update-log/</id>
    <published>2016-03-31T02:32:52.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GitHub-repo"><a href="#GitHub-repo" class="headerlink" title="GitHub repo"></a>GitHub repo</h2><p><a href="https://github.com/Chion82/WeChatMomentStat-Android" target="_blank" rel="external">https://github.com/Chion82/WeChatMomentStat-Android</a></p>
<h2 id="关于WeChatMomentStat-Android"><a href="#关于WeChatMomentStat-Android" class="headerlink" title="关于WeChatMomentStat-Android"></a>关于WeChatMomentStat-Android</h2><p>博主之前开发过<a href="https://github.com/Chion82/WeChatMomentExport" target="_blank" rel="external">WeChatMomentExport</a>，借助Xposed实现了导出微信朋友圈数据。该项目在GitHub上获得了不少Star，被应用平台收录之后也有几千的下载量，可见这个需求是存在的。但是，对于WeChatMomentExport，还存在以下问题：  </p>
<ul>
<li>作为Xposed模块，必需依赖Xposed才能运行  </li>
<li>因为数据抓取方式为hook，故用户需要在微信朋友圈页面手动下滑加载</li>
<li>微信版本每更新一次会导致源码被重新混淆，相应的本项目也需要更新钩子逻辑</li>
<li>项目的定位是将导出数据作为开发者二次开发所需的数据源，但从酷安网的用户评论看，普通用户不能理解需求</li>
</ul>
<p>对于上述问题，博主考虑了以下相应对策：</p>
<ul>
<li>从<a href="https://blog.chionlab.moe/2016/02/20/wechat-sns-reflect-classes/">上次的逆向分析结果</a>看，只要想办法调用到这几个类（以下称为parser），就可以解析微信SQLite缓存中的blob数据，这样就不需要借助Xposed的hook了，也能实现一键导出</li>
<li>考虑到blob格式不会经常变更，因此可在项目中整合parser，这样本项目就无需经常更新</li>
<li>博主在开发WeChatMomentExport之后随手写的<a href="https://github.com/Chion82/WeChatMomentStat" target="_blank" rel="external">朋友圈数据统计脚本</a>也获得了少量star，因此认为，对于普通用户，生成这样的简易统计数据更有吸引性</li>
</ul>
<p>于是，决定整合WeChatMomentExport和统计脚本，做一个功能稍完善的工具。</p>
<h2 id="几个技术难点"><a href="#几个技术难点" class="headerlink" title="几个技术难点"></a>几个技术难点</h2><p>要做这样的一个独立的APP，而不是一个Xposed模块，需要解决以下问题：</p>
<ol>
<li>如何在APP中整合parser？parser的逻辑代码被混淆在微信的dex中，直接分析其算法难度太大。</li>
<li>如何越权获得微信的SQLite缓存数据？</li>
<li>如何确保从SQLite缓存中取得的朋友圈数据足够齐全？</li>
</ol>
<p>经过查阅各种文档和亲自实验，还是找到了解决方案。</p>
<h2 id="使用DexClassLoader直接加载微信apk中的parser"><a href="#使用DexClassLoader直接加载微信apk中的parser" class="headerlink" title="使用DexClassLoader直接加载微信apk中的parser"></a>使用DexClassLoader直接加载微信apk中的parser</h2><p>DexClassLoader可直接解析apk中的classes.dex，并从中取得所需类，通过java反射，可以获得所需的parser方法。因此，无需再分析parser算法，而是直接调用就可以了。<br>通过DexClassLoader取得parser方法的关键代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DexClassLoader cl = <span class="keyword">new</span> DexClassLoader(</div><div class="line">                    apkFile.getAbsolutePath(),  <span class="comment">//apkFile为微信apk文件</span></div><div class="line">                    context.getDir(<span class="string">"outdex"</span>, <span class="number">0</span>).getAbsolutePath(),</div><div class="line">                    <span class="keyword">null</span>,</div><div class="line">                    ClassLoader.getSystemClassLoader());</div><div class="line"></div><div class="line">Class SnsDetailParser = cl.loadClass(<span class="string">"com.tencent.mm.plugin.sns.f.i"</span>);</div><div class="line">Class SnsDetail = cl.loadClass(<span class="string">"com.tencent.mm.protocal.b.atp"</span>);</div><div class="line">Class SnsObject = cl.loadClass(<span class="string">"com.tencent.mm.protocal.b.aqi"</span>);</div><div class="line"><span class="comment">//之后只需使用java反射即可取得所需方法</span></div></pre></td></tr></table></figure></p>
<p>还需要提供一个微信的apk文件。因此将微信apk放在assets中，首次运行本工具的时候释放到外部存储中。</p>
<h2 id="通过su调用，拷贝微信的SQLite数据库文件"><a href="#通过su调用，拷贝微信的SQLite数据库文件" class="headerlink" title="通过su调用，拷贝微信的SQLite数据库文件"></a>通过su调用，拷贝微信的SQLite数据库文件</h2><p>需要越权操作的话，获取root权限是很难避免的。通过调用su，可以复制出微信的SQLite数据库文件到本工具可读写的目录下。<br>微信朋友圈的SQLite文件在<code>/data/data/com.tencent.mm/MicroMsg/XXXXXXXXXXXXX/SnsMicroMsg.db</code>。其中，<code>XXXXXXXXXXXXX</code>是微信生成的hash值，每台设备上都可能不一样。由于在Android的shell中没有<code>find</code>或类似的命令，需要复制出这个<code>SnsMicroMsg.db</code>还得费一点功夫。最终，博主采用<code>ls</code>列目录并循环尝试<code>cp</code>的方法强行取得<code>SnsMicroMsg.db</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copySnsDB</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">    String dataDir = Environment.getDataDirectory().getAbsolutePath();</div><div class="line">    String destDir = Config.EXT_DIR;</div><div class="line">    Process su = Runtime.getRuntime().exec(<span class="string">"su"</span>);</div><div class="line">    DataOutputStream outputStream = <span class="keyword">new</span> DataOutputStream(su.getOutputStream());</div><div class="line">    outputStream.writeBytes(<span class="string">"mount -o remount,rw "</span> + dataDir + <span class="string">"\n"</span>);</div><div class="line">    outputStream.writeBytes(<span class="string">"cd "</span> + dataDir + <span class="string">"/data/"</span> + Config.WECHAT_PACKAGE + <span class="string">"/MicroMsg\n"</span>);</div><div class="line">    outputStream.writeBytes(<span class="string">"ls | while read line; do cp $&#123;line&#125;/SnsMicroMsg.db "</span> + destDir + <span class="string">"/ ; done \n"</span>);</div><div class="line">    outputStream.writeBytes(<span class="string">"sleep 1\n"</span>);</div><div class="line">    outputStream.writeBytes(<span class="string">"chmod 777 "</span> + destDir + <span class="string">"/SnsMicroMsg.db\n"</span>);</div><div class="line">    outputStream.writeBytes(<span class="string">"exit\n"</span>);</div><div class="line">    outputStream.flush();</div><div class="line">    outputStream.close();</div><div class="line">    Thread.sleep(<span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中，还需要修改db文件的权限为<code>777</code>，否则工具无权读取数据库。另外，<code>sleep</code>是为了避免稍后偶然性出现的读取数据库失败的情况（可能文件复制不完整或未被去锁？）。</p>
<h2 id="关于SQLite中数据完整性的问题"><a href="#关于SQLite中数据完整性的问题" class="headerlink" title="关于SQLite中数据完整性的问题"></a>关于SQLite中数据完整性的问题</h2><p>经过测试，微信的SQLite数据库中缓存了几乎所有加载过的朋友圈，理论上应当不会漏数据。</p>
<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>本来这个app计划于2月中旬就写出来的，由于博主不是安卓开发者，没有系统地学过安卓开发，当时还不知道有<code>DexClassLoader</code>，写的第一个demo用的依然是Xposed，但是不同于WeChatMomentExport，这里用Xposed仅仅是为了取得那几个parser的类而已。2月底开学后，通过各种渠道了解到了<code>DexClassLoader</code>，才有现在的这个思路。<br>博主现在读大二，这学期开学后课程比较紧张，再者在工作室外包项目的压力下（团队管理问题，还有涉及的利益问题出现冲突的时候，处理起来非常棘手），一时失去了搞开源轮子的动力，甚至连续一个月都没有更新博客，于是才导致了这个项目拖到现在才基本完成。<br>看到了GitHub上的项目star和follower每隔几天就多一个，本站也陆续有网友来评论，每日UV也保持在100以上，就重拾了动力去继续折腾。<br>非常感谢前来光临本站和GitHub profile的各位！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;GitHub-repo&quot;&gt;&lt;a href=&quot;#GitHub-repo&quot; class=&quot;headerlink&quot; title=&quot;GitHub repo&quot;&gt;&lt;/a&gt;GitHub repo&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Chion8
    
    </summary>
    
      <category term="开发笔记" scheme="http://blog.chionlab.moe/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
      <category term="安卓" scheme="http://blog.chionlab.moe/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%AE%89%E5%8D%93/"/>
    
    
      <category term="android" scheme="http://blog.chionlab.moe/tags/android/"/>
    
      <category term="wechat" scheme="http://blog.chionlab.moe/tags/wechat/"/>
    
      <category term="hack" scheme="http://blog.chionlab.moe/tags/hack/"/>
    
  </entry>
  
  <entry>
    <title>自译：如何使用服务端渲染加速React APP首屏加载</title>
    <link href="http://blog.chionlab.moe/2016/03/03/react-server-side-rendering/"/>
    <id>http://blog.chionlab.moe/2016/03/03/react-server-side-rendering/</id>
    <published>2016-03-03T12:11:17.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://www.terlici.com/2015/03/18/fast-react-loading-server-rendering.html" target="_blank" rel="external">How to build React apps that load quickly using server side rendering (by Stefan Fidanov)</a></p>
<p>使用客户端框架（译者注：此处指大多数在浏览器端运行的前端MV*框架）可快速开发用户交互丰富、性能高效的web app，前端开发者都非常喜欢使用该类框架。<br>不幸的是，客户端框架也有缺点，其中最主要的问题是首屏加载速度。<br>客户端首先从服务器接收少量的HTML代码，但是之后却需要接收大量的JavaScript代码。<br>然后，它们（指前端框架）需要向服务器请求数据，等待收到数据，进行必要的数据处理，并最终渲染到用户的浏览器上。<br>相比之下，传统的web做法是，全部数据由服务端进行渲染，当服务端向用户首次递交HTML时，用户端浏览器就收到了渲染完成的页面了。<br>再者，大多数情况下，web服务器的渲染速度要快于客户端的渲染。所以，（传统web）的首屏渲染是非常快速的。</p>
<h2 id="React的解决方案"><a href="#React的解决方案" class="headerlink" title="React的解决方案"></a>React的解决方案</h2><p>很自然的，你会想同时拥有上述两者（分别指：使用了MV*框架的web app、传统的web站点）的全部优点。快速的首屏加载、高度的交互性和快速的响应。React可以帮助你同时做到这几点。<br>React是这样做到的：首先，它可以在服务端渲染任意的组件（Component），包括这些组件的数据，这样渲染得到的结果是一些HTML代码，这些HTML代码在这之后可以直接发送到浏览器。<br>当这些HTML在用户浏览器上被显示出来时，React会在本地（这里的本地指用户浏览器）进行计算。它的智能算法将进行判断并得出：React即将要在浏览器端动态渲染出来的结果，跟当前已经被显示出来的页面一样。<br>在这之后，除了添加必要的事件处理，React不会对页面做任何的修改。<br>那么为什么这样会更快呢？我们不是在做几乎跟客户端一样的事情吗？<br>是的。但仅仅是“几乎”而已。<br>首先，当服务器响应浏览器请求时，用户马上就能看到整个页面了。所以页面响应速度更快了。<br>其次，因为React能够判断出无需再对DOM做修改，它就不会再去碰DOM。修改DOM是前端渲染中最慢的部分。<br>再者，这样可以节省请求次数。因为所有数据已经被渲染所以React不需要再向服务器请求。</p>
<p><strong>那么有没有可能：当页面加载时，页面已经显示出来但是用户不能对其进行交互，因为这时事件处理尚未被添加？</strong><br>理论上这种情况是有可能发生的。但是因为用了服务端渲染，我们就避免了所有的高开销操作，而且这样不但加速了页面响应速度，添加事件处理的速度也会变得很快。<br>所以，你的应用将总是可交互的，并且用户不会察觉到有什么问题。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>光说无用，我们来看看如何在代码中实现。我们的第一个示例是非常简单的。我们要显示一个”hello”消息，并且点击后会有提示。<br>我们的示例将使用NodeJS作为服务端部分，不过这里的一切都可以应用在其他平台，比如PHP, Ruby, Python, Java或者.NET。</p>
<p>我们需要以下Node模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install babel react react-dom express jade</div></pre></td></tr></table></figure></p>
<p>我们将使用<code>express</code>和<code>jade</code>来做一个示例服务器。<br><code>react</code>和<code>react-dom</code>包可提供React组件的服务端渲染。<br><code>babel</code>包允许我们通过node直接加载JSX模块，比如<code>require(&#39;some-component.jsx&#39;)</code>或者<code>require(&#39;some-component.js&#39;)</code>。<br><code>babel</code>实际上更加强大。现在你可以用ES6支持。<br>我们的应用只有3个文件，文件结构如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public/components.js</div><div class="line">views/index.jade</div><div class="line">app.js</div></pre></td></tr></table></figure></p>
<p><code>components.js</code>包含了我们的React组件；<code>index.jade</code>是网站的基本模板文件，将会加载全部JavaScript；<code>app.js</code>是node服务器。<br>让我们来看看<code>index.jade</code>里面有什么内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">doctype</div><div class="line">html</div><div class="line">  head</div><div class="line">    title React Server Side Rendering Example</div><div class="line">  body</div><div class="line">    div(id='react-root')!= react</div><div class="line"></div><div class="line">    script(src='https://fb.me/react-0.14.0.js')</div><div class="line">    script(src='https://fb.me/react-dom-0.14.0.js')</div><div class="line">    script(src='https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js')</div><div class="line"></div><div class="line">    script(src='/components.js', type='text/babel')</div></pre></td></tr></table></figure></p>
<p><code>div(id=&#39;react-root&#39;)!= react</code>是最关键的部分。它的作用是作为React根组件的容器。另外，<code>react</code>变量的值是服务端渲染React组件后得到的HTML。<br>前两个引用进来的JavaScript文件是React本身，如果你想要在组件里面使用JSX，还需要引用一个Babel。<br>最后一个引用的文件是具体的组件。我们要把type设成<code>text/babel</code>好让Babel来处理这个文件。<br>这将提供一个基本的HTML结构，并加载全部的JavaScript和你需要的React组件。<br>来看看这个简单的服务器：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'babel/register'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line">  , app = express()</div><div class="line">  , React = <span class="built_in">require</span>(<span class="string">'react'</span>)</div><div class="line">  , ReactDOM = <span class="built_in">require</span>(<span class="string">'react-dom/server'</span>)</div><div class="line">  , components = <span class="built_in">require</span>(<span class="string">'./public/components.js'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> HelloMessage = React.createFactory(components.HelloMessage)</div><div class="line"></div><div class="line"></div><div class="line">app.engine(<span class="string">'jade'</span>, <span class="built_in">require</span>(<span class="string">'jade'</span>).__express)</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'jade'</span>)</div><div class="line"></div><div class="line">app.use(express.static(__dirname + <span class="string">'/public'</span>))</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  res.render(<span class="string">'index'</span>, &#123;</div><div class="line">    react: ReactDOM.renderToString(HelloMessage(&#123;name: <span class="string">"John"</span>&#125;))</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Listening on port 3000...'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>这部分代码中，大部分和一个普通的express应用程序没有多大区别。但是其中有些行需要注意。<br>第一行：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'babel/register'</span>)</div></pre></td></tr></table></figure></p>
<p>加载Babel到你的依赖。这么做，你可以直接导入(<code>require()</code>)由JSX组成的React组件，它们会被自动翻译为JavaScript，就像后面的两行：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> components = <span class="built_in">require</span>(<span class="string">'./public/components.js'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> HelloMessage = React.createFactory(components.HelloMessage)</div></pre></td></tr></table></figure></p>
<p>在上面的代码中，第一行导入JSX编写的React组件。然后，由<code>React.createFactory</code>生成一个函数，该函数可以创建<code>HelloMessage</code>的组件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  res.render(<span class="string">'index'</span>, &#123;</div><div class="line">    react: ReactDOM.renderToString(HelloMessage(&#123;name: <span class="string">"John"</span>&#125;))</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>上面这里就是渲染React组件的代码，并且渲染包含该组件的页面然后发送至浏览器。<br>首先，使用值为<code>John</code>的<code>name</code>属性创建一个新的<code>HelloMessage</code>组件，然后使用<code>React.renderToString</code>将这个组件渲染为HTML。<br>这里需要注意的是，组件仅仅被渲染(rendered)，而没有被挂载(mounted)，所以 <strong>所有关于挂载的方法都不会被调用</strong> 。<br>在创建组件之后，将组件的HTML传递到index模版。<br>我们的组件看起来是这样的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isNode = <span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">module</span>.exports</div><div class="line">  , React = isNode ? <span class="built_in">require</span>(<span class="string">'react'</span>) : <span class="built_in">window</span>.React</div><div class="line">  , ReactDOM = isNode ? <span class="built_in">require</span>(<span class="string">'react'</span>) : <span class="built_in">window</span>.ReactDOM</div><div class="line"></div><div class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;</div><div class="line">  handleClick: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">'You clicked!'</span>)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">if</span> (isNode) &#123;</div><div class="line">  exports.HelloMessage = HelloMessage</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"John"</span> /&gt;</span>, document.getElementById('react-root'))</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你可以看见，这跟一般的由JSX编写的React组件没有什么不同，除了开头和结尾。这里就是你要让组件能同时在浏览器和Node端运行所需要注意的地方。</p>
<h2 id="高级示例：加载服务端数据"><a href="#高级示例：加载服务端数据" class="headerlink" title="高级示例：加载服务端数据"></a>高级示例：加载服务端数据</h2><p>真正的Web app做的事情通常远不止你看见的这些。它们经常需要跟服务器交互并从服务器加载数据。<br>但是，我们不希望这在服务端渲染时发生。<br>我们来对这个示例程序做一些小修改。首先，模版文件需要引用jQuery，在这里它的唯一作用是从服务端请求数据。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">doctype</div><div class="line">html</div><div class="line">  head</div><div class="line">    title React Server Side Rendering Example</div><div class="line">  body</div><div class="line">    div(id='react-root')!= react</div><div class="line"></div><div class="line">    script(src='https://fb.me/react-0.14.0.js')</div><div class="line">    script(src='https://fb.me/react-dom-0.14.0.js')</div><div class="line">    script(src='https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js')</div><div class="line">    script(src='http://code.jquery.com/jquery-2.1.3.js')</div><div class="line"></div><div class="line">    script(src='/components.js', type='text/babel')</div></pre></td></tr></table></figure></p>
<p>我们的服务器现在需要增加一个请求路由。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'babel/register'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line">  , app = express()</div><div class="line">  , React = <span class="built_in">require</span>(<span class="string">'react'</span>)</div><div class="line">  , ReactDOM = <span class="built_in">require</span>(<span class="string">'react-dom/server'</span>)</div><div class="line">  , components = <span class="built_in">require</span>(<span class="string">'./public/components.js'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> HelloMessage = React.createFactory(components.HelloMessage)</div><div class="line"></div><div class="line"></div><div class="line">app.engine(<span class="string">'jade'</span>, <span class="built_in">require</span>(<span class="string">'jade'</span>).__express)</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'jade'</span>)</div><div class="line"></div><div class="line">app.use(express.static(__dirname + <span class="string">'/public'</span>))</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  res.render(<span class="string">'index'</span>, &#123;</div><div class="line">    react: React.renderToString(HelloMessage(&#123;name: <span class="string">"John"</span>&#125;))</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.get(<span class="string">'/name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  res.send(<span class="string">"Paul, "</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toString())</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Listening on port 3000...'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>这里跟之前的例子唯一的不同之处在于这三行：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  res.send(<span class="string">"Paul, "</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toString())</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>这三行代码的作用是，当<code>/name</code>被请求时，返回名字<code>Paul</code>和当前时间。<br>来看看这整个应用最有趣和最重要的部分，即React组件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isNode = <span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">module</span>.exports</div><div class="line">  , React = isNode ? <span class="built_in">require</span>(<span class="string">'react'</span>) : <span class="built_in">window</span>.React</div><div class="line">  , ReactDOM = isNode ? <span class="built_in">require</span>(<span class="string">'react-dom'</span>) : <span class="built_in">window</span>.ReactDOM</div><div class="line"></div><div class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;</div><div class="line">  getInitialState: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;&#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  loadServerData: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $.get(<span class="string">'/name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.isMounted()) &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;name: result&#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;.bind(<span class="keyword">this</span>))</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  componentDidMount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.intervalID = setInterval(<span class="keyword">this</span>.loadServerData, <span class="number">3000</span>)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    clearInterval(<span class="keyword">this</span>.intervalID)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  handleClick: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">'You clicked!'</span>)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="keyword">this</span>.state.name ? <span class="keyword">this</span>.state.name : <span class="keyword">this</span>.props.name</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Hello &#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">if</span> (isNode) &#123;</div><div class="line">  exports.HelloMessage = HelloMessage</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"John"</span> /&gt;</span>, document.getElementById('react-root'))</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们只添加了这4个方法，其他和之前的例子相同：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">getInitialState: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;&#125;</div><div class="line">&#125;,</div><div class="line"></div><div class="line">loadServerData: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $.get(<span class="string">'/name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isMounted()) &#123;</div><div class="line">      <span class="keyword">this</span>.setState(&#123;name: result&#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;.bind(<span class="keyword">this</span>))</div><div class="line">&#125;,</div><div class="line"></div><div class="line">componentDidMount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.intervalID = setInterval(<span class="keyword">this</span>.loadServerData, <span class="number">3000</span>)</div><div class="line">&#125;,</div><div class="line"></div><div class="line">componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  clearInterval(<span class="keyword">this</span>.intervalID)</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>当组件被挂载后，每隔3秒它会向服务器请求数据<code>/name</code>并且显示出来。<br><code>componentDidMount</code>和<code>componentWillUnmount</code>在组件被渲染时是不会被调用的，它们只有在组件被挂载时才会被调用。<br>所以这两个方法在服务端渲染时不会被调用，<code>loadServerData</code>方法也不会被调用。<br>这三个方法只有当组件被挂载时才会被执行，而这只会发生在浏览器端。<br>由此可见，想要从整体中分离出只在浏览器运行的那部分，并且保持代码的复用是很简单的。</p>
<h2 id="在这之后？"><a href="#在这之后？" class="headerlink" title="在这之后？"></a>在这之后？</h2><p>你已经学会了如何借助服务端渲染创建一个能被快速加载的React应用程序。但是，我的这个示例只是针对NodeJS服务器。<br>如果你在使用其他技术（比如PHP, .NET, Ruby, Python或者Java），你一样可以利用React服务端渲染的优点，这将会是你下一步要研究的方向。<br>另外，我直接在浏览器端使用了JSX，这将多亏于Babel，但是这也会降低性能。在生产环境中，在将JSX提供给浏览器之前先将之转换为JavaScript会更快。<br>我相信你一定可以找到你最喜欢的开发语言和Web框架下的类似解决方案。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;https://www.terlici.com/2015/03/18/fast-react-loading-server-rendering.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to build Reac
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="front-end" scheme="http://blog.chionlab.moe/tags/front-end/"/>
    
      <category term="React" scheme="http://blog.chionlab.moe/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>你好，老司机：种子爬虫企划</title>
    <link href="http://blog.chionlab.moe/2016/02/28/hello-old-driver/"/>
    <id>http://blog.chionlab.moe/2016/02/28/hello-old-driver/</id>
    <published>2016-02-28T05:14:53.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>在老司机的安利之下，学会了从<a href="http://www.hacg.li" target="_blank" rel="external">琉璃神社</a>找各种神奇的资源。于是萌生了造这个轮子的欲望。国内这种福利站不知还能维持多久，所以将资源大量扒下来存档是有点卵用的。</p>
<h2 id="GitHub-repo"><a href="#GitHub-repo" class="headerlink" title="GitHub repo"></a>GitHub repo</h2><p><a href="https://github.com/Chion82/hello-old-driver" target="_blank" rel="external">https://github.com/Chion82/hello-old-driver</a></p>
<h2 id="开发笔记"><a href="#开发笔记" class="headerlink" title="开发笔记"></a>开发笔记</h2><p>为了兼容多个站点，我的爬虫脚本并没有针对某个特定的网站进行抓取逻辑定制，而是采取递归遍历网站全部页面+正则匹配磁力链hash的方式抓取整站的磁力链资源。磁力链的hash协议大多数时候是BTIH，hash值为40位的hex字符串，匹配的正则如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[^0-9a-fA-F]([0-9a-fA-F]&#123;40&#125;)[^0-9a-fA-F]</div></pre></td></tr></table></figure></p>
<p>注意，为了保证hash串长度为40字节，在其前后应加上非hex的匹配，即<code>[^0-9a-fA-F]</code>。</p>
<p>这样将可能导致一个问题，网站页面源码中可能还存在磁力链以外的SHA-1值，比如琉璃神社在每条用户评论后在一个标签属性内有40字节长的一段hash值，目前的解决方法是忽略HTML标签<code>&lt;&gt;</code>内的属性内容：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (ignore_html_label): <span class="comment">#为了增强扩展性，这类fix逻辑应该可控</span></div><div class="line">		result_text = re.sub(<span class="string">r'&lt;.*?&gt;'</span>, <span class="string">''</span>, result_text)</div></pre></td></tr></table></figure></p>
<p>每个磁力链资源应当要有对应的标题以方便查找，这里以网页的标题作为资源标题，匹配正则如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;title&gt;(.+?)&lt;/title&gt;</div></pre></td></tr></table></figure></p>
<p>经测试发现，每轮抓取结束后，抓取到的资源数量可能不一样，可能的原因是网站方对访问频次做了限制或者是本地网络质量问题，就算通过连接失败重试、服务器返回5XX后重试等方法也不能解决。于是决定：每次抓取不覆盖上次抓取的结果，而是保留上次的结果，并新增本次抓取到的、上次结果中没有的新磁力链资源。</p>
<p>其他的一些必需属性：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cookie = <span class="string">''</span> <span class="comment">#每次请求需要带上的Cookie。由于琉璃神社目前不需要登录，暂为空串</span></div><div class="line">max_depth = <span class="number">40</span> <span class="comment">#递归最大深度，即从一个网页查找全部链接并依次往下递归访问，最大的深度为40</span></div><div class="line">viewed_urls = [] <span class="comment">#访问过的URL，避免重复访问</span></div><div class="line">found_magnets = [] <span class="comment">#查找出来的磁力链资源，避免重复抓取</span></div><div class="line">ignore_url_param = <span class="keyword">True</span> <span class="comment">#是否忽略URL中的参数，比如"index.html?xxx=11"将被替换为"index.html"</span></div><div class="line">ignore_html_label = <span class="keyword">True</span> <span class="comment">#是否忽略HTML标签内属性</span></div></pre></td></tr></table></figure></p>
<p>需要定时执行抓取脚本以保证与原网站同步。写了一个shell脚本，<code>sync.sh</code>，作用如下：</p>
<ul>
<li>测试目标网站是否可访问</li>
<li>复制上次的抓取结果<code>magnet_output</code>和<code>resource_list.json</code>到<code>archives</code>目录下存档，以当前时间重命名</li>
<li>复制上次的抓取日志<code>lastsync.log</code>和<code>lasterror.log</code>到<code>log</code>目录下存档，以当前时间重命名</li>
<li>运行Python抓取脚本，这将覆盖项目根目录下的上述抓取结果文件和抓取日志文件</li>
<li>将本次的抓取结果梗概（是否成功、新增几条记录以及一些简单统计数据）添加到<code>README.md</code>中</li>
<li>推送到GitHub</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在老司机的安利之下，学会了从&lt;a href=&quot;http://www.hacg.li&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;琉璃神社&lt;/a&gt;找各种神奇的资源。于是萌生了造这个轮子的欲望。国内这种福利站不知还能维持多久，所以将资源大量扒下来存档是有点卵
    
    </summary>
    
      <category term="开发笔记" scheme="http://blog.chionlab.moe/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="http://blog.chionlab.moe/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/Python/"/>
    
    
      <category term="python" scheme="http://blog.chionlab.moe/tags/python/"/>
    
      <category term="crawler" scheme="http://blog.chionlab.moe/tags/crawler/"/>
    
  </entry>
  
  <entry>
    <title>逆向纪录：微信朋友圈相关的几个类</title>
    <link href="http://blog.chionlab.moe/2016/02/20/wechat-sns-reflect-classes/"/>
    <id>http://blog.chionlab.moe/2016/02/20/wechat-sns-reflect-classes/</id>
    <published>2016-02-19T16:16:42.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>本纪录针对微信安卓端版本<code>6.3.13</code>。本文纪录逆向微信过程中找到的几个朋友圈内容相关的数据结构类。</p>
<ol>
<li><p>朋友圈详细内容<br>类名: <code>com.tencent.mm.protocal.b.atp</code><br>[方法]添加属性（可作为hook的方法）: <code>protected final int a(int paramInt, object... objectArray)</code><br>[方法]从BLOB数据导入：<code>public a am(byte[])</code></p>
</li>
<li><p>可将<code>com.tencent.mm.protocal.b.atp</code>实例格式化为XML的类<br>类名: <code>com.tencent.mm.plugin.sns.f.i</code><br>[方法]输出朋友圈内容XML: <code>static public String a(com.tencent.mm.protocal.b.atp atpObject)</code></p>
</li>
<li><p>朋友圈评论和点赞数据<br>类名: <code>com.tencent.mm.protocal.b.aqi</code><br>[方法]添加属性（可作为hook的方法）: <code>protected final int a(int paramInt, object... objectArray)</code><br>[方法]从BLOB数据导入：<code>public a am(byte[])</code><br>[属性]用户ID：<code>String iYA</code><br>[属性]用户昵称：<code>String jyd</code><br>[属性]时间戳：<code>long fpL</code><br>[属性]评论列表：<code>LinkedList&lt;com.tencent.mm.protocal.b.apz&gt; jJX</code><br>[属性]点赞列表：<code>LinkedList&lt;com.tencent.mm.protocal.b.apz&gt; jJU</code></p>
</li>
<li><p>评论或点赞数据详情<br>类名: <code>com.tencent.mm.protocal.b.apz</code><br>[属性]用户ID： <code>String iYA</code><br>[属性]用户昵称：<code>String jyd</code><br>[属性]评论回复给谁(对方用户ID)：<code>String jJM</code><br>[属性]评论内容：<code>String fsI</code></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本纪录针对微信安卓端版本&lt;code&gt;6.3.13&lt;/code&gt;。本文纪录逆向微信过程中找到的几个朋友圈内容相关的数据结构类。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;朋友圈详细内容&lt;br&gt;类名: &lt;code&gt;com.tencent.mm.protocal.b.atp&lt;/code&gt;&lt;
    
    </summary>
    
      <category term="逆向" scheme="http://blog.chionlab.moe/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="android" scheme="http://blog.chionlab.moe/tags/android/"/>
    
      <category term="wechat" scheme="http://blog.chionlab.moe/tags/wechat/"/>
    
      <category term="hack" scheme="http://blog.chionlab.moe/tags/hack/"/>
    
  </entry>
  
  <entry>
    <title>使用nginx image filter动态生成缩略图</title>
    <link href="http://blog.chionlab.moe/2016/02/02/generate-thumbnails-with-nginx-image-filter/"/>
    <id>http://blog.chionlab.moe/2016/02/02/generate-thumbnails-with-nginx-image-filter/</id>
    <published>2016-02-01T17:05:24.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>nginx提供<code>ngx_http_image_filter_module</code>模块，可用来动态生成图片的缩略图。当然，最好的办法是在后端进行图片压缩。但是当不方便修改后端代码时，在牺牲些许性能的代价下，使用image filter生成缩略图还是很方便的。</p>
<h2 id="编译安装nginx"><a href="#编译安装nginx" class="headerlink" title="编译安装nginx"></a>编译安装nginx</h2><p>大部分预编译的nginx默认不带<code>ngx_http_image_filter_module</code>模块，这时需要手动编译nginx。<br>在执行<code>configure</code>时带上参数<code>--with-http_image_filter_module</code>。<br>在水果上编译可参考<a href="/2016/02/02/compile-nginx-on-osx/">OSX上编译安装nginx</a></p>
<h2 id="在配置文件中使用image-filter生成缩略图"><a href="#在配置文件中使用image-filter生成缩略图" class="headerlink" title="在配置文件中使用image_filter生成缩略图"></a>在配置文件中使用image_filter生成缩略图</h2><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">location /images &#123;</div><div class="line">    image_filter resize 200 200;</div><div class="line">    image_filter_buffer 10M;</div><div class="line">    image_filter_jpeg_quality 90;</div><div class="line">    root /path/to/website;</div><div class="line">    index index.html;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中：</p>
<ul>
<li><code>image_filter resize 200 200</code>表示按比例缩放图片，长和宽中较大者为200。比如，原图大小为1000x500，处理后为200x100。</li>
<li><code>image_filter_buffer 10M</code>表示处理图片的缓冲区最大为10M。</li>
<li><code>image_filter_jpeg_quality 90</code>设置jpeg压缩质量为90%。</li>
</ul>
<p>经过这样的配置后，访问<code>HOSTNAME/images/XXX.jpg|png|gif</code>即可得到经过压缩的缩略图。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx提供&lt;code&gt;ngx_http_image_filter_module&lt;/code&gt;模块，可用来动态生成图片的缩略图。当然，最好的办法是在后端进行图片压缩。但是当不方便修改后端代码时，在牺牲些许性能的代价下，使用image filter生成缩略图还是很方便的。&lt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="后端" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="nginx" scheme="http://blog.chionlab.moe/tags/nginx/"/>
    
      <category term="backend" scheme="http://blog.chionlab.moe/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>在OSX上编译安装nginx</title>
    <link href="http://blog.chionlab.moe/2016/02/02/compile-nginx-on-osx/"/>
    <id>http://blog.chionlab.moe/2016/02/02/compile-nginx-on-osx/</id>
    <published>2016-02-01T16:31:21.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>在OSX上，一般情况下，使用<code>brew</code>安装nginx，再链接一个plist到<code>/Library/LaunchDaemons</code>即可。但是有时候brew中的nginx缺少某些模块，比如上文提到的<code>ngx_http_image_filter_module</code>，这时就需要重新编译nginx。<br>更正：homebrew中提供<code>nginx-full</code>包，包含了常用的绝大多数模块。当然如果需要添加第三方模块还是需要手动编译。</p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ brew install pcre</div><div class="line">$ brew install gd #image filter依赖gd</div><div class="line">$ brew link --force openssl #避免编译openssl时报错</div></pre></td></tr></table></figure>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>下面的示例中，添加以下几个模块：</p>
<ul>
<li>http_image_filter_module</li>
<li>http_ssl_module</li>
<li>http_gzip_static_module</li>
<li>http_sub_module<br>并且其他配置和homebrew的nginx大致相同（带版本号的路径除外）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#cd到nginx源码目录</div><div class="line">$ ./configure --with-http_image_filter_module --with-http_ssl_module --with-http_gzip_static_module --with-http_sub_module \</div><div class="line">--prefix=/usr/local/Cellar/nginx/1.9.10 \</div><div class="line">--with-cc-opt=&quot;-I /usr/local/include&quot; --with-ld-opt=&quot;-L /usr/local/lib&quot; \</div><div class="line">--sbin-path=/usr/local/Cellar/nginx/1.9.10/bin/nginx \</div><div class="line">--conf-path=/usr/local/etc/nginx/nginx.conf \</div><div class="line">--pid-path=/usr/local/var/run/nginx.pid \</div><div class="line">--http-log-path=/usr/local/var/log/nginx/access.log \</div><div class="line">--error-log-path=/usr/local/var/log/nginx/error.log --with-pcre --with-ipv6 \</div><div class="line">--lock-path=/usr/local/var/run/nginx.lock \</div><div class="line">--http-client-body-temp-path=/usr/local/var/run/nginx/client_body_temp \</div><div class="line">--http-proxy-temp-path=/usr/local/var/run/nginx/proxy_temp \</div><div class="line">--http-fastcgi-temp-path=/usr/local/var/run/nginx/fastcgi_temp \</div><div class="line">--http-uwsgi-temp-path=/usr/local/var/run/nginx/uwsgi_temp \</div><div class="line">--http-scgi-temp-path=/usr/local/var/run/nginx/scgi_temp</div><div class="line">$ make</div></pre></td></tr></table></figure>
</li>
</ul>
<p>其中，<code>--with-cc-opt=&quot;-I /usr/local/include&quot; --with-ld-opt=&quot;-L /usr/local/lib&quot;</code>可避免报<code>Undefined symbols for architecture x86_64</code>错误。<code>/usr/local/Cellar/nginx/1.9.10</code>这里的<code>1.9.10</code>替换为将要编译的nginx版本号。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>如果之前未安装过nginx，运行这条命令来安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make install</div></pre></td></tr></table></figure></p>
<p>如果已使用brew安装nginx，可以通过替换文件的方式换成刚才编译的版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#备份原来的binary</div><div class="line">$ cp /usr/local/opt/nginx/bin/nginx /usr/local/opt/nginx/bin/nginx.bak</div><div class="line">#先cd到nginx源码目录</div><div class="line">$ sudo cp objs/nginx /usr/local/opt/nginx/bin/nginx</div><div class="line">$ rm /usr/local/bin/nginx</div><div class="line">$ ln -s /usr/local/opt/nginx/bin/nginx /usr/local/bin/nginx</div></pre></td></tr></table></figure></p>
<p>现在，可以查看nginx版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nginx -V</div></pre></td></tr></table></figure></p>
<p>强迫症患者可以像我这样在<code>Cellar</code>中建立一个新的版本目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ cp -r /usr/local/Cellar/nginx/1.8.0 /usr/local/Cellar/nginx/1.9.10</div><div class="line">#恢复1.8.0中的binary</div><div class="line">$ rm /usr/local/Cellar/nginx/1.8.0/bin/nginx</div><div class="line">$ mv /usr/local/Cellar/nginx/1.8.0/bin/nginx.bak /usr/local/Cellar/nginx/1.8.0/bin/nginx</div><div class="line">#更新/usr/local/opt/nginx</div><div class="line">$ rm /usr/local/opt/nginx</div><div class="line">$ ln -s /usr/local/Cellar/nginx/1.9.10 /usr/local/opt/nginx</div></pre></td></tr></table></figure></p>
<h2 id="将nginx加入LaunchDaemons"><a href="#将nginx加入LaunchDaemons" class="headerlink" title="将nginx加入LaunchDaemons"></a>将nginx加入LaunchDaemons</h2><p>编辑<code>/Library/LaunchDaemons/homebrew.mxcl.nginx.plist</code>内容如下：（brew的nginx自带的版本）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</div><div class="line">&lt;plist version=&quot;1.0&quot;&gt;</div><div class="line">  &lt;dict&gt;</div><div class="line">    &lt;key&gt;Label&lt;/key&gt;</div><div class="line">    &lt;string&gt;homebrew.mxcl.nginx&lt;/string&gt;</div><div class="line">    &lt;key&gt;RunAtLoad&lt;/key&gt;</div><div class="line">    &lt;true/&gt;</div><div class="line">    &lt;key&gt;KeepAlive&lt;/key&gt;</div><div class="line">    &lt;false/&gt;</div><div class="line">    &lt;key&gt;ProgramArguments&lt;/key&gt;</div><div class="line">    &lt;array&gt;</div><div class="line">        &lt;string&gt;/usr/local/opt/nginx/bin/nginx&lt;/string&gt;</div><div class="line">        &lt;string&gt;-g&lt;/string&gt;</div><div class="line">        &lt;string&gt;daemon off;&lt;/string&gt;</div><div class="line">    &lt;/array&gt;</div><div class="line">    &lt;key&gt;WorkingDirectory&lt;/key&gt;</div><div class="line">    &lt;string&gt;/usr/local&lt;/string&gt;</div><div class="line">  &lt;/dict&gt;</div><div class="line">&lt;/plist&gt;</div></pre></td></tr></table></figure></p>
<p>然后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ launchctl load -F /Library/LaunchDaemons/homebrew.mxcl.nginx.plist</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在OSX上，一般情况下，使用&lt;code&gt;brew&lt;/code&gt;安装nginx，再链接一个plist到&lt;code&gt;/Library/LaunchDaemons&lt;/code&gt;即可。但是有时候brew中的nginx缺少某些模块，比如上文提到的&lt;code&gt;ngx_http_imag
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="OSX" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OSX/"/>
    
    
      <category term="nginx" scheme="http://blog.chionlab.moe/tags/nginx/"/>
    
      <category term="OSX" scheme="http://blog.chionlab.moe/tags/OSX/"/>
    
      <category term="backend" scheme="http://blog.chionlab.moe/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>OSX上pf的简单配置笔记</title>
    <link href="http://blog.chionlab.moe/2016/02/01/use-pf-on-osx/"/>
    <id>http://blog.chionlab.moe/2016/02/01/use-pf-on-osx/</id>
    <published>2016-01-31T17:16:55.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>水果的OSX上没有iptables，在10.10以后以pf取代ipfw。相比于iptables，pf一般使用配置文件保存防火墙规则，语法规范上更严谨，但是配置也更复杂、规则冗长。本文记录pf的简单配置方法。</p>
<p><code>cat /etc/pf.conf</code>，可看到以下已有内容：（忽略注释部分）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">scrub-anchor &quot;com.apple/*&quot;</div><div class="line">nat-anchor &quot;com.apple/*&quot;</div><div class="line">rdr-anchor &quot;com.apple/*&quot;</div><div class="line">dummynet-anchor &quot;com.apple/*&quot;</div><div class="line">anchor &quot;com.apple/*&quot;</div><div class="line">load anchor &quot;com.apple&quot; from &quot;/etc/pf.anchors/com.apple&quot;</div></pre></td></tr></table></figure></p>
<p><code>anchor</code>可理解为一组规则的集合。默认情况下，这里的几行anchor都是苹果留的place holder，实际上没有active的规则。<br><code>/etc/pf.conf</code>在以后的OSX更新中可能会被覆盖，最好可以另外建立一个自定义的<code>pf.conf</code>。<br>配置文件必须按照<code>Macros</code>, <code>Tables</code>, <code>Options</code>, <code>Traffic Normalization</code>, <code>Queueing</code>, <code>Translation</code>, <code>Packet Filtering</code>的顺序。<br>更详细的说明参考<a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man5/pf.conf.5.html" target="_blank" rel="external">pf.conf man page</a></p>
<ol>
<li><p>添加一个<code>anchor</code>。修改<code>/etc/pf.conf</code>如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">scrub-anchor &quot;com.apple/*&quot;</div><div class="line">nat-anchor &quot;com.apple/*&quot;</div><div class="line">nat-anchor &quot;custom&quot;</div><div class="line">rdr-anchor &quot;com.apple/*&quot;</div><div class="line">rdr-anchor &quot;custom&quot;</div><div class="line">dummynet-anchor &quot;com.apple/*&quot;</div><div class="line">anchor &quot;com.apple/*&quot;</div><div class="line">anchor &quot;custom&quot;</div><div class="line">load anchor &quot;com.apple&quot; from &quot;/etc/pf.anchors/com.apple&quot;</div><div class="line">load anchor &quot;custom&quot; from &quot;/etc/pf.anchors/custom&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>建立<code>anchor</code>规则文件<code>/etc/pf.anchors/custom</code>，内容为具体规则。<br>常用的规则：</p>
<ul>
<li><p>屏蔽IP入站TCP连接并记录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">block in log proto tcp from 192.168.1.136 to any</div></pre></td></tr></table></figure>
</li>
<li><p>转发入站TCP连接到另一本地端口：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rdr inet proto tcp from any to any port 8081 -&gt; 127.0.0.1 port 80</div></pre></td></tr></table></figure>
</li>
</ul>
<p>经测试，rdr无法转发到另一台外部主机上（man page的示例，只可以转发到internal network），内核开启<code>net.inet.ip.forwarding=1</code>也无效。如需转发到另一个外网IP，需要配合<a href="http://mitmproxy.org/doc/transparent/osx.html" target="_blank" rel="external">mitmproxy的透明代理</a></p>
<ul>
<li>NAT，路由vlan12接口上(192.168.168.0/24)的出口包，经由非vlan12的接口转换到外部地址(204.92.77.111)，并允许vlan12之间的互相访问:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nat on ! vlan12 from 192.168.168.0/24 to any -&gt; 204.92.77.111</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>使配置文件生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pfctl -evf /etc/pf.conf</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;水果的OSX上没有iptables，在10.10以后以pf取代ipfw。相比于iptables，pf一般使用配置文件保存防火墙规则，语法规范上更严谨，但是配置也更复杂、规则冗长。本文记录pf的简单配置方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat /etc/pf.conf&lt;/co
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="OSX" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OSX/"/>
    
    
      <category term="OSX" scheme="http://blog.chionlab.moe/tags/OSX/"/>
    
  </entry>
  
  <entry>
    <title>在GitHub Pages上使用CloudFlare https CDN</title>
    <link href="http://blog.chionlab.moe/2016/01/28/github-pages-with-https/"/>
    <id>http://blog.chionlab.moe/2016/01/28/github-pages-with-https/</id>
    <published>2016-01-27T16:49:18.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>本站就是使用<a href="https://hexo.io" target="_blank" rel="external">hexo</a>搭建的静态Web站点，托管在<a href="https://github.com/Chion82/Chion82.github.io" target="_blank" rel="external">GitHub repo</a>，并使用GitHub Pages。<br>另外，阿里云最近也提供https的CDN服务，更适合用在国内链路质量要求高的站点。</p>
<h2 id="GitHub-Pages应用自定义域名"><a href="#GitHub-Pages应用自定义域名" class="headerlink" title="GitHub Pages应用自定义域名"></a>GitHub Pages应用自定义域名</h2><p>默认情况下，访问GitHub Pages页面的域名为<code>username.github.io</code>，如果需要使用自己的域名（以下简称“你的域名”），可<a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/" target="_blank" rel="external">参考官方的帮助文档</a>，其实非常简单：</p>
<ol>
<li>在repo根目录下创建<code>CNAME</code>文件，内容为你的域名。<a href="https://github.com/Chion82/Chion82.github.io/blob/master/CNAME" target="_blank" rel="external">本站的CNAME文件</a></li>
<li>在你的域名管理中心，添加一条<code>CNAME</code>记录，指向<code>username.github.io</code>。（将username替换为你的GitHub用户名）</li>
</ol>
<p>现在，访问<code>http://你的域名</code> ，已经可以访问到站点首页了。而如果访问<code>http://username.github.io</code> （即原来的地址），将被302跳转到<code>http://你的域名</code>。</p>
<h2 id="https的问题"><a href="#https的问题" class="headerlink" title="https的问题"></a>https的问题</h2><p>尝试直接访问<code>https://你的域名</code>，浏览器会报SSL_DOMAIN_NOT_MATCHED警告。因为GitHub Pages默认提供的SSL证书的根域名是<code>github.io</code>，和你的域名不相同。<br>而且，GitHub Pages不支持上传SSL证书。</p>
<h2 id="使用CloudFlare"><a href="#使用CloudFlare" class="headerlink" title="使用CloudFlare"></a>使用CloudFlare</h2><p><a href="https://www.cloudflare.com" target="_blank" rel="external">CloudFlare</a>（以下简称CF）是一家CDN提供商，它的free plan里面就提供https服务（免费计划不能上传SSL）。现在可以通过CF实现：从用户到CDN服务器的连接为https，而CDN服务器到GitHub Pages服务器的连接为http。<br>1.注册并登录到CF。按照提示，在你的域名的管理中心，将域名的name server改为CF的name server。CF提供的NS如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Type</th>
<th style="text-align:center">Value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">NS</td>
<td style="text-align:center">bob.ns.cloudflare.com</td>
</tr>
<tr>
<td style="text-align:center">NS</td>
<td style="text-align:center">jamie.ns.cloudflare.com</td>
</tr>
</tbody>
</table>
<p>2.在CF的DNS设置页中，检查对应的子域名记录。博主的DNS记录如下：<br>  <img src="/2016/01/28/github-pages-with-https/dns-config.png" alt="blog.chionlab.moe的DNS记录" title="blog.chionlab.moe的DNS记录"><br>  其中，右侧的橙色云图标代表该条记录将经过CF的CDN加速。<br>  在这里设置的DNS记录，如果是CNAME记录或者A记录，若右边的STATUS为连通状态，CF都会在name server中将其设置为A记录并指向CF的CDN服务器（并根据用户所在地选择最优CDN），当用户通过该域名访问CF的CDN时（仅限http或https），CDN再转发到刚才填写的真实目的主机（即username.github.io）<br>  <img src="/2016/01/28/github-pages-with-https/dig-result.png" alt="博主的blog.chionlab.moe虽在CF中设置为CNAME到gh-pages，但dig结果是A指向CF的CDN" title="博主的blog.chionlab.moe虽在CF中设置为CNAME到gh-pages，但dig结果是A指向CF的CDN"><br>  CF正是通过这种动态DNS的方式实现CDN加速的。</p>
<h2 id="设置https"><a href="#设置https" class="headerlink" title="设置https"></a>设置https</h2><ol>
<li>在CF的Crypto页中，SSL设置为Flexible。这将允许CDN到github pages之间的访问为http。</li>
<li>现在，通过<code>https://你的域名</code>已经可以访问站点首页了。</li>
</ol>
<h2 id="强制https"><a href="#强制https" class="headerlink" title="强制https"></a>强制https</h2><p>CF提供Page Rules功能，可设置路由规则。通过规则中的<code>Always use https</code>选项，可以将用户强制跳转到https。博主的设置如下：<br><img src="/2016/01/28/github-pages-with-https/page-rules.png" alt="page-rules.png" title=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本站就是使用&lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo&lt;/a&gt;搭建的静态Web站点，托管在&lt;a href=&quot;https://github.com/Chion82/Chion82.github.i
    
    </summary>
    
      <category term="运维" scheme="http://blog.chionlab.moe/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="maintenance" scheme="http://blog.chionlab.moe/tags/maintenance/"/>
    
  </entry>
  
  <entry>
    <title>OpenWRT上使用haproxy对shadowsocks做负载均衡</title>
    <link href="http://blog.chionlab.moe/2016/01/27/use-haproxy-to-optimize-shadowsocks-on-openwrt/"/>
    <id>http://blog.chionlab.moe/2016/01/27/use-haproxy-to-optimize-shadowsocks-on-openwrt/</id>
    <published>2016-01-27T14:22:34.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>上篇<a href="/2016/01/27/optimize-shadowsocks-on-openwrt/">OpenWRT科学上网的问题及其优化</a>中，提到使用haproxy对shadowsocks的远程TCP连接做负载均衡，本文将介绍其实现过程。</p>
<h2 id="交叉编译haproxy"><a href="#交叉编译haproxy" class="headerlink" title="交叉编译haproxy"></a>交叉编译haproxy</h2><p>虽然haproxy有预编译版本的ipk包，但是作者的小米路由mini所使用的Pandorabox的内核版本与该包依赖的内核版本不一致，于是作者选择交叉编译。因为haproxy的源码简单，外部依赖少，编译过程比较简单，甚至不需要OpenWRT的完整SDK，只需要toolchain即可。</p>
<p>博主这里提供一个在MT7620平台编译好的binary:<br><a href="/downloads/haproxy">MT7620</a></p>
<ol>
<li><p>获取haproxy源码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/haproxy/haproxy.git</div></pre></td></tr></table></figure>
</li>
<li><p>修改Makefile<br>只需要在Makefile中将编译器改为OpenWRT的toolchain即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd haproxy</div><div class="line">$ vim Makefile</div></pre></td></tr></table></figure>
<p>找到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#### Toolchain options.</div><div class="line"># GCC is normally used both for compiling and linking.</div></pre></td></tr></table></figure>
<p>下面的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CC = XXX</div><div class="line">LD = XXX</div></pre></td></tr></table></figure>
<p>这两行，将<code>CC</code>的值改为路由器toolchain的gcc的完整路径，<code>LD</code>的值改为<code>$(CC)</code><br>例如，博主修改后是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CC = /home/chiontang/development/OpenWrt-SDK-ramips-for-linux-x86_64-gcc-4.8-linaro_uClibc-0.9.33.2/staging_dir/toolchain-mipsel_24kec+dsp_gcc-4.8-linaro_uClibc-0.9.33.2/bin/mipsel-openwrt-linux-uclibc-gcc</div><div class="line">LD = $(CC)</div></pre></td></tr></table></figure>
</li>
<li><p>编译</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make TARGET=generic</div></pre></td></tr></table></figure>
<p>如不出意外，当前目录下已经有了一个编译好的<code>haproxy</code>。可以在电脑上直接运行它测试一下，如果一切正常，会返回如下错误，因为使用了OpenWRT ARM平台的toolchain进行编译，x86环境下无法直接运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./haproxy</div><div class="line">zsh: exec format error: ./haproxy</div></pre></td></tr></table></figure>
<p>如果能够成功运行，说明刚才toolchain的设置没有成功，编译时直接使用了当前系统的编译器（如x86下的gcc）</p>
</li>
<li>将编译好的haproxy复制到路由器下的<code>/root/haproxy</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scp haproxy root@192.168.1.1:/root/haproxy</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="配置haproxy"><a href="#配置haproxy" class="headerlink" title="配置haproxy"></a>配置haproxy</h2><p>现在ssh连接上OpwnWRT路由器：</p>
<ol>
<li><p>建立haproxy配置文件：<code>/etc/haproxy.cfg</code>，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">global</div><div class="line">    log         127.0.0.1 local2</div><div class="line"></div><div class="line">    chroot      /root</div><div class="line">    pidfile     /tmp/haproxy.pid</div><div class="line">    maxconn     4000</div><div class="line">    user        root</div><div class="line">    daemon</div><div class="line"></div><div class="line">defaults</div><div class="line">    mode                    tcp    #TCP模式</div><div class="line">    log                     global</div><div class="line">    option                  httplog</div><div class="line">    option                  dontlognull</div><div class="line">    option http-server-close</div><div class="line">    option forwardfor       except 127.0.0.0/8</div><div class="line">    option                  redispatch</div><div class="line">    retries                 2</div><div class="line">    timeout http-request    10s</div><div class="line">    timeout queue           1m</div><div class="line">    timeout connect         2s     #上游TCP服务器连接等待时间                                      </div><div class="line">    timeout client          1m</div><div class="line">    timeout server          1m</div><div class="line">    timeout http-keep-alive 10s</div><div class="line">    timeout check           10s</div><div class="line">    maxconn                 3000</div><div class="line"></div><div class="line">listen test1</div><div class="line">    bind 0.0.0.0:8388       #haproxy监听端口</div><div class="line">    mode tcp</div><div class="line">    server s1 X.X.X.X:8388</div><div class="line">    server s2 X.X.X.X:8389</div><div class="line">    server s3 X.X.X.X:8390</div><div class="line">    server s4 X.X.X.X:8391</div></pre></td></tr></table></figure>
<p>其中，<code>X.X.X.X</code>为ss服务器，8388~8391这四个端口都为ss服务器上运行ssserver的端口（如果觉得不够你可以再加几个），稍后将讲到服务器端的配置。haproxy监听的端口为8388。</p>
</li>
<li><p>建立启动脚本：<code>/etc/init.d/haproxy</code>，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh /etc/rc.common</div><div class="line"></div><div class="line">START=99  #启动优先级设置为99，即最后启动</div><div class="line"></div><div class="line">start() &#123;</div><div class="line">        /root/haproxy -f /etc/haproxy.cfg</div><div class="line">&#125;</div><div class="line"></div><div class="line">stop() &#123;</div><div class="line">        killall haproxy</div><div class="line">&#125;</div><div class="line"></div><div class="line">restart() &#123;</div><div class="line">        stop</div><div class="line">        sleep 1</div><div class="line">        start</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后使其生效：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># /etc/init.d/haproxy enable</div><div class="line"># /etc/init.d/haproxy start</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><p>作者使用supervisor作为ssserver的daemon，本例中，服务器同时监听8388~8391这四个端口。<br>博主服务器上的supervisor配置文件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[supervisord]</div><div class="line"></div><div class="line">[program:ssserver1]</div><div class="line">command=/usr/bin/ssserver -m rc4-md5 -p 8388 -k [KEY]</div><div class="line"></div><div class="line">[program:ssserver2]</div><div class="line">command=/usr/bin/ssserver -m rc4-md5 -p 8389 -k [KEY]</div><div class="line"></div><div class="line">[program:ssserver3]</div><div class="line">command=/usr/bin/ssserver -m rc4-md5 -p 8390 -k [KEY]</div><div class="line"></div><div class="line">[program:ssserver4]</div><div class="line">command=/usr/bin/ssserver -m rc4-md5 -p 8391 -k [KEY]</div></pre></td></tr></table></figure></p>
<p>将<code>[KEY]</code>替换为ss密码即可</p>
<h2 id="ShadowSocks配置"><a href="#ShadowSocks配置" class="headerlink" title="ShadowSocks配置"></a>ShadowSocks配置</h2><ol>
<li>编辑<code>/etc/shadowsocks/ignore.list</code>（如果你设置的忽略列表为其他文件，则编辑那个文件）,在最后添加一行，输入ss服务器的IP。</li>
<li>进入路由器配置Web，在luci配置页中，将ss服务器IP改为<code>127.0.0.1</code>，端口改为<code>8388</code>。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇&lt;a href=&quot;/2016/01/27/optimize-shadowsocks-on-openwrt/&quot;&gt;OpenWRT科学上网的问题及其优化&lt;/a&gt;中，提到使用haproxy对shadowsocks的远程TCP连接做负载均衡，本文将介绍其实现过程。&lt;/p&gt;
&lt;h2
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="OpenWRT" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OpenWRT/"/>
    
    
      <category term="openwrt" scheme="http://blog.chionlab.moe/tags/openwrt/"/>
    
      <category term="router" scheme="http://blog.chionlab.moe/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>运维纪录：遭遇CC攻击，防御与查水表</title>
    <link href="http://blog.chionlab.moe/2016/01/27/cc-defence-log/"/>
    <id>http://blog.chionlab.moe/2016/01/27/cc-defence-log/</id>
    <published>2016-01-26T19:28:34.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>博主之前完成了一个外包项目，最近两个月在负责这个项目的运维。这是一个web，主营不良资产催收O2O。由于可能存在竞争对手，有人试图攻击服务器。</p>
<h2 id="事件回顾"><a href="#事件回顾" class="headerlink" title="事件回顾"></a>事件回顾</h2><p>24日下午3点，博主正在去拜访亲戚家的路上，这时公司的菜鸟开发者突然从QQ上发消息过来，问我服务器是不是被黑了。我认为这个可能性不大。这个项目由我亲手带领团队开发，后端使用的是Python+Flask+PostgreSQL，前端使用nodejs+express实现的midway，服务器部署也是由博主亲手完成。这类技术栈，已公布的可直接利用的漏洞十分有限，再者，博主在领队开发时已多次强调安全的重要性，具体到每个API都对用户权限进行了严格认证，编码过程中也不存在可能被注入、被远程执行等低级的危险代码，于是博主认为服务器被web渗透的可能性非常小。当然，不排除黑客从web之外的服务渗透进入，但是服务器上除了web只有ssh服务（强密码+公钥认证），除非公司的开发者部署了其他服务，否则能渗进来的可能性不大。</p>
<p>博主于是立即用手机访问网站，网站返回了504，这说明nginx的上游没有响应了，node midway或者Python后端，肯定有一个处于freeze状态。</p>
<p>到达亲戚家后，经过简短的问候，我即问道有没有能用的电脑。朋友让我使用一台08年的笔记本，运行的XP系统，只有IE8和360安全浏览器，但是已经够用了。下载Putty后ssh连接上服务器，立即<code>killall supervisord &amp;&amp; supervisord</code>。因为node midway和Python后端都处于开发中状态，为了调试方便，所以直接是用supervisor作为daemon的。结果是，网站首页仍然返回504。</p>
<p>下意识地<code>tail /var/log/nginx/access.log -n 100</code>，出来的结果让我目瞪口呆.jpg<br><br>我立即就知道是怎么一回事了：黑客在flood发送短信的API。由于当时开发急促，没有对短信API加入图形验证码或者reCaptcha之类的验证，使得可以通过软件实现模拟请求，并且由于项目处于开发中，为方便调试没有使用wsgi容器调度请求和超时处理，再者，由于发送短信需要服务器向第三方短信平台请求，这个请求将比较费时，同时的大量请求使得Python后端完全被阻塞，难怪nginx报504。从log上看，flood来源自多个不同的IP，这是分布式的攻击，算得上是一场小型的CC攻击。后来发现参与这次CC的肉鸡大概有700～800台。</p>
<p><strong>出于保密原则，本文以下内容中，发送短信API的URI均由[SMS_API]代替</strong></p>
<h2 id="应急防御"><a href="#应急防御" class="headerlink" title="应急防御"></a>应急防御</h2><p>运行了一下<code>cat /var/log/nginx/access.log | grep &#39;[SMS_API]&#39; | wc -l</code>，返回的数字超过了30万，这时公司购买的短信平台套餐肯定已经用光了。但是现在首先要考虑恢复网站的正常访问。</p>
<p>对于这种小型的CC防御，除了ban ip之外我没有想到更好的解决方法。于是，我用ipset+iptables将当天访问过短信API的IP全部ban了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># ipset create blacklist hash:net</div><div class="line"># cat /var/log/nginx/access.log | grep &apos;[SMS_API]&apos; | awk &apos;&#123;print $1&#125;&apos; | while read line;do ipset add blacklist $line;done  #将访问过短信API的IP全部加入ipset的blacklist集合</div><div class="line"># iptables -I INPUT -m set --match-set blacklist src -j DROP</div></pre></td></tr></table></figure></p>
<blockquote>
<p>笔记： iptables -m set –match-set [SET_NAME] [src|dst]</p>
</blockquote>
<p>执行后，再查看access log，flood马上就停下来了。但是现在遇到了新问题：后端跑不起来了。</p>
<h2 id="修复后端"><a href="#修复后端" class="headerlink" title="修复后端"></a>修复后端</h2><p>手动运行后端Python脚本，Peewee报不能连接上数据库。<br>跑了一下psql，发现正常读取数据，再查看PostgreSQL的log，没有发现异常。没有头绪，通知公司的后端开发者检查后端代码。<br>公司的开发者没有回应，我折腾了很久找不到问题所在，直到我想到会不会是刚才添加iptables过滤规则时把本机也过滤了。<br>试着运行了一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ipset test blacklist 127.0.0.1</div></pre></td></tr></table></figure></p>
<p>返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 is in set blacklist.</div></pre></td></tr></table></figure></p>
<p>再次目瞪口呆.jpg。突然想起来，刚才我为了测试短信接口，在服务器上跑了一下<code>curl localhost/[SMS_API]</code>，于是nginx access log中就有了127.0.0.1，然后在跑脚本的时候就把127.0.0.1加入到blacklist中了。立即运行了一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ipset del blacklist 127.0.0.1</div></pre></td></tr></table></figure></p>
<p>再次重启后端，一切正常，网站也能够访问了。</p>
<h2 id="nginx中添加访问限制"><a href="#nginx中添加访问限制" class="headerlink" title="nginx中添加访问限制"></a>nginx中添加访问限制</h2><p>目前后端是从session判断唯一用户的，并限制每个用户每分钟只能调用短信API一次。但是如果黑客手动清空cookie，服务器将允许再次请求。在nginx的文档中快速查找了一下，发现nginx支持从IP上request limit。现在需要限制1 request/min per IP，为此修改nginx配置：</p>
<ol>
<li><p>添加limit_req_zone</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># /etc/nginx/nginx.conf</div><div class="line">http &#123;</div><div class="line">  limit_req_zone $binary_remote_addr zone=sms:10m rate=1r/m;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>location中应用limit_req_zone</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  ...</div><div class="line">  location ~ ^([SMS_API]) &#123;</div><div class="line">      limit_req zone=sms nodelay;</div><div class="line">      proxy_pass http://127.0.0.1:5000;</div><div class="line">      proxy_set_header Host $host;</div><div class="line">      proxy_set_header X-Real-IP $remote_addr;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>经过这样的配置，同一IP在一分钟内只能访问该URL一次，否则返回503 server unavailable。</p>
<h2 id="脚本实现自动Ban-IP"><a href="#脚本实现自动Ban-IP" class="headerlink" title="脚本实现自动Ban IP"></a>脚本实现自动Ban IP</h2><p>之后发现源源不断地还有更多IP试图发起CC，不可能人工一个一个的ban，于是写了一个简单shell脚本实现：当天access log中，访问短信API超过30次的IP，将被加入黑名单。当然，这只是临时的，生产环境中，对于同一内网中的多个真实用户可能会出现误ban的情况，因此攻击过后要将脚本关闭。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">while [ True ]</div><div class="line">do</div><div class="line">        cat /var/log/nginx/access.log | grep &apos;[SMS_API]&apos; | awk &apos;&#123;print $1&#125;&apos; | sort | uniq -c | awk &apos;$1&gt;30&#123;print $2&#125;&apos; | while read line;do echo &apos;Blocking IP:&apos;$line &amp;&amp; ipset add blacklist $line;done</div><div class="line">        sleep 10</div><div class="line">done</div></pre></td></tr></table></figure></p>
<h2 id="找出攻击发起者"><a href="#找出攻击发起者" class="headerlink" title="找出攻击发起者"></a>找出攻击发起者</h2><p>由于CC分布式的特征，很难找出真正的攻击发起者。但是，往往可以找到第一个嫌疑者。通过翻看当天上午的access log，发现如下有趣的信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">113.232.156.* - - [23/Jan/2016:11:19:13 +0800] &quot;GET /register.html HTTP/1.1&quot; 200 8383 &quot;https://www.google.com/&quot; &quot;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1&quot; &quot;-&quot; #使用Chrome进入网站注册页</div><div class="line">#...</div><div class="line">#下面若干行纪录均为页面静态资源请求</div><div class="line">#...</div><div class="line">113.232.156.* - - [23/Jan/2016:11:19:20 +0800] &quot;GET [SMS_API]?phone=1584059XXXX HTTP/1.1&quot; 200 46 &quot;http://网站域名.com/register.html&quot; &quot;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1&quot; &quot;-&quot;</div><div class="line">#在Chrome中点击“发送短信验证码”按钮</div></pre></td></tr></table></figure></p>
<p>正常的UA（Chrome 21.0.1180.89），并且有静态资源访问记录，基本可以确定是人工操作。<br>继续翻：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">113.232.156.* - - [23/Jan/2016:11:19:27 +0800] &quot;GET /register.html HTTP/1.1&quot; 200 8383 &quot;-&quot; &quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)&quot; &quot;-&quot;</div><div class="line">#注意，这个人在1分钟内使用了IE9重新进入网站注册页</div><div class="line">#...</div><div class="line">#下面若干行纪录均为页面静态资源请求</div><div class="line">#...</div><div class="line">113.232.156.* - - [23/Jan/2016:11:19:35 +0800] &quot;GET [SMS_API]?phone=1552442XXXX HTTP/1.1&quot; 200 46 &quot;http://网站域名.com/register.html&quot; &quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)&quot; &quot;-&quot;</div><div class="line">#这个人在1分钟内使用IE9再次点击“发送短信验证码”按钮</div></pre></td></tr></table></figure></p>
<p>普通用户是不会同时使用两款浏览器登录同一个网站并点击发送短信按钮的。除非——你想要验证这个网站是否根据session判断同一用户是否在一分钟内调用了多次发送短信API。再往后翻记录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">113.232.156.* - - [23/Jan/2016:11:19:51 +0800] &quot;GET [SMS_API]?phone=1504032XXXX HTTP/1.1&quot; 200 46 &quot;-&quot; &quot;-&quot; &quot;-&quot;</div></pre></td></tr></table></figure></p>
<p>果不其然，这个人用模拟请求调用了发送短信API（因为没有正常的UA）<br>在这的几分钟后，来自全国各地的肉鸡就开始flood服务器了。</p>
<h2 id="人肉攻击发起者"><a href="#人肉攻击发起者" class="headerlink" title="人肉攻击发起者"></a>人肉攻击发起者</h2><p>换位思考一下，如果我是黑客，在开始CC之前，是否需要测试一下这个API，然后再在肉鸡上配置随机手机号，最后再进行CC？<br>再次翻log，发现flood开始后，来自肉鸡的请求中，手机号码来自全国各地，但是都每个号码重复了很多次，并且每台肉鸡都有自己的手机号。据此可判断，肉鸡用的手机号码一定不是黑客本人或相关者的号码，而应该是随机生成的或者是通过非法渠道获取到的“受害者”的手机号。但是，113.232.156.* （即黑客嫌疑者）一开始在Chrome和IE9中用的号码在后面的记录中都没有找到，并且号码所属地和IP所属地吻合（都为辽宁沈阳），据此，怀疑黑客一开始在Chrome中会用真实的手机号先进行测试，然后再实施CC。<br>将黑客IP和他第一次在浏览器中提交的手机号码（1584059XXXX）告诉了公司，公司立即拨打了这个手机号码。<br>对方一开始不承认。后来对方打回来，问我们是什么网站做什么的，并且听到对面几个人在偷着乐。因此，对方很有可能就是这次攻击的发起者，并且可能是黑客团伙，专职外包。（其实博主认为，国内这种组织根本算不上真正意义上的黑客，只是非常低级的为了图利的非法技术组织，并且自身技术也是很菜…）<br>公司随后开始通过手机号码查询该人身份信息。由于公司本身性质的关系，有后台可以调查某些信息。<br>之后的事情我就没有多问了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博主之前完成了一个外包项目，最近两个月在负责这个项目的运维。这是一个web，主营不良资产催收O2O。由于可能存在竞争对手，有人试图攻击服务器。&lt;/p&gt;
&lt;h2 id=&quot;事件回顾&quot;&gt;&lt;a href=&quot;#事件回顾&quot; class=&quot;headerlink&quot; title=&quot;事件回顾&quot;
    
    </summary>
    
      <category term="运维" scheme="http://blog.chionlab.moe/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="maintenance" scheme="http://blog.chionlab.moe/tags/maintenance/"/>
    
      <category term="linux" scheme="http://blog.chionlab.moe/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>OpenWRT自动科学上网的问题及优化</title>
    <link href="http://blog.chionlab.moe/2016/01/27/optimize-shadowsocks-on-openwrt/"/>
    <id>http://blog.chionlab.moe/2016/01/27/optimize-shadowsocks-on-openwrt/</id>
    <published>2016-01-26T17:45:48.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/2016/01/23/openwrt-bypass-gfw-solution/">OpenWRT路由器配置ShadowSocks+ChinaDNS</a>虽然使用起来十分优雅和方便，但是因为ISP质量问题，可能随之会带来很多稳定性问题，包括但不限以下作者遇到过的问题：</p>
<ul>
<li>ISP封杀境外UDP流量，导致SS的UDP隧道非常不稳定，ChinaDNS查询失败（比如广州电信部分地区）</li>
<li>链路拥堵时，到ss服务器的多并发TCP连接无法建立成功，新建立的连接容易卡在<code>SYN_SENT</code>，最终导致超时</li>
<li>ChinaDNS长时间运行后可能出现的解析不正常的情况，表现为始终返回国外DNS结果，导致国内网站访问缓慢<br>针对以上问题，作者琢磨出一些优化方法。</li>
</ul>
<h2 id="优化UDP稳定性"><a href="#优化UDP稳定性" class="headerlink" title="优化UDP稳定性"></a>优化UDP稳定性</h2><p>由于ISP封杀境外UDP包，那么UDP只可以走境内。那么可以将一台境内服务器作为UDP跳板。TCP包直接发到境外的ss服务器，UDP包则经过境内的跳板服务器中转到ss服务器。跳板服务器可以选择阿里云、腾讯云等，带宽不需要太大，1M都完全够了，主要是用来中转DNS查询包。作者用的是腾讯云的1元／月的学生优惠。</p>
<p>一、在UDP跳板服务器上进行以下配置以实现中转。</p>
<ol>
<li><p>开启内核的ip_forward</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># vim /etc/sysctl.conf</div></pre></td></tr></table></figure>
<p>将<code>net.ipv4.ip_forward=0</code>修改为<code>net.ipv4.ip_forward=1</code>。如果文件为空，则添加一行<code>net.ipv4.ip_forward=1</code>即可。<br>运行这条命令即时生效：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># sysctl -p</div></pre></td></tr></table></figure>
</li>
<li><p>用iptables实现TCP+UDP中转</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># iptables -t nat -A PREROUTING -p tcp --dport [PORT] -j DNAT --to-destination X.X.X.X:X</div><div class="line"># iptables -t nat -A PREROUTING -p ucp --dport [PORT] -j DNAT --to-destination X.X.X.X:X</div><div class="line"># iptables -t nat -A POSTROUTING -j MASQUERADE</div><div class="line"># service iptables save #永久保存修改</div></pre></td></tr></table></figure>
<p>其中，<code>X.X.X.X:X</code>为ss服务器IP和端口，<code>[PORT]</code>为跳板服务器上用于中转的监听端口（为了方便，可以和ss服务器的端口相同）。</p>
</li>
</ol>
<p>二、修改OpenWRT上的配置</p>
<ol>
<li><p>ssh连接上路由器，建立一个跳板服务器的ss配置:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cp /var/etc/shadowsocks.json /root/shadowsocks_udp.json #复制当前的ss配置文件</div><div class="line"># vim /root/shadowsocks_udp.json</div></pre></td></tr></table></figure>
<p>然后修改<code>/root/shadowsocks_udp.json</code>，将远程服务器IP改为跳板服务器的IP，远程端口改为跳板服务器的监听端口（即刚才的<code>[PORT]</code>）</p>
</li>
<li><p>然后需要修改shadowsocks的启动脚本，让ss隧道使用跳板服务器的配置文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># vim /etc/init.d/shadowsocks</div></pre></td></tr></table></figure>
<p>在<code>CONFIG_FILE=/var/etc/shadowsocks.json</code>下增加一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UDP_CONFIG_FILE=/root/shadowsocks_udp.json</div></pre></td></tr></table></figure>
<p>找到：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ss-tunnel \       </div><div class="line">              -c $CONFIG_FILE \        </div><div class="line">              -l $tunnel_port \          </div><div class="line">              -L $tunnel_forward \</div><div class="line">              -f /var/run/ss-tunnel.pid \</div></pre></td></tr></table></figure>
<p>将其修改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ss-tunnel \       </div><div class="line">              -c $UDP_CONFIG_FILE \        </div><div class="line">              -l $tunnel_port \          </div><div class="line">              -L $tunnel_forward \</div><div class="line">              -f /var/run/ss-tunnel.pid \</div></pre></td></tr></table></figure>
<p>保存后重启shadowsocks</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># /etc/init.d/shadowsocks restart</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="优化TCP稳定性"><a href="#优化TCP稳定性" class="headerlink" title="优化TCP稳定性"></a>优化TCP稳定性</h2><ol>
<li>最好的方法是选择链路质量好的服务器作为ss服务器，比如香港的vps，将不容易出现多并发TCP连接无法建立的情况。</li>
<li>如果不能选择更换ss服务器，可在ss服务器上同时监听多个端口，同时在路由器上使用haproxy进行负载均衡，把ss服务器的多个端口加入到upstream列表中，由于haproxy超时自动更换upstream的特性，可大大降低连接失败的概率。详细操作方法作者将在下篇博文中介绍。</li>
</ol>
<h2 id="ChinaDNS偶然解析不正常的解决"><a href="#ChinaDNS偶然解析不正常的解决" class="headerlink" title="ChinaDNS偶然解析不正常的解决"></a>ChinaDNS偶然解析不正常的解决</h2><p>尚不明确为何ChinaDNS长时间运行后偶然地可能会始终返回国外DNS结果（重启ChinaDNS即恢复），作者之前尝试<a href="https://github.com/Chion82/ChinaDNS" target="_blank" rel="external">修改了一下ChinaDNS</a>，将判断某个IP是否为国内IP的逻辑修改为借助ipset来判断，但是作者没有测试过其稳定性。<br>本文介绍的解决方法很无脑，即定时重启ChinaDNS。使用cron，在每天的零时重启一次ChinaDNS。经作者测试，这招确实有效。<br>在路由器上运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># crontab -e</div></pre></td></tr></table></figure></p>
<p>添加一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 0 * * * /etc/init.d/chinadns restart</div></pre></td></tr></table></figure></p>
<p>保存并重启路由器生效。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;/2016/01/23/openwrt-bypass-gfw-solution/&quot;&gt;OpenWRT路由器配置ShadowSocks+ChinaDNS&lt;/a&gt;虽然使用起来十分优雅和方便，但是因为ISP质量问题，可能随之会带来很多稳定性问题，包括但不限以下作
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="OpenWRT" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OpenWRT/"/>
    
    
      <category term="openwrt" scheme="http://blog.chionlab.moe/tags/openwrt/"/>
    
      <category term="router" scheme="http://blog.chionlab.moe/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>OpenWRT路由器上的ShadowSocks+ChinaDNS搭梯子方案</title>
    <link href="http://blog.chionlab.moe/2016/01/23/openwrt-bypass-gfw-solution/"/>
    <id>http://blog.chionlab.moe/2016/01/23/openwrt-bypass-gfw-solution/</id>
    <published>2016-01-23T08:07:53.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>在路由器上运行ShadowSocks科学上网是最为优雅的方案。本文将介绍其安装和配置步骤。<br>首先为智能路由器刷上OpenWRT，博主推荐<a href="http://downloads.openwrt.org.cn/PandoraBox/" target="_blank" rel="external">Pandorabox</a>修改版。本文将实现：连接上路由器的客户端当访问国内主机时，直接连接，而访问国外主机时，自动代理。</p>
<h2 id="安装ShadowSocks"><a href="#安装ShadowSocks" class="headerlink" title="安装ShadowSocks"></a>安装ShadowSocks</h2><ol>
<li><p>因为本文讨论的是SS+ChinaDNS的翻墙方案，对于部分已集成SS+domain list的固件版本，需要先删除已安装的SS及相关工具。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#ssh连接上路由器后运行</div><div class="line">$ opkg list_installed | grep shadowsocks #查询已安装的ss和相关工具</div><div class="line"># opkg remove shadowsocks-* #删除之</div></pre></td></tr></table></figure>
</li>
<li><p>下载安装shadowsocks-libev-spec<br><a href="http://sourceforge.net/projects/openwrt-dist/files/shadowsocks-libev/" target="_blank" rel="external">http://sourceforge.net/projects/openwrt-dist/files/shadowsocks-libev/</a><br>经作者测试，最新版在极贰最新OpenWRT固件上会出现iptables规则失效的情况，建议使用<code>shadowsocks-libev-spec_2.3.0-1_XXXX</code>版本。<br>以MT7620系列为例，在路由器上运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># opkg update</div><div class="line"># cd /tmp</div><div class="line"># wget http://sourceforge.net/projects/openwrt-dist/files/shadowsocks-libev/2.3.0-3ff06a6/ramips/shadowsocks-libev-spec_2.3.0-1_ramips_24kec.ipk  #如果不是ramips平台，请根据路由器ARCH选择对应ipk</div><div class="line"># opkg install shadowsocks-libev-spec_2.3.0-1_ramips_24kec.ipk</div></pre></td></tr></table></figure>
</li>
<li><p>下载安装luci-app-shadowsocks-spec<br>luci-app提供ss的图形化配置界面。<br><a href="http://sourceforge.net/projects/openwrt-dist/files/luci-app/shadowsocks-spec/" target="_blank" rel="external">http://sourceforge.net/projects/openwrt-dist/files/luci-app/shadowsocks-spec/</a><br>如果<code>shadowsocks-libev-spec</code>使用的版本是本文推荐的<code>2.3.0</code>，请下载<code>luci-app-shadowsocks-spec_1.3.2-1_all.ipk</code>。路由器上运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># wget http://sourceforge.net/projects/openwrt-dist/files/luci-app/shadowsocks-spec/luci-app-shadowsocks-spec_1.3.2-1_all.ipk</div><div class="line"># opkg install luci-app-shadowsocks-spec_1.3.2-1_all.ipk</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="安装ChinaDNS"><a href="#安装ChinaDNS" class="headerlink" title="安装ChinaDNS"></a>安装ChinaDNS</h2><p>ChinaDNS用于解决国内DNS污染问题，同时可加速国内网站的访问。其原理如下：<br>提供至少一个国内DNS服务器和一个国外DNS服务器，ChinaDNS收到来自用户的DNS请求后，同时向这两个服务器发DNS请求。如果从国内DNS服务器返回的解析结果为国外IP，则选择国外DNS服务器的解析结果，否则选择国内DNS的解析结果，最后返回给用户。<br><a href="http://sourceforge.net/projects/openwrt-dist/files/chinadns/" target="_blank" rel="external">http://sourceforge.net/projects/openwrt-dist/files/chinadns/</a></p>
<ol>
<li><p>ChinaDNS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ wget http://sourceforge.net/projects/openwrt-dist/files/chinadns/1.3.2-d3e75dd/ChinaDNS_1.3.2-3_ramips_24kec.ipk</div><div class="line"># opkg install ChinaDNS_1.3.2-3_ramips_24kec.ipk</div></pre></td></tr></table></figure>
</li>
<li><p>luci-app-ChinaDNS<br><a href="http://sourceforge.net/projects/openwrt-dist/files/luci-app/chinadns/" target="_blank" rel="external">http://sourceforge.net/projects/openwrt-dist/files/luci-app/chinadns/</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ wget http://sourceforge.net/projects/openwrt-dist/files/luci-app/chinadns/luci-app-chinadns_1.3.4-1_all.ipk</div><div class="line"># opkg install luci-app-chinadns_1.3.4-1_all.ipk</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="配置ShadowSocks"><a href="#配置ShadowSocks" class="headerlink" title="配置ShadowSocks"></a>配置ShadowSocks</h2><ol>
<li><p>创建国内IP段列表，用于忽略国内目标主机。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># mkdir /etc/shadowsocks</div><div class="line"># wget -O- &apos;http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest&apos; | awk -F\| &apos;/CN\|ipv4/ &#123; printf(&quot;%s/%d\n&quot;, $4, 32-log($5)/log(2)) &#125;&apos; &gt; /etc/shadowsocks/ignore.list</div></pre></td></tr></table></figure>
</li>
<li><p>使用luci-app配置ss<br>进入路由器管理web页面，用root登录，进入服务(Services)-&gt;ShadowSocks。<br>勾选启用Shadowsocks，输入ss服务器信息（服务器IP、端口、密码、加密方式）。<br>代理方法(Proxy method)选择忽略列表(Ignore list)，并在–custom–中填入<code>/etc/shadowsocks/ignore.list</code>。代理协议(Proxy protocol)选择<code>TCP+UDP</code>。<br>开启UDP隧道，UDP本地端口5300，目的地址<code>8.8.8.8:53</code>。UDP隧道用于加密DNS查询包，稍后将会用到。<br><img src="/images/openwrt-ss-1.png" alt=""></p>
</li>
<li>保存并应用(Save and Apply)</li>
</ol>
<h2 id="配置ChinaDNS"><a href="#配置ChinaDNS" class="headerlink" title="配置ChinaDNS"></a>配置ChinaDNS</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -O- &apos;http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest&apos; | awk -F\| &apos;/CN\|ipv4/ &#123; printf(&quot;%s/%d\n&quot;, $4, 32-log($5)/log(2)) &#125;&apos; &gt; /etc/chinadns_chnroute.txt</div></pre></td></tr></table></figure>
<p>在路由器web管理页面，进入服务(Services)-&gt;ChinaDNS。<br>勾选启用ChinaDNS，启用DNS压缩指针。<br>本地端口写5353，中国路由表(CHNRoute File)填<code>/etc/chinadns_chnroute.txt</code>。<br>上游DNS服务器填<code>114.114.114.114,127.0.0.1:5300</code>。（可将114.114.114.114改成当前ISP提供的DNS服务器IP）<br>这里将ss的UDP隧道作为ChinaDNS的国外DNS上游源。<br>保存并应用</p>
<h2 id="配置路由器DNS-Dnsmasq"><a href="#配置路由器DNS-Dnsmasq" class="headerlink" title="配置路由器DNS(Dnsmasq)"></a>配置路由器DNS(Dnsmasq)</h2><p>进入网络(Network)-&gt;DHCP and DNS。<br>将DNS转发(DNS forwardings)设置为<code>127.0.0.1#5353</code>。这将使得路由器将DNS请求经由dnsmasq全部转发至ChinaDNS处理。<br>这样设置后，从内网主机端发出的国外DNS请求将发送至：dnsmasq-&gt;ChinaDNS-&gt;ss-tunnel-&gt;ss服务器-&gt;8.8.8.8，<br>国内DNS请求则：dnsmasq-&gt;ChinaDNS-&gt;114.114.114.114<br>还要记得勾选“忽略解析文件”(ignore resolve file)。</p>
<p>至此，路由器上的梯子已经搭建完毕，如不出意外，你已经可以进youtube了。<br>但是，受路由器到ss服务器的链路质量影响，可能会出现不稳定的情况。例如某些ISP下会出现境外UDP流量丢包、多TCP并发连接容易建立失败等情况。博主将在下篇文章中介绍优化方案。</p>
<h2 id="关于shadowsocks-libev-spec的原理"><a href="#关于shadowsocks-libev-spec的原理" class="headerlink" title="关于shadowsocks-libev-spec的原理"></a>关于shadowsocks-libev-spec的原理</h2><p>通过分析ss的启动脚本，初步确定ss-libev-spec是以以下步骤实现自动翻墙的。</p>
<ol>
<li>运行<code>/usr/bin/ss-rules</code>，设置在ipset中建立一个列表<code>ss_spec_wan_ac</code>，列表中存放了<code>/etc/shadowsocks/ignore.list</code>中的IP段（即为需要忽略的国内IP段），然后设置iptables，在<code>nat</code>表的<code>OUTPUT</code>链中将目标地址<code>match-set ss_spec_wan_ac</code>的包采取<code>RETURN</code>处理。然后再在这条规则后增加一条，将全部包<code>REDIRECT</code>到<code>127.0.0.1:1080</code></li>
<li>运行<code>/usr/bin/ss-redir</code>，监听本地端口<code>1080</code>，负责将收到的包经由ss，加密socks代理至ss服务器。</li>
<li>运行<code>/usr/bin/ss-tunnel</code>，经由ss服务器建立加密的UDP隧道，隧道一端为本地监听端口<code>5300</code>，另一端为<code>8.8.8.8:53</code>。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在路由器上运行ShadowSocks科学上网是最为优雅的方案。本文将介绍其安装和配置步骤。&lt;br&gt;首先为智能路由器刷上OpenWRT，博主推荐&lt;a href=&quot;http://downloads.openwrt.org.cn/PandoraBox/&quot; target=&quot;_bla
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="OpenWRT" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OpenWRT/"/>
    
    
      <category term="openwrt" scheme="http://blog.chionlab.moe/tags/openwrt/"/>
    
      <category term="router" scheme="http://blog.chionlab.moe/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>tldr - 懒人的man page</title>
    <link href="http://blog.chionlab.moe/2016/01/23/tldr-man-page/"/>
    <id>http://blog.chionlab.moe/2016/01/23/tldr-man-page/</id>
    <published>2016-01-23T07:48:33.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实我是十分不愿意在紧张开发时为了一个小工具翻看man page的，直到我从GitHub上找到这个工具。tldr即too long don’t read，提供简化版的man page，每页page只有非常简短的说明，十分适合懒人查询和情急时快速检索。当然，这个工具提供的page覆盖率还不够高，还有劳各位去发pull request。</p>
<p><a href="https://github.com/tldr-pages/tldr" target="_blank" rel="external">https://github.com/tldr-pages/tldr</a></p>
<h2 id="tl-dr"><a href="#tl-dr" class="headerlink" title="tl;dr"></a>tl;dr</h2><p>安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># npm install -g tldr</div></pre></td></tr></table></figure></p>
<p>使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ tldr aria2c</div></pre></td></tr></table></figure></p>
<p>Done!</p>
<p>最后提一下，时间充裕时还是尽量去阅读完整版的man page！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实我是十分不愿意在紧张开发时为了一个小工具翻看man page的，直到我从GitHub上找到这个工具。tldr即too long don’t read，提供简化版的man page，每页page只有非常简短的说明，十分适合懒人查询和情急时快速检索。当然，这个工具提供的pa
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://blog.chionlab.moe/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>用Xposed框架抓取微信朋友圈数据</title>
    <link href="http://blog.chionlab.moe/2016/01/22/use-xposed-to-crawl-wechat-moments/"/>
    <id>http://blog.chionlab.moe/2016/01/22/use-xposed-to-crawl-wechat-moments/</id>
    <published>2016-01-22T15:38:02.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>因微信朋友圈为私有协议，从抓包上分析朋友圈数据几乎不可能，目前也尚未找到开源的抓取朋友圈的脚本。博主于是尝试通过使用安卓下的Xposed框架实现从微信安卓版上抓取朋友圈数据。<br>本文针对微信版本6.3.8。<br><a href="https://github.com/Chion82/WeChatMomentExport" target="_blank" rel="external">GitHub仓库</a></p>
<h2 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h2><p>从UI获取文本信息是最为简单的方法，于是应该优先逆向UI代码部分。</p>
<h2 id="逆向微信apk"><a href="#逆向微信apk" class="headerlink" title="逆向微信apk"></a>逆向微信apk</h2><p>首先解包微信apk，用dex2jar反编译classes.dex，然后用JD-GUI查看jar源码。<br>当然，能看到的源码都是经过高度混淆的。但是，继承自安卓重要组件（如Activity、Service等）的类名无法被混淆，于是还是能从中看到点东西。</p>
<ol>
<li>首先定位到微信APP package。我们知道这个是<code>com.tencent.mm</code>。</li>
<li>在<code>com.tencent.mm</code>中，我们找到一个<code>ui</code>包，有点意思。</li>
<li>展开<code>com.tencent.mm.ui</code>，发现多个未被混淆的类，其中发现<code>MMBaseActivity</code>直接继承自<code>Activity</code>，<code>MMFragmentActivity</code>继承自<code>ActionBarActivity</code>，<code>MMActivity</code>继承自<code>MMFragmentActivity</code>，并且<code>MMActivity</code>是微信中大多数Activity的父类：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MMFragmentActivity</span></span></div><div class="line">  <span class="keyword">extends</span> <span class="title">ActionBarActivity</span></div><div class="line">  <span class="keyword">implements</span> <span class="title">SwipeBackLayout</span>.<span class="title">a</span>, <span class="title">b</span>.<span class="title">a</span> &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MMActivity</span></span></div><div class="line">  <span class="keyword">extends</span> <span class="title">MMFragmentActivity</span> &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MMBaseActivity</span></span></div><div class="line">  <span class="keyword">extends</span> <span class="title">Activity</span> &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>现在需要找出朋友圈的Activity，为此要用Xposed hook<code>MMActivity</code>。</p>
<h2 id="创建一个Xposed模块"><a href="#创建一个Xposed模块" class="headerlink" title="创建一个Xposed模块"></a>创建一个Xposed模块</h2><p>参考<a href="http://forum.xda-developers.com/showthread.php?t=2709324" target="_blank" rel="external">[TUTORIAL]Xposed module devlopment</a>，创建一个Xposed项目。<br>简单Xposed模块的基本思想是：hook某个APP中的某个方法，从而达到读写数据的目的。<br>小编尝试hook<code>com.tencent.mm.ui.MMActivity.setContentView</code>这个方法，并打印出这个Activity下的全部TextView内容。那么首先需要遍历这个Activity下的所有TextView，遍历ViewGroup的方法参考了SO的以下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getAllTextViews</span><span class="params">(<span class="keyword">final</span> View v)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (v <span class="keyword">instanceof</span> ViewGroup) &#123;</div><div class="line">       ViewGroup vg = (ViewGroup) v;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vg.getChildCount(); i++) &#123;</div><div class="line">           View child = vg.getChildAt(i);</div><div class="line">           getAllTextViews(child);</div><div class="line">       &#125;</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">instanceof</span> TextView ) &#123;</div><div class="line">       dealWithTextView((TextView)v); <span class="comment">//dealWithTextView(TextView tv)方法：打印TextView中的显示文本</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Hook<code>MMActivity.setContentView</code>的关键代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">findAndHookMethod(<span class="string">"com.tencent.mm.ui.MMActivity"</span>, lpparam.classLoader, <span class="string">"setContentView"</span>, View.class, <span class="keyword">new</span> XC_MethodHook() &#123;</div><div class="line">  ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在findAndHookMethod方法中，第一个参数为完整类名，第三个参数为需要hook的方法名，其后若干个参数分别对应该方法的各形参类型。在这里，<code>Activity.setContentView(View view)</code>方法只有一个类型为<code>View</code>的形参，因此传入一个<code>View.class</code>。<br>现在，期望的结果是运行时可以从Log中读取到每个Activity中的所有的TextView的显示内容。<br><strong>但是，因为View中的数据并不一定在<code>setContentView()</code>时就加载完毕，因此小编的实验结果是，log中啥都没有。</strong></p>
<h2 id="意外的收获"><a href="#意外的收获" class="headerlink" title="意外的收获"></a>意外的收获</h2><p>当切换到朋友圈页面时，Xposed模块报了一个异常，异常源从<code>com.tencent.mm.plugin.sns.ui.SnsTimeLineUI</code>这个类捕捉到。从类名上看，这个很有可能是朋友圈首页的UI类。展开这个类，发现更多有趣的东西：<br>这个类下有个子类<code>a</code>(被混淆过的类名)，该子类下有个名为<code>gyO</code>的<code>ListView</code>类的实例。我们知道，<code>ListView</code>是显示列表类的UI组件，有可能就是用来展示朋友圈的列表。</p>
<h2 id="顺藤摸瓜"><a href="#顺藤摸瓜" class="headerlink" title="顺藤摸瓜"></a>顺藤摸瓜</h2><p>那么，我们先要获得一个<code>SnsTimeLineUI.a.gyO</code>的实例。但是在这之前，要先获得一个<code>com.tencent.mm.plugin.sns.ui.SnsTimeLineUI.a</code>的实例。继续搜索，发现<code>com.tencent.mm.plugin.sns.ui.SnsTimeLineUI</code>有一个名为<code>gLZ</code>的<code>SnsTimeLineUI.a</code>实例，那么我们先取得这个实例。</p>
<p>经过测试，<code>com.tencent.mm.plugin.sns.ui.SnsTimeLineUI.a(boolean, boolean, String, boolean)</code>这个方法在每次初始化微信界面的时候都会被调用。因此我们将hook这个方法，并从中取得<code>gLZ</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">findAndHookMethod(<span class="string">"com.tencent.mm.plugin.sns.ui.SnsTimeLineUI"</span>, lpparam.classLoader, <span class="string">"a"</span>, <span class="keyword">boolean</span>.class, <span class="keyword">boolean</span>.class, String.class, <span class="keyword">boolean</span>.class, <span class="keyword">new</span> XC_MethodHook() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        XposedBridge.log(<span class="string">"Hooked. "</span>);</div><div class="line">        Object currentObject = param.thisObject;</div><div class="line">        <span class="keyword">for</span> (Field field : currentObject.getClass().getDeclaredFields()) &#123; <span class="comment">//遍历类成员</span></div><div class="line">            field.setAccessible(<span class="keyword">true</span>);</div><div class="line">            Object value = field.get(currentObject);</div><div class="line">            <span class="keyword">if</span> (field.getName().equals(<span class="string">"gLZ"</span>)) &#123;</div><div class="line">                XposedBridge.log(<span class="string">"Child A found."</span>);</div><div class="line">                childA = value;</div><div class="line">                <span class="comment">//这里获得了gLZ</span></div><div class="line">                ...</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>现在取得了<code>SnsTimeLineUI.a</code>的一个实例<code>gLZ</code>，需要取得这个类下的<code>ListView</code>类型的<code>gyO</code>属性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dealWithA</span><span class="params">()</span> <span class="keyword">throws</span> Throwable</span>&#123;</div><div class="line">    <span class="keyword">if</span> (childA == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (Field field : childA.getClass().getDeclaredFields()) &#123; <span class="comment">//遍历属性</span></div><div class="line">        field.setAccessible(<span class="keyword">true</span>);</div><div class="line">        Object value = field.get(childA);</div><div class="line">        <span class="keyword">if</span> (field.getName().equals(<span class="string">"gyO"</span>)) &#123;  <span class="comment">//取得了gyO</span></div><div class="line">            ViewGroup vg = (ListView)value;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vg.getChildCount(); i++) &#123;  <span class="comment">//遍历这个ListView的每一个子View</span></div><div class="line">                ...</div><div class="line">                View child = vg.getChildAt(i);</div><div class="line">                getAllTextViews(child); <span class="comment">//这里调用上文的getAllTextViews()方法，每一个子View里的所有TextView的文本</span></div><div class="line">                ...</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在已经可以将朋友圈页面中的全部文字信息打印出来了。我们需要根据TextView的子类名判断这些文字是朋友圈内容、好友昵称、点赞或评论等。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dealWithTextView</span><span class="params">(TextView v)</span> </span>&#123;</div><div class="line">        String className = v.getClass().getName();</div><div class="line">        String text = ((TextView)v).getText().toString().trim().replaceAll(<span class="string">"\n"</span>, <span class="string">" "</span>);</div><div class="line">        <span class="keyword">if</span> (!v.isShown())</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (text.equals(<span class="string">""</span>))</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (className.equals(<span class="string">"com.tencent.mm.plugin.sns.ui.AsyncTextView"</span>)) &#123;</div><div class="line">            <span class="comment">//好友昵称</span></div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (className.equals(<span class="string">"com.tencent.mm.plugin.sns.ui.SnsTextView"</span>)) &#123;</div><div class="line">            <span class="comment">//朋友圈文字内容</span></div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (className.equals(<span class="string">"com.tencent.mm.plugin.sns.ui.MaskTextView"</span>)) &#123;</div><div class="line">            <span class="keyword">if</span> (!text.contains(<span class="string">":"</span>)) &#123;</div><div class="line">                <span class="comment">//点赞</span></div><div class="line">                ...</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//评论</span></div><div class="line">                ...</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>自此，我们已经从微信APP里取得了朋友圈数据。当然，这部分抓取代码需要定时执行。因为从<code>ListView</code>中抓到的数据只有当前显示在屏幕上的可见部分，为此需要每隔很短一段时间再次执行，让用户在下滑加载的过程中抓取更多数据。<br>剩下的就是数据分类处理和格式化输出到文件，受本文篇幅所限不再赘述，详细实现可参考作者GitHub上的源码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因微信朋友圈为私有协议，从抓包上分析朋友圈数据几乎不可能，目前也尚未找到开源的抓取朋友圈的脚本。博主于是尝试通过使用安卓下的Xposed框架实现从微信安卓版上抓取朋友圈数据。&lt;br&gt;本文针对微信版本6.3.8。&lt;br&gt;&lt;a href=&quot;https://github.com/
    
    </summary>
    
      <category term="开发笔记" scheme="http://blog.chionlab.moe/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
      <category term="安卓" scheme="http://blog.chionlab.moe/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%AE%89%E5%8D%93/"/>
    
    
      <category term="android" scheme="http://blog.chionlab.moe/tags/android/"/>
    
      <category term="hack" scheme="http://blog.chionlab.moe/tags/hack/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS6上编译安装Python2.7</title>
    <link href="http://blog.chionlab.moe/2016/01/22/python2.7-on-centos6/"/>
    <id>http://blog.chionlab.moe/2016/01/22/python2.7-on-centos6/</id>
    <published>2016-01-21T18:11:53.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考了友站的博文<a href="https://www.starduster.me/2016/01/04/py27-on-centos6/" target="_blank" rel="external">CentOS6上的Python2.7问题</a>，正如所言，在CentOS6上安装Python2.7是非常头疼的问题。友站的这篇博文阐述了如何了从源安装Python2.7，本站则讲述从源码编译安装要注意的问题。<br>编译依赖参考<a href="http://toomuchdata.com/2014/02/16/how-to-install-python-on-centos/" target="_blank" rel="external">How to install Python 2.7 and Python 3.3 on CentOS 6</a>。</p>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p><strong>十分重要:</strong> 编译Python2.7之前务必安装齐必须依赖。在configure过程中，若缺少依赖则不会报错，编译也可顺利通过，但编译出的Python将缺少几个必要模块，导致在运行<code>ez_setup.py</code>时出错。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># yum groupinstall &quot;Development tools&quot;</div><div class="line"># yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</div></pre></td></tr></table></figure>
<h2 id="编译和安装"><a href="#编译和安装" class="headerlink" title="编译和安装"></a>编译和安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ wget http://python.org/ftp/python/2.7.6/Python-2.7.6.tar.xz</div><div class="line">$ tar xf Python-2.7.6.tar.xz</div><div class="line">$ cd Python-2.7.6</div><div class="line">$ ./configure --prefix=/usr/local --enable-unicode=ucs4 --enable-shared LDFLAGS=&quot;-Wl,-rpath /usr/local/lib&quot;</div><div class="line"># make &amp;&amp; make altinstall</div></pre></td></tr></table></figure>
<p>这将会把Python2.7安装在<code>/usr/local/bin/python2.7</code></p>
<h2 id="将默认Python版本从2-6改为2-7"><a href="#将默认Python版本从2-6改为2-7" class="headerlink" title="将默认Python版本从2.6改为2.7"></a>将默认Python版本从2.6改为2.7</h2><p>首先将<code>/usr/bin/python</code>这个软链接指向刚刚安装的Python2.7<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># rm /usr/bin/python</div><div class="line"># ln -s /usr/local/bin/python2.7 /usr/bin/python</div></pre></td></tr></table></figure></p>
<p><strong>重要：</strong> 进行这步操作后，yum会失效，运行即报错。这是因为<code>/usr/bin/yum</code>其实是个python2.6脚本，刚刚安装的python2.7缺少yum的相关依赖。因此需要改动<code>/usr/bin/yum</code>的解释器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># vim /usr/bin/yum</div></pre></td></tr></table></figure></p>
<p>将第一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div></pre></td></tr></table></figure></p>
<p>改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python2.6</div></pre></td></tr></table></figure></p>
<p>现在运行<code>yum --version</code>应该不会再报错</p>
<h2 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py</div><div class="line"># python ez_setup.py</div><div class="line"># easy_install-2.7 pip</div></pre></td></tr></table></figure>
<h2 id="替换默认pip为pip2-7"><a href="#替换默认pip为pip2-7" class="headerlink" title="替换默认pip为pip2.7"></a>替换默认pip为pip2.7</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># vim /usr/bin/pip2.6 #第一行改为#!/usr/bin/python2.6</div><div class="line">$ which pip2.7  #应该返回/usr/local/bin/pip2.7</div><div class="line"># rm /usr/bin/pip</div><div class="line"># ln -s /usr/local/bin/pip2.7 /usr/bin/pip</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考了友站的博文&lt;a href=&quot;https://www.starduster.me/2016/01/04/py27-on-centos6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CentOS6上的Python2.7问题&lt;/a&gt;，正如所言，在Cen
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux/"/>
    
    
      <category term="maintenance" scheme="http://blog.chionlab.moe/tags/maintenance/"/>
    
      <category term="linux" scheme="http://blog.chionlab.moe/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>网易云音乐APP反代开发笔记</title>
    <link href="http://blog.chionlab.moe/2016/01/21/netease-music-app-reversed-proxy/"/>
    <id>http://blog.chionlab.moe/2016/01/21/netease-music-app-reversed-proxy/</id>
    <published>2016-01-21T13:27:50.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几个月网易云音乐下架了一批版权音乐，网页端和手机客户端都无法播放。后来博主通过逆向网页端的JavaScript，写了一个<a href="https://github.com/Chion82/163_music_cracker" target="_blank" rel="external">Chrome插件</a>替换页面JS，使得可以播放下架和收费音乐，但最近网易已修复，插件已失效。（不排除是因为网易更新前端代码时重新构建混淆了JS导致我写的patch失效）。本笔记主要记录移动客户端的反向代理破解方案。</p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/Chion82/163-music-unlock" target="_blank" rel="external">https://github.com/Chion82/163-music-unlock</a></p>
<h2 id="关于下架、收费音乐"><a href="#关于下架、收费音乐" class="headerlink" title="关于下架、收费音乐"></a>关于下架、收费音乐</h2><p>网易云音乐上的每首歌都有唯一ID，通过歌曲ID调用API可获得每个资源文件的ID，将资源文件ID加密后可获取到mp3链接地址，从<a href="https://github.com/darknessomi/musicbox" target="_blank" rel="external">网易云音乐命令行版</a>源码中可获得链接拼接方式。经测试，这样拼接出来链接同样适用于下架和付费音乐。从歌曲ID获取资源文件URL的关键代码如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#代码来自darknessomi/musicbox</span></div><div class="line">...</div><div class="line"><span class="comment"># 歌曲加密算法, 基于https://github.com/yanunon/NeteaseCloudMusic脚本实现</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypted_id</span><span class="params">(id)</span>:</span></div><div class="line">    magic = bytearray(<span class="string">'3go8&amp;$8*3*3h0k(2)2'</span>)</div><div class="line">    song_id = bytearray(id)</div><div class="line">    magic_len = len(magic)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(song_id)):</div><div class="line">        song_id[i] = song_id[i] ^ magic[i % magic_len]</div><div class="line">    m = hashlib.md5(song_id)</div><div class="line">    result = m.digest().encode(<span class="string">'base64'</span>)[:<span class="number">-1</span>]</div><div class="line">    result = result.replace(<span class="string">'/'</span>, <span class="string">'_'</span>)</div><div class="line">    result = result.replace(<span class="string">'+'</span>, <span class="string">'-'</span>)</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">...</div><div class="line"><span class="comment"># song id --&gt; song url ( details )</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">song_detail</span><span class="params">(self, music_id)</span>:</span></div><div class="line">    action = <span class="string">"http://music.163.com/api/song/detail/?id="</span> + str(music_id) + <span class="string">"&amp;ids=["</span> + str(music_id) + <span class="string">"]"</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        data = self.httpRequest(<span class="string">'GET'</span>, action)</div><div class="line">        <span class="keyword">return</span> data[<span class="string">'songs'</span>]</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">return</span> []</div><div class="line">...</div><div class="line"><span class="comment"># 获取高音质mp3 url</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">geturl</span><span class="params">(song)</span>:</span></div><div class="line">    config = Config()</div><div class="line">    quality = Config().get_item(<span class="string">"music_quality"</span>)</div><div class="line">    <span class="keyword">if</span> song[<span class="string">'hMusic'</span>] <span class="keyword">and</span> quality &lt;= <span class="number">0</span>:</div><div class="line">        music = song[<span class="string">'hMusic'</span>]</div><div class="line">...</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> song[<span class="string">'mp3Url'</span>], <span class="string">''</span></div><div class="line">...</div><div class="line">    <span class="comment">#拼接最终资源文件URL</span></div><div class="line">    song_id = str(music[<span class="string">'dfsId'</span>])</div><div class="line">    enc_id = encrypted_id(song_id)</div><div class="line">    url = <span class="string">"http://m%s.music.126.net/%s/%s.mp3"</span> % (random.randrange(<span class="number">1</span>, <span class="number">3</span>), enc_id, song_id)</div><div class="line">    <span class="keyword">return</span> url, quality</div></pre></td></tr></table></figure></p>
<h2 id="移动客户端抓包"><a href="#移动客户端抓包" class="headerlink" title="移动客户端抓包"></a>移动客户端抓包</h2><p>在路由器上运行tcpdump抓包，使用wireshark分析出几个关键API，这些API用于网易云音乐移动客户端（IOS）获取歌曲信息。</p>
<ol>
<li><p>获取播放列表详细信息<br>POST: <a href="http://music.163.com/eapi/v3/playlist/detail/" target="_blank" rel="external">http://music.163.com/eapi/v3/playlist/detail/</a><br>该API返回JSON，经JSON viewer解析后部分内容如下：<br><img src="/images/netease-api-2.png" width="200px"><br>上图privileges数组的每个元素中，”fee”, “payed”, “st”等字段分别标示每首音乐的状态。其中0号元素是下架音乐，3号元素的音乐可正常播放，存在不同的参数一目了然。其中”fee”和”payed”和付费歌曲有关。</p>
</li>
<li><p>获取音乐资源URL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">POST: http://music.163.com/eapi/song/enhance/player/url</div><div class="line">=&gt;</div><div class="line">&#123;&quot;data&quot;:[&#123;&quot;id&quot;:26117507,&quot;url&quot;:&quot;http://m8.music.126.net/20160121231817/b4980525dca8b023c187321115a2463d/ymusic/5e8a/e1af/5a94/bd16133f4ebc8d5a5aaa5a44c6111813.mp3&quot;,&quot;br&quot;:320000,&quot;size&quot;:10722786,&quot;md5&quot;:&quot;bd16133f4ebc8d5a5aaa5a44c6111813&quot;,&quot;code&quot;:200,&quot;expi&quot;:1200,&quot;type&quot;:&quot;mp3&quot;,&quot;gain&quot;:-6.15,&quot;fee&quot;:0,&quot;uf&quot;:null,&quot;payed&quot;:0,&quot;canExtend&quot;:false&#125;],&quot;code&quot;:200&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Hack-the-World"><a href="#Hack-the-World" class="headerlink" title="Hack the World"></a>Hack the World</h2><p>从抓包结果可知，只需更改几个播放列表的参数，客户端即可播放下架和付费音乐。因此需要架设一个反向代理服务器，使用nginx的sub_filter实现文本替换，nginx的关键配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen 80;</div><div class="line">        server_name music.163.com;</div><div class="line">        resolver 114.114.114.114;</div><div class="line">        set $backend_upstream &quot;http://music.163.com&quot;;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">               proxy_pass $backend_upstream;</div><div class="line">               proxy_set_header Host $host;</div><div class="line">               proxy_set_header X-Real-IP $remote_addr;</div><div class="line">               proxy_set_header Accept-Encoding &quot;&quot;; #十分重要，默认为gzip encoding，sub_filter无法识别</div><div class="line">               sub_filter &apos;&quot;st&quot;:-200&apos; &apos;&quot;st&quot;:0&apos;;</div><div class="line">               sub_filter &apos;&quot;st&quot;:-100&apos; &apos;&quot;st&quot;:0&apos;;</div><div class="line">               sub_filter &apos;&quot;st&quot;:-1&apos; &apos;&quot;st&quot;:0&apos;;</div><div class="line">               sub_filter &apos;&quot;st&quot;:-2&apos; &apos;&quot;st&quot;:0&apos;;</div><div class="line">               sub_filter &apos;&quot;st&quot;:-3&apos; &apos;&quot;st&quot;:0&apos;;</div><div class="line">               sub_filter &apos;&quot;pl&quot;:0&apos; &apos;&quot;pl&quot;:320000&apos;;</div><div class="line">               sub_filter &apos;&quot;dl&quot;:0&apos; &apos;&quot;dl&quot;:320000&apos;;</div><div class="line">               sub_filter &apos;&quot;fee&quot;:1&apos; &apos;&quot;fee&quot;:0&apos;;</div><div class="line">               sub_filter &apos;&quot;sp&quot;:0&apos; &apos;&quot;sp&quot;:7&apos;;</div><div class="line">               sub_filter &apos;&quot;cp&quot;:0&apos; &apos;&quot;cp&quot;:1&apos;;</div><div class="line">               sub_filter &apos;&quot;subp&quot;:0&apos; &apos;&quot;subp&quot;:1&apos;;</div><div class="line">               sub_filter &apos;&quot;fl&quot;:0&apos; &apos;&quot;fl&quot;:320000&apos;;</div><div class="line">               sub_filter_once off;</div><div class="line">               sub_filter_types *;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        location /eapi/song/enhance/player/url &#123;  #这里是需要重新拼接歌曲URL的代理，稍后将说明</div><div class="line">               proxy_pass http://localhost:5001;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过几个sub_filter，可将歌曲参数从下架／收费状态更改成普通状态。但是对于下架和收费歌曲，通过 <a href="http://music.163.com/eapi/song/enhance/player/url" target="_blank" rel="external">http://music.163.com/eapi/song/enhance/player/url</a> 这个API无法直接获取到歌曲播放地址，因此需要借助前文提到的URL拼接方法提供新的URL。在清楚歌曲ID加密算法后，在借助Flask的帮助下能快速写出一个API server，在nginx中将相应请求反代到这个API server即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几个月网易云音乐下架了一批版权音乐，网页端和手机客户端都无法播放。后来博主通过逆向网页端的JavaScript，写了一个&lt;a href=&quot;https://github.com/Chion82/163_music_cracker&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="开发笔记" scheme="http://blog.chionlab.moe/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="http://blog.chionlab.moe/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/Python/"/>
    
    
      <category term="hack" scheme="http://blog.chionlab.moe/tags/hack/"/>
    
      <category term="python" scheme="http://blog.chionlab.moe/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ThunderHack开发笔记</title>
    <link href="http://blog.chionlab.moe/2016/01/20/thunderhack-development-log/"/>
    <id>http://blog.chionlab.moe/2016/01/20/thunderhack-development-log/</id>
    <published>2016-01-20T12:32:38.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于ThunderHack"><a href="#关于ThunderHack" class="headerlink" title="关于ThunderHack"></a>关于ThunderHack</h2><p>ThunderHack是一个运行于服务端的Python脚本，模拟用户操作迅雷离线平台，同时运行web server，提供网页端UI和API。该工具由维护者提供大容量离线空间，用户只需直接提交源下载地址（magnet/ed2k/http/https/ftp等），可获取迅雷离线服务器的下载地址，实现免费高速下载。<br><a href="https://github.com/Chion82/ThunderHack.git" target="_blank" rel="external">https://github.com/Chion82/ThunderHack.git</a></p>
<h2 id="CLI版（推荐）"><a href="#CLI版（推荐）" class="headerlink" title="CLI版（推荐）"></a>CLI版（推荐）</h2><p>依赖：Python2.7/3.X, aria2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo pip install xunleishare</div><div class="line">$ xunleishare [-o OUTPUT_SHELL] DOWNLOAD_LINK</div><div class="line">$ ./xunlei_output</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/Chion82/xunlei_share.git" target="_blank" rel="external">https://github.com/Chion82/xunlei_share.git</a></p>
<h2 id="网页端"><a href="#网页端" class="headerlink" title="网页端"></a>网页端</h2><p><a href="http://syslab.ddns.us/thunder_hack" target="_blank" rel="external">http://syslab.ddns.us/thunder_hack</a></p>
<h2 id="开发笔记"><a href="#开发笔记" class="headerlink" title="开发笔记"></a>开发笔记</h2><p>为什么会突然想造这个轮子？一次登陆迅雷离线网页端顺便F12抓的包，发现网页版的API参数无加密且不复杂，可通过程序模拟请求。</p>
<h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><p>从迅雷离线网页端抓取的几个关键API如下：</p>
<ol>
<li><p>BT、magnet查询API</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET: http://dynamic.cloud.vip.xunlei.com/interface/url_query?callback=queryUrl&amp;u=magnet%3A%3Fxt%3Durn%3Abtih%3AMPGNCXWJJZ4XMDQRQB2D6XE4I3U7D74K%26dn%3D%255BMGRT%2526Mabors%2BSub%255DGekijouban%2BAno%2BHi%2BMita%2BHana%2Bno%2BNamae%2Bo%2BBokutachi%2Bwa%2BMada%2BShiranai.%2528BDrip%2B1920x1080%2Bx264%2BFLAC%2BAAC%2BGB%2526BIG5%2526JP%2529%26tr%3Dhttp%253A%252F%252F208.67.16.113%253A8000%252Fannounce%26tr%3Dudp%253A%252F%252F208.67.16.113%253A8000%252Fannounce%26tr%3Dhttp%253A%252F%252Ftracker.openbittorrent.com%253A80%252Fannounce%26tr%3Dhttp%253A%252F%252Ftracker.publicbt.com%253A80%252Fannounce%26tr%3Dhttp%253A%252F%252Ftracker.prq.to%252Fannounce%26tr%3Dhttp%253A%252F%252Ftracker.ktxp.com%253A7070%252Fannounce%26tr%3Dhttp%253A%252F%252Ftracker.ktxp.com%253A6868%252Fannounce%26tr%3Dhttp%253A%252F%252Fopen.nyaatorrents.info%253A6544%252Fannounce%26tr%3Dhttp%253A%252F%252Fbtfile.sdo.com%253A6961%252Fannounce%26tr%3Dhttp%253A%252F%252F121.14.98.151%253A9090%252Fannounce&amp;interfrom=task&amp;random=14394337045561054423.7983869016&amp;tcache=1439433717265</div><div class="line">=&gt;</div><div class="line">queryUrl(1,&apos;MPGNCXWJJZ4XMDQRQB2D6XE4I3U7D74K&apos;,&apos;6229928848&apos;,&apos;[MGRT&amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai.(BDrip 1920x1080 x264 FLAC AAC GB&amp;BIG5&amp;JP)&apos;,&apos;0&apos;,new Array(&apos;Scans\\/Scan_00.png&apos;,&apos;Scans\\/Scan_01.png&apos;,&apos;Scans\\/Scan_02.png&apos;,&apos;Scans\\/Scan_03.png&apos;,&apos;Scans\\/Scan_04.png&apos;,&apos;Scans\\/Scan_05.png&apos;,&apos;Scans\\/Scan_06.png&apos;,&apos;Scans\\/Scan_07.png&apos;,&apos;Scans\\/Scan_08.png&apos;,&apos;Scans\\/Scan_09.png&apos;,&apos;Scans\\/Scan_10.png&apos;,&apos;Scans\\/Scan_11.png&apos;,&apos;Scans\\/Scan_12.png&apos;,&apos;Scans\\/Scan_13.png&apos;,&apos;Scans\\/Scan_14.png&apos;,&apos;Scans\\/Scan_15.png&apos;,&apos;Scans\\/Scan_16.png&apos;,&apos;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai. - Audio 5.1.flac&apos;,&apos;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai. - Menu 01(BDrip 1920x1080 x264 AAC).mkv&apos;,&apos;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai. - Menu 02(BDrip 1920x1080 x264 AAC).mkv&apos;,&apos;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai. - NCOP(BDrip 1920x1080 x264 AAC).mkv&apos;,&apos;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai. - SP 01(BDrip 1920x1080 x264 AAC).mkv&apos;,&apos;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai. - SP 02(BDrip 1920x1080 x264 AAC).mkv&apos;,&apos;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai.(BDrip 1920x1080 x264 FLAC AAC).big5.ass&apos;,&apos;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai.(BDrip 1920x1080 x264 FLAC AAC).gb.ass&apos;,&apos;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai.(BDrip 1920x1080 x264 FLAC AAC).mkv&apos;,&apos;[MGRT][13.08.21] 劇場版「あの日見た花の名前を僕達はまだ知らない。」主題歌 - サークルゲーム【期間生産限定アニメ盤】 歌：Galileo Galilei (ALAC+cue+log+png+DVDISO).rar&apos;,&apos;[MGRT][13.08.28] 劇場版「あの日見た花の名前を僕達はまだ知らない。」オリジナル・サウンドトラック  音楽：REMEDIOS (2ALAC+cue+log+png).rar&apos;,&apos;COMPILATION MUSIC.rar&apos;,&apos;Fonts.rar&apos;),new Array(&apos;3.90M&apos;,&apos;4.32M&apos;,&apos;4.38M&apos;,&apos;3.63M&apos;,&apos;4.29M&apos;,&apos;2.82M&apos;,&apos;1.94M&apos;,&apos;3.70M&apos;,&apos;1.98M&apos;,&apos;3.17M&apos;,&apos;3.87M&apos;,&apos;3.99M&apos;,&apos;2.59M&apos;,&apos;2.41M&apos;,&apos;2.56M&apos;,&apos;1.63M&apos;,&apos;22.7M&apos;,&apos;2.20G&apos;,&apos;9.03M&apos;,&apos;2.68M&apos;,&apos;20.9M&apos;,&apos;139M&apos;,&apos;35.4M&apos;,&apos;142K&apos;,&apos;142K&apos;,&apos;2.30G&apos;,&apos;311M&apos;,&apos;416M&apos;,&apos;379M&apos;,&apos;17.7M&apos;),new Array(&apos;4090243&apos;,&apos;4536547&apos;,&apos;4598479&apos;,&apos;3810200&apos;,&apos;4500046&apos;,&apos;2964511&apos;,&apos;2039023&apos;,&apos;3882558&apos;,&apos;2077791&apos;,&apos;3329777&apos;,&apos;4067333&apos;,&apos;4189214&apos;,&apos;2723186&apos;,&apos;2529606&apos;,&apos;2693052&apos;,&apos;1711549&apos;,&apos;23876871&apos;,&apos;2363024548&apos;,&apos;9474807&apos;,&apos;2818296&apos;,&apos;22001218&apos;,&apos;146039473&apos;,&apos;37178662&apos;,&apos;146284&apos;,&apos;146266&apos;,&apos;2469742194&apos;,&apos;326404175&apos;,&apos;436642897&apos;,&apos;397730513&apos;,&apos;18579515&apos;),new Array(&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;),new Array(&apos;RAR&apos;,&apos;RAR&apos;,&apos;RAR&apos;,&apos;RAR&apos;,&apos;RAR&apos;,&apos;RAR&apos;,&apos;RAR&apos;,&apos;RAR&apos;,&apos;RAR&apos;,&apos;RAR&apos;,&apos;RAR&apos;,&apos;RAR&apos;,&apos;RAR&apos;,&apos;RAR&apos;,&apos;RAR&apos;,&apos;RAR&apos;,&apos;RAR&apos;,&apos;RAR&apos;,&apos;RMVB&apos;,&apos;RMVB&apos;,&apos;RMVB&apos;,&apos;RMVB&apos;,&apos;RMVB&apos;,&apos;RAR&apos;,&apos;RAR&apos;,&apos;RMVB&apos;,&apos;RAR&apos;,&apos;RAR&apos;,&apos;RAR&apos;,&apos;RAR&apos;),new Array(&apos;0&apos;,&apos;1&apos;,&apos;2&apos;,&apos;3&apos;,&apos;4&apos;,&apos;5&apos;,&apos;6&apos;,&apos;7&apos;,&apos;8&apos;,&apos;9&apos;,&apos;10&apos;,&apos;11&apos;,&apos;12&apos;,&apos;13&apos;,&apos;14&apos;,&apos;15&apos;,&apos;16&apos;,&apos;17&apos;,&apos;18&apos;,&apos;19&apos;,&apos;20&apos;,&apos;21&apos;,&apos;22&apos;,&apos;23&apos;,&apos;24&apos;,&apos;25&apos;,&apos;26&apos;,&apos;27&apos;,&apos;28&apos;,&apos;29&apos;),new Array(&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;),&apos;14394337045561054423.7983869016&apos;,&apos;0&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p>提交BT、magnet任务到离线空间</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">POST: http://dynamic.cloud.vip.xunlei.com/interface/bt_task_commit?callback=jsonp1439433353636&amp;t=Thu%20Aug%2013%202015%2010:42:05%20GMT+0800%20(HKT)</div><div class="line">Post field:</div><div class="line">uid:208115253</div><div class="line">btname:[MGRT&amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai.(BDrip 1920x1080 x264 FLAC AAC GB&amp;BIG5&amp;JP)</div><div class="line">cid:MPGNCXWJJZ4XMDQRQB2D6XE4I3U7D74K</div><div class="line">goldbean:0</div><div class="line">silverbean:0</div><div class="line">tsize:6229928848</div><div class="line">findex:17_18_19_20_21_22_23_24_25_26_27_28_29_</div><div class="line">size:2363024548_9474807_2818296_22001218_146039473_37178662_146284_146266_2469742194_326404175_436642897_397730513_18579515_</div><div class="line">o_taskid:0</div><div class="line">o_page:task</div><div class="line">class_id:0</div><div class="line">interfrom:task</div><div class="line">verify_code:</div><div class="line">=&gt;</div><div class="line">jsonp1439433353636(&#123;&quot;id&quot;:&quot;1033432253338880&quot;,&quot;avail_space&quot;:&quot;2249634561012829&quot;,&quot;time&quot;:0.42569899559021,&quot;progress&quot;:1&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>提交普通任务(http/ed2k等)</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET :http://dynamic.cloud.vip.xunlei.com/interface/task_commit?callback=ret_task&amp;uid=208115253&amp;cid=6269CC18A9B66728C1E5A67ACA7523A424513D76&amp;gcid=B06FE736DADEDBA4364348C779E9CC7DC859F17D&amp;size=1073741824&amp;goldbean=0&amp;silverbean=0&amp;t=Wu.Xia.Setup.V1.1.3.2.Full.Client.part02.rar&amp;url=http%3A%2F%2Fgdl.lixian.vip.xunlei.com%2FWu.Xia.Setup.V1.1.3.2.Full.Client.part02.rar%3Ffid%3DYmnMGKm2ZyjB5aZ6ynUjpCRRPXYAAABAAAAAALBv5zba3tukNkNIx3npzH3IWfF9%26mid%3D666%26threshold%3D150%26tid%3D0AAE0146A6116A4BE5B84EE4F9A3D51B%26srcid%3D6%26verno%3D1%26g%3DB06FE736DADEDBA4364348C779E9CC7DC859F17D%26ui%3D208115253%26s%3D1073741824%26pk%3Dkuaichuan%26ak%3D8%3A0%3A999%3A0%26e%3D1439520556%26ms%3D51200%26ci%3D%26ck%3DE3DAEF800B933F3167A0197646D3B4A0%26at%3D1A3E485B19E9EB13EB8C3F11DD7B599F%26hy%3D1%26n%3D0C32B5BC89281E2A5300B4E7A16F29352E54EEA1FF7351427509ACBC922D16616E11EEE2B0330B34324BB2F3A3417F0400&amp;type=0&amp;o_page=history&amp;o_taskid=0&amp;class_id=0&amp;database=undefined&amp;interfrom=task&amp;verify_code=&amp;time=Thu%20Aug%2013%202015%2010:52:54%20GMT+0800%20(HKT)&amp;noCacheIE=1439434374477</div><div class="line">=&gt;</div><div class="line">ret_task(1,&apos;1033437575386368&apos;,&apos;0.2315080165863&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p>翻页查询任务</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET: http://dynamic.cloud.vip.xunlei.com/interface/showtask_unfresh?callback=jsonp1439433877220&amp;t=Thu%20Aug%2013%202015%2010:44:37%20GMT+0800%20(HKT)&amp;type_id=4&amp;page=1&amp;tasknum=30&amp;p=1&amp;interfrom=task</div><div class="line">=&gt;</div><div class="line">queryCid(&apos;6269CC18A9B66728C1E5A67ACA7523A424513D76&apos;, &apos;B06FE736DADEDBA4364348C779E9CC7DC859F17D&apos;, &apos;1073741824&apos;,&apos;2249633487271005&apos;, &apos;Wu.Xia.Setup.V1.1.3.2.Full.Client.part02.rar&apos;, &apos;0&apos;,&apos;0&apos;, 0,&apos;1439434366089947731.337838443&apos;,&apos;rar&apos;,&apos;0&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p>列出BT、magnet任务的文件列表</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET: http://dynamic.cloud.vip.xunlei.com/interface/fill_bt_list?callback=fill_bt_list&amp;tid=1033432253338880&amp;infoid=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;g_net=1&amp;p=1&amp;uid=208115253&amp;interfrom=task&amp;noCacheIE=1439433922810</div><div class="line">=&gt;</div><div class="line">fill_bt_list(&#123;&quot;Result&quot;:&#123;&quot;Tid&quot;:&quot;1033432253338880&quot;,&quot;Infoid&quot;:&quot;63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&quot;,&quot;btnum&quot;:&quot;13&quot;,&quot;btpernum&quot;:30,&quot;now_page&quot;:1,&quot;Record&quot;:[&#123;&quot;id&quot;:0,&quot;title&quot;:&quot;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai. - Audio 5.1.flac&quot;,&quot;download_status&quot;:&quot;2&quot;,&quot;cid&quot;:&quot;99C94A8BDC84DCEAFD7356F232557F27FAF81E43&quot;,&quot;size&quot;:&quot;2.20G&quot;,&quot;percent&quot;:100,&quot;taskid&quot;:&quot;1033432253404480&quot;,&quot;icon&quot;:&quot;RAR&quot;,&quot;livetime&quot;:&quot;365\u5929&quot;,&quot;downurl&quot;:&quot;http:\/\/gdl.lixian.vip.xunlei.com\/download?fid=mclKi9yE3Or9c1byMlV\/J\/r4HkOk5NiMAAAAAM0QeeQUdvGKWARXXwfMCh0lt934&amp;mid=666&amp;threshold=150&amp;tid=493E66D0ECA261B41AA97E8ECE0561AA&amp;srcid=4&amp;verno=1&amp;g=CD1079E41476F18A5804575F07CC0A1D25B7DDF8&amp;scn=t18&amp;i=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;t=6&amp;ui=208115253&amp;ti=1033432253404480&amp;s=2363024548&amp;m=0&amp;n=013A7CA30D54264D61035E962C205375623C768134696A6F7503508A7F416E6F202958C4126974612029508A3E206E6F202F50893E65206F20235E8F2A746163680811933E204D61640011B7376972616E0058CA7F2D20417505588B7F352E312E075D853C00000000&amp;ih=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;fi=17&amp;pi=1033432253338880&amp;ff=0&amp;co=B07951D481443FF3B125AF546C501605&amp;cm=1&amp;pk=lixian&amp;ak=1:0:6:4&amp;e=1447209695&amp;ms=10485760&amp;ck=601902F2D83C9A97ED4E6FAC83FA4010&amp;at=F2191321811F9920CE166300279ABA1B&quot;,&quot;vod&quot;:&quot;0&quot;,&quot;cdn&quot;:[],&quot;format_img&quot;:&quot;other&quot;,&quot;filesize&quot;:&quot;2363024548&quot;,&quot;verify&quot;:&quot;ca609506d44b624fdd0c117da1f843d0&quot;,&quot;url&quot;:&quot;bt:\/\/63CCD15EC94E79760E1180743F5C9C46E9F1FF8A\/17&quot;,&quot;openformat&quot;:&quot;&quot;,&quot;ext&quot;:&quot;flac&quot;,&quot;dirtitle&quot;:&quot;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai. - Audio 5.1.flac&quot;,&quot;is_blocked&quot;:0&#125;,&#123;&quot;id&quot;:1,&quot;title&quot;:&quot;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai. - Menu 01(BDrip 1920x1080 x264 AAC).mkv&quot;,&quot;download_status&quot;:&quot;2&quot;,&quot;cid&quot;:&quot;8B88BA5C635F9E8606A1059AC594A5B62FC5898D&quot;,&quot;size&quot;:&quot;9.03M&quot;,&quot;percent&quot;:100,&quot;taskid&quot;:&quot;1033432253470016&quot;,&quot;icon&quot;:&quot;RMVB&quot;,&quot;livetime&quot;:&quot;365\u5929&quot;,&quot;downurl&quot;:&quot;http:\/\/gdl.lixian.vip.xunlei.com\/download?fid=i4i6XGNfnoYGoQWaxZSlti\/FiY33kpAAAAAAALqMOWwoV6AQ5zopMFal0RP5VQpE&amp;mid=666&amp;threshold=150&amp;tid=B917B3233B55EAA7E6293CEB10D4DA53&amp;srcid=4&amp;verno=1&amp;g=BA8C396C2857A010E73A293056A5D113F9550A44&amp;scn=u2&amp;i=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;t=6&amp;ui=208115253&amp;ti=1033432253470016&amp;s=9474807&amp;m=0&amp;n=013A7CA30D54264D61035E962C205375623C768134696A6F7503508A7F416E6F202958C4126974612029508A3E206E6F202F50893E65206F20235E8F2A746163680811933E204D61640011B7376972616E0058CA7F2D204D650F44C46F312842441358947F313932301900D467302078325705C41E4143292E0C5A925F00000000&amp;ih=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;fi=18&amp;pi=1033432253338880&amp;ff=0&amp;co=8046D92536CB73B6ACA5CDD2E6647C1C&amp;cm=1&amp;pk=lixian&amp;ak=1:0:6:4&amp;e=1447209695&amp;ms=10485760&amp;ck=601902F2D83C9A97ED4E6FAC83FA4010&amp;at=63500B46C3C5A833E454AFE1824E19C4&quot;,&quot;vod&quot;:&quot;1&quot;,&quot;cdn&quot;:[],&quot;format_img&quot;:&quot;video&quot;,&quot;filesize&quot;:&quot;9474807&quot;,&quot;verify&quot;:&quot;f87c5821789304dce494c4430ae5717f&quot;,&quot;url&quot;:&quot;bt:\/\/63CCD15EC94E79760E1180743F5C9C46E9F1FF8A\/18&quot;,&quot;openformat&quot;:&quot;movie&quot;,&quot;ext&quot;:&quot;mkv&quot;,&quot;dirtitle&quot;:&quot;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai. - Menu 01(BDrip 1920x1080 x264 AAC).mkv&quot;,&quot;is_blocked&quot;:0&#125;,&#123;&quot;id&quot;:2,&quot;title&quot;:&quot;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai. - Menu 02(BDrip 1920x1080 x264 AAC).mkv&quot;,&quot;download_status&quot;:&quot;2&quot;,&quot;cid&quot;:&quot;1B9D7D66B87C8B809EE1F7F6844C5E237C1FF5DF&quot;,&quot;size&quot;:&quot;2.68M&quot;,&quot;percent&quot;:100,&quot;taskid&quot;:&quot;1033432253535552&quot;,&quot;icon&quot;:&quot;RMVB&quot;,&quot;livetime&quot;:&quot;365\u5929&quot;,&quot;downurl&quot;:&quot;http:\/\/gdl.lixian.vip.xunlei.com\/download?fid=G519Zrh8i4Ce4ff2hExeI3wf9d\/4ACsAAAAAAODuVHjC9g9eAQ0WVSutnyDl\/wZ\/&amp;mid=666&amp;threshold=150&amp;tid=8449710F1FB9C13B236A932BD0C55BFC&amp;srcid=4&amp;verno=1&amp;g=E0EE5478C2F60F5E010D16552BAD9F20E5FF067F&amp;scn=u1&amp;i=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;t=6&amp;ui=208115253&amp;ti=1033432253535552&amp;s=2818296&amp;m=0&amp;n=013A7CA30D54264D61035E962C205375623C768134696A6F7503508A7F416E6F202958C4126974612029508A3E206E6F202F50893E65206F20235E8F2A746163680811933E204D61640011B7376972616E0058CA7F2D204D650F44C46F322842441358947F313932301900D467302078325705C41E4143292E0C5A925F00000000&amp;ih=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;fi=19&amp;pi=1033432253338880&amp;ff=0&amp;co=0B4508291E892F59357B13FFECFC36CA&amp;cm=1&amp;pk=lixian&amp;ak=1:0:6:4&amp;e=1447209695&amp;ms=10485760&amp;ck=601902F2D83C9A97ED4E6FAC83FA4010&amp;at=614C54E08D0B8BF4975CDAD173051D7F&quot;,&quot;vod&quot;:&quot;1&quot;,&quot;cdn&quot;:[],&quot;format_img&quot;:&quot;video&quot;,&quot;filesize&quot;:&quot;2818296&quot;,&quot;verify&quot;:&quot;f6a67416abd94e12789c8975abb3af3c&quot;,&quot;url&quot;:&quot;bt:\/\/63CCD15EC94E79760E1180743F5C9C46E9F1FF8A\/19&quot;,&quot;openformat&quot;:&quot;movie&quot;,&quot;ext&quot;:&quot;mkv&quot;,&quot;dirtitle&quot;:&quot;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai. - Menu 02(BDrip 1920x1080 x264 AAC).mkv&quot;,&quot;is_blocked&quot;:0&#125;,&#123;&quot;id&quot;:3,&quot;title&quot;:&quot;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai. - NCOP(BDrip 1920x1080 x264 AAC).mkv&quot;,&quot;download_status&quot;:&quot;2&quot;,&quot;cid&quot;:&quot;D9688AA52D48BB24C6CEB4847C17E2FBBEDD6963&quot;,&quot;size&quot;:&quot;20.9M&quot;,&quot;percent&quot;:100,&quot;taskid&quot;:&quot;1033432253601088&quot;,&quot;icon&quot;:&quot;RMVB&quot;,&quot;livetime&quot;:&quot;365\u5929&quot;,&quot;downurl&quot;:&quot;http:\/\/gdl.lixian.vip.xunlei.com\/download?fid=2WiKpS1IuyTGzrSEfBfi+77daWNCtk8BAAAAAGDI6XLMe8VwWyjM2sYD8ZBPeXFp&amp;mid=666&amp;threshold=150&amp;tid=B4071273C65DB771E13977D953D099AC&amp;srcid=4&amp;verno=1&amp;g=60C8E972CC7BC5705B28CCDAC603F1904F797169&amp;scn=u2&amp;i=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;t=6&amp;ui=208115253&amp;ti=1033432253601088&amp;s=22001218&amp;m=0&amp;n=013A7CA30D54264D61035E962C205375623C768134696A6F7503508A7F416E6F202958C4126974612029508A3E206E6F202F50893E65206F20235E8F2A746163680811933E204D61640011B7376972616E0058CA7F2D204E432E61CC1D447269704100DD6D307831305901C427323634202070A7762E6D6B76&amp;ih=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;fi=20&amp;pi=1033432253338880&amp;ff=0&amp;co=89D0B0F90BDB5952CFE0FBE8288D2DDC&amp;cm=1&amp;pk=lixian&amp;ak=1:0:6:4&amp;e=1447209695&amp;ms=10485760&amp;ck=601902F2D83C9A97ED4E6FAC83FA4010&amp;at=1B78AFF7AE5A243001937C0530A8ADB7&quot;,&quot;vod&quot;:&quot;1&quot;,&quot;cdn&quot;:[],&quot;format_img&quot;:&quot;video&quot;,&quot;filesize&quot;:&quot;22001218&quot;,&quot;verify&quot;:&quot;ba0671b7f5bac7ef4a80559408ff5257&quot;,&quot;url&quot;:&quot;bt:\/\/63CCD15EC94E79760E1180743F5C9C46E9F1FF8A\/20&quot;,&quot;openformat&quot;:&quot;movie&quot;,&quot;ext&quot;:&quot;mkv&quot;,&quot;dirtitle&quot;:&quot;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai. - NCOP(BDrip 1920x1080 x264 AAC).mkv&quot;,&quot;is_blocked&quot;:0&#125;,&#123;&quot;id&quot;:4,&quot;title&quot;:&quot;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai. - SP 01(BDrip 1920x1080 x264 AAC).mkv&quot;,&quot;download_status&quot;:&quot;2&quot;,&quot;cid&quot;:&quot;A03B272727AB66B4E6B1146810DDC637DF259AEE&quot;,&quot;size&quot;:&quot;139M&quot;,&quot;percent&quot;:100,&quot;taskid&quot;:&quot;1033432253666624&quot;,&quot;icon&quot;:&quot;RMVB&quot;,&quot;livetime&quot;:&quot;365\u5929&quot;,&quot;downurl&quot;:&quot;http:\/\/gdl.lixian.vip.xunlei.com\/download?fid=oDsnJyerZrTmsRRoEN3GN98lmu6xYrQIAAAAAGLpp9cenPuTuu2gf2ScgFMP9sH\/&amp;mid=666&amp;threshold=150&amp;tid=CE317301A02824D3A70B07E0A3837C98&amp;srcid=4&amp;verno=1&amp;g=62E9A7D71E9CFB93BAEDA07F649C80530FF6C1FF&amp;scn=t36&amp;i=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;t=6&amp;ui=208115253&amp;ti=1033432253666624&amp;s=146039473&amp;m=0&amp;n=013A7CA30D54264D61035E962C205375623C768134696A6F7503508A7F416E6F202958C4126974612029508A3E206E6F202F50893E65206F20235E8F2A746163680811933E204D61640011B7376972616E0058CA7F2D2053504101D577424472691111D566323078315109D47F783236344170A51C292E6D6B1731E45F00000000&amp;ih=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;fi=21&amp;pi=1033432253338880&amp;ff=0&amp;co=F9C243ABFCA7B155387966DEA5F30B94&amp;cm=1&amp;pk=lixian&amp;ak=1:0:6:4&amp;e=1447209695&amp;ms=10485760&amp;ck=601902F2D83C9A97ED4E6FAC83FA4010&amp;at=E31070775C737855FF303FC85840FCEB&quot;,&quot;vod&quot;:&quot;1&quot;,&quot;cdn&quot;:[],&quot;format_img&quot;:&quot;video&quot;,&quot;filesize&quot;:&quot;146039473&quot;,&quot;verify&quot;:&quot;ba279489d6b6ee5f1dd19920bd6b83eb&quot;,&quot;url&quot;:&quot;bt:\/\/63CCD15EC94E79760E1180743F5C9C46E9F1FF8A\/21&quot;,&quot;openformat&quot;:&quot;movie&quot;,&quot;ext&quot;:&quot;mkv&quot;,&quot;dirtitle&quot;:&quot;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai. - SP 01(BDrip 1920x1080 x264 AAC).mkv&quot;,&quot;is_blocked&quot;:0&#125;,&#123;&quot;id&quot;:5,&quot;title&quot;:&quot;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai. - SP 02(BDrip 1920x1080 x264 AAC).mkv&quot;,&quot;download_status&quot;:&quot;2&quot;,&quot;cid&quot;:&quot;B29B36F826CB965DB158A32082D7532D27FF906D&quot;,&quot;size&quot;:&quot;35.4M&quot;,&quot;percent&quot;:100,&quot;taskid&quot;:&quot;1033432253732160&quot;,&quot;icon&quot;:&quot;RMVB&quot;,&quot;livetime&quot;:&quot;365\u5929&quot;,&quot;downurl&quot;:&quot;http:\/\/gdl.lixian.vip.xunlei.com\/download?fid=sps2+CbLll2xWKMggtdTLSf\/kG0mTTcCAAAAAL\/iLScbZ7YtJhoaD4OTklAS\/Mlr&amp;mid=666&amp;threshold=150&amp;tid=3D42AABF47FD03964F44D060361AFF9B&amp;srcid=4&amp;verno=1&amp;g=BFE22D271B67B62D261A1A0F8393925012FCC96B&amp;scn=u2&amp;i=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;t=6&amp;ui=208115253&amp;ti=1033432253732160&amp;s=37178662&amp;m=0&amp;n=013A7CA30D54264D61035E962C205375623C768134696A6F7503508A7F416E6F202958C4126974612029508A3E206E6F202F50893E65206F20235E8F2A746163680811933E204D61640011B7376972616E0058CA7F2D2053504101D677424472691111D566323078315109D47F783236344170A51C292E6D6B1731E45F00000000&amp;ih=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;fi=22&amp;pi=1033432253338880&amp;ff=0&amp;co=889A413CD4946B4AADC203633FB8C90F&amp;cm=1&amp;pk=lixian&amp;ak=1:0:6:4&amp;e=1447209695&amp;ms=10485760&amp;ck=601902F2D83C9A97ED4E6FAC83FA4010&amp;at=1857D940BD6E1F36910AD27BDF4C1586&quot;,&quot;vod&quot;:&quot;1&quot;,&quot;cdn&quot;:[],&quot;format_img&quot;:&quot;video&quot;,&quot;filesize&quot;:&quot;37178662&quot;,&quot;verify&quot;:&quot;498d1349691a6f7ac403b77e063969c2&quot;,&quot;url&quot;:&quot;bt:\/\/63CCD15EC94E79760E1180743F5C9C46E9F1FF8A\/22&quot;,&quot;openformat&quot;:&quot;movie&quot;,&quot;ext&quot;:&quot;mkv&quot;,&quot;dirtitle&quot;:&quot;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai. - SP 02(BDrip 1920x1080 x264 AAC).mkv&quot;,&quot;is_blocked&quot;:0&#125;,&#123;&quot;id&quot;:6,&quot;title&quot;:&quot;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai.(BDrip 1920x1080 x264 FLAC AAC).big5.ass&quot;,&quot;download_status&quot;:&quot;2&quot;,&quot;cid&quot;:&quot;58040A73363D851B245503D2942F8DB4D69CAD5F&quot;,&quot;size&quot;:&quot;142K&quot;,&quot;percent&quot;:100,&quot;taskid&quot;:&quot;1033432253797696&quot;,&quot;icon&quot;:&quot;RAR&quot;,&quot;livetime&quot;:&quot;365\u5929&quot;,&quot;downurl&quot;:&quot;http:\/\/gdl.lixian.vip.xunlei.com\/download?fid=WAQKczY9hRskVQPSlC+NtNacrV9sOwIAAAAAAPkWnP+FfMcK8unvPXNu3uGFMcYF&amp;mid=666&amp;threshold=150&amp;tid=779661D8252B842B5C5980E551F510AE&amp;srcid=4&amp;verno=1&amp;g=F9169CFF857CC70AF2E9EF3D736EDEE18531C605&amp;scn=u1&amp;i=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;t=6&amp;ui=208115253&amp;ti=1033432253797696&amp;s=146284&amp;m=0&amp;n=013A7CA30D54264D61035E962C205375623C768134696A6F7503508A7F416E6F202958C4126974612029508A3E206E6F202F50893E65206F20235E8F2A746163680811933E204D61640011B7376972616E0058CA77424472691111D566323078315109D47F783236344177A81E432041412218CA3D6967352E0042975F00000000&amp;ih=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;fi=23&amp;pi=1033432253338880&amp;ff=0&amp;co=D1601A52F60DA5C28F156B4C36BAADC9&amp;cm=1&amp;pk=lixian&amp;ak=1:0:6:4&amp;e=1447209695&amp;ms=10485760&amp;ck=601902F2D83C9A97ED4E6FAC83FA4010&amp;at=BD2805F1A23E8A3E97F118C54D4AF218&quot;,&quot;vod&quot;:&quot;0&quot;,&quot;cdn&quot;:[],&quot;format_img&quot;:&quot;other&quot;,&quot;filesize&quot;:&quot;146284&quot;,&quot;verify&quot;:&quot;9b12510b53c14701a1a932e3f4efc5c2&quot;,&quot;url&quot;:&quot;bt:\/\/63CCD15EC94E79760E1180743F5C9C46E9F1FF8A\/23&quot;,&quot;openformat&quot;:&quot;&quot;,&quot;ext&quot;:&quot;ass&quot;,&quot;dirtitle&quot;:&quot;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai.(BDrip 1920x1080 x264 FLAC AAC).big5.ass&quot;,&quot;is_blocked&quot;:0&#125;,&#123;&quot;id&quot;:7,&quot;title&quot;:&quot;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai.(BDrip 1920x1080 x264 FLAC AAC).gb.ass&quot;,&quot;download_status&quot;:&quot;2&quot;,&quot;cid&quot;:&quot;B6C5245A9303571FEC5F448504FA2A14D7EFF5A6&quot;,&quot;size&quot;:&quot;142K&quot;,&quot;percent&quot;:100,&quot;taskid&quot;:&quot;1033432253863232&quot;,&quot;icon&quot;:&quot;RAR&quot;,&quot;livetime&quot;:&quot;365\u5929&quot;,&quot;downurl&quot;:&quot;http:\/\/gdl.lixian.vip.xunlei.com\/download?fid=tsUkWpMDVx\/sX0SFBPoqFNfv9aZaOwIAAAAAAPqH9eNTUTK05pyR5gRKcTSOziAj&amp;mid=666&amp;threshold=150&amp;tid=A92E865C2B13D776FDEEC88A1A78C26B&amp;srcid=4&amp;verno=1&amp;g=FA87F5E3535132B4E69C91E6044A71348ECE2023&amp;scn=c14&amp;i=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;t=6&amp;ui=208115253&amp;ti=1033432253863232&amp;s=146266&amp;m=0&amp;n=013A7CA30D54264D61035E962C205375623C768134696A6F7503508A7F416E6F202958C4126974612029508A3E206E6F202F50893E65206F20235E8F2A746163680811933E204D61640011B7376972616E0058CA77424472691111D566323078315109D47F783236344177A81E432041412218CA38622E61731231E45F00000000&amp;ih=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;fi=24&amp;pi=1033432253338880&amp;ff=0&amp;co=7B9E3B8DECBE1272C5AF0F374152C178&amp;cm=1&amp;pk=lixian&amp;ak=1:0:6:4&amp;e=1447209695&amp;ms=10485760&amp;ck=601902F2D83C9A97ED4E6FAC83FA4010&amp;at=549524CF2A45282C5E3B6942EBEA8C83&quot;,&quot;vod&quot;:&quot;0&quot;,&quot;cdn&quot;:[],&quot;format_img&quot;:&quot;other&quot;,&quot;filesize&quot;:&quot;146266&quot;,&quot;verify&quot;:&quot;37e0ce7c27c96aa71cf359f6a571e0e0&quot;,&quot;url&quot;:&quot;bt:\/\/63CCD15EC94E79760E1180743F5C9C46E9F1FF8A\/24&quot;,&quot;openformat&quot;:&quot;&quot;,&quot;ext&quot;:&quot;ass&quot;,&quot;dirtitle&quot;:&quot;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai.(BDrip 1920x1080 x264 FLAC AAC).gb.ass&quot;,&quot;is_blocked&quot;:0&#125;,&#123;&quot;id&quot;:8,&quot;title&quot;:&quot;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai.(BDrip 1920x1080 x264 FLAC AAC).mkv&quot;,&quot;download_status&quot;:&quot;2&quot;,&quot;cid&quot;:&quot;BDE1E4C2E445E03AFE12365C342C425116340423&quot;,&quot;size&quot;:&quot;2.30G&quot;,&quot;percent&quot;:100,&quot;taskid&quot;:&quot;1033432253928768&quot;,&quot;icon&quot;:&quot;RMVB&quot;,&quot;livetime&quot;:&quot;365\u5929&quot;,&quot;downurl&quot;:&quot;http:\/\/gdl.lixian.vip.xunlei.com\/download?fid=veHkwuRF4Dr+EjZcNCxCURY0BCNyRjWTAAAAACMhW\/VIu9RrN1HfSQ3yhtpbeBdO&amp;mid=666&amp;threshold=150&amp;tid=4FE3E9C81AAD65CFE1889B80C14E7351&amp;srcid=4&amp;verno=1&amp;g=23215BF548BBD46B3751DF490DF286DA5B78174E&amp;scn=u2&amp;i=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;t=6&amp;ui=208115253&amp;ti=1033432253928768&amp;s=2469742194&amp;m=0&amp;n=013A7CA30D54264D61035E962C205375623C768134696A6F7503508A7F416E6F202958C4126974612029508A3E206E6F202F50893E65206F20235E8F2A746163680811933E204D61640011B7376972616E0058CA77424472691111D566323078315109D47F783236344177A81E432041412218CA326B760000&amp;ih=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;fi=25&amp;pi=1033432253338880&amp;ff=0&amp;co=4B093BF041312F70C0327DB4D9D745E3&amp;cm=1&amp;pk=lixian&amp;ak=1:0:6:4&amp;e=1447209695&amp;ms=10485760&amp;ck=601902F2D83C9A97ED4E6FAC83FA4010&amp;at=FCA839D230AF7BF499A48287C6FE6361&quot;,&quot;vod&quot;:&quot;1&quot;,&quot;cdn&quot;:[],&quot;format_img&quot;:&quot;video&quot;,&quot;filesize&quot;:&quot;2469742194&quot;,&quot;verify&quot;:&quot;8e99bf5f12b3aae8371ecaa5e2294cae&quot;,&quot;url&quot;:&quot;bt:\/\/63CCD15EC94E79760E1180743F5C9C46E9F1FF8A\/25&quot;,&quot;openformat&quot;:&quot;movie&quot;,&quot;ext&quot;:&quot;mkv&quot;,&quot;dirtitle&quot;:&quot;[MGRT&amp;amp;Mabors Sub]Gekijouban Ano Hi Mita Hana no Namae o Bokutachi wa Mada Shiranai.(BDrip 1920x1080 x264 FLAC AAC).mkv&quot;,&quot;is_blocked&quot;:0&#125;,&#123;&quot;id&quot;:9,&quot;title&quot;:&quot;[MGRT][13.08.21] \u5287\u5834\u7248\u300c\u3042\u306e\u65e5\u898b\u305f\u82b1\u306e\u540d\u524d\u3092\u50d5\u9054\u306f\u307e\u3060\u77e5\u3089\u306a\u3044\u3002\u300d\u4e3b\u984c\u6b4c - \u30b5\u30fc\u30af\u30eb\u30b2\u30fc\u30e0\u3010\u671f\u9593\u751f\u7523\u9650\u5b9a\u30a2\u30cb\u30e1\u76e4\u3011 \u6b4c\uff1aGalileo Galilei (ALAC+cue+log+png+DVDISO).rar&quot;,&quot;download_status&quot;:&quot;2&quot;,&quot;cid&quot;:&quot;C0466CBD1B0D6B7A68D7D0381BE33FFAA40268FD&quot;,&quot;size&quot;:&quot;311M&quot;,&quot;percent&quot;:100,&quot;taskid&quot;:&quot;1033432253994304&quot;,&quot;icon&quot;:&quot;RAR&quot;,&quot;livetime&quot;:&quot;365\u5929&quot;,&quot;downurl&quot;:&quot;http:\/\/gdl.lixian.vip.xunlei.com\/download?fid=wEZsvRsNa3po19A4G+M\/+qQCaP1PiHQTAAAAAAyccZr4L96XOemFf+gPmdBnVNkD&amp;mid=666&amp;threshold=150&amp;tid=1718B0786966239C73B33F3A785E6EDB&amp;srcid=4&amp;verno=1&amp;g=0C9C719AF82FDE9739E9857FE80F99D06754D903&amp;scn=u2&amp;i=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;t=6&amp;ui=208115253&amp;ti=1033432253994304&amp;s=326404175&amp;m=0&amp;n=013A7CA30D545D5B31521FD4672E32315D41B545D7F6B0E6A1D99546FBCEC8D5D2EB955BE4A8A4CEC39AF654FBF28357DF3E952BFBDEA4C0D6CB950DFBCAA4A4A1C2905D89F7EE7DB88911C97FA5B5A960C49E41B4A5B2A960C4D145E1C6DAE967A8CB4A3DCFDEB6A8C4934194A5E1B150C08EC4E7E8A3BA47005D8D33656F2047005D8D3365692028207DA51C2B6375654A5D8B382B706E674A75B21B49534F294F43852D00000000&amp;ih=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;fi=26&amp;pi=1033432253338880&amp;ff=0&amp;co=B3328ED373BAC2FF1024FC7FA827030F&amp;cm=1&amp;pk=lixian&amp;ak=1:0:6:4&amp;e=1447209695&amp;ms=10485760&amp;ck=601902F2D83C9A97ED4E6FAC83FA4010&amp;at=B8D80E30FE9B3484F034C1817B6184FE&quot;,&quot;vod&quot;:&quot;0&quot;,&quot;cdn&quot;:[],&quot;format_img&quot;:&quot;rar&quot;,&quot;filesize&quot;:&quot;326404175&quot;,&quot;verify&quot;:&quot;baf437596d3fc8579a37c83b3cf221c3&quot;,&quot;url&quot;:&quot;bt:\/\/63CCD15EC94E79760E1180743F5C9C46E9F1FF8A\/26&quot;,&quot;openformat&quot;:&quot;rar&quot;,&quot;ext&quot;:&quot;rar&quot;,&quot;dirtitle&quot;:&quot;[MGRT][13.08.21] \u5287\u5834\u7248\u300c\u3042\u306e\u65e5\u898b\u305f\u82b1\u306e\u540d\u524d\u3092\u50d5\u9054\u306f\u307e\u3060\u77e5\u3089\u306a\u3044\u3002\u300d\u4e3b\u984c\u6b4c - \u30b5\u30fc\u30af\u30eb\u30b2\u30fc\u30e0\u3010\u671f\u9593\u751f\u7523\u9650\u5b9a\u30a2\u30cb\u30e1\u76e4\u3011 \u6b4c\uff1aGalileo Galilei (ALAC+cue+log+png+DVDISO).rar&quot;,&quot;is_blocked&quot;:0&#125;,&#123;&quot;id&quot;:10,&quot;title&quot;:&quot;[MGRT][13.08.28] \u5287\u5834\u7248\u300c\u3042\u306e\u65e5\u898b\u305f\u82b1\u306e\u540d\u524d\u3092\u50d5\u9054\u306f\u307e\u3060\u77e5\u3089\u306a\u3044\u3002\u300d\u30aa\u30ea\u30b8\u30ca\u30eb\u30fb\u30b5\u30a6\u30f3\u30c9\u30c8\u30e9\u30c3\u30af  \u97f3\u697d\uff1aREMEDIOS (2ALAC+cue+log+png).rar&quot;,&quot;download_status&quot;:&quot;2&quot;,&quot;cid&quot;:&quot;CAF507BFEE8196790C8EE2792FEBB3E5F388AD8E&quot;,&quot;size&quot;:&quot;416M&quot;,&quot;percent&quot;:100,&quot;taskid&quot;:&quot;1033432254059840&quot;,&quot;icon&quot;:&quot;RAR&quot;,&quot;livetime&quot;:&quot;365\u5929&quot;,&quot;downurl&quot;:&quot;http:\/\/gdl.lixian.vip.xunlei.com\/download?fid=yvUHv+6BlnkMjuJ5L+uz5fOIrY5RpAYaAAAAAAoMmWGcbjxRxE0lO1jOQuDQ0NjK&amp;mid=666&amp;threshold=150&amp;tid=9688E18D6FEFC21A44AE91EBADF72319&amp;srcid=4&amp;verno=1&amp;g=0A0C99619C6E3C51C44D253B58CE42E0D0D0D8CA&amp;scn=u2&amp;i=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;t=6&amp;ui=208115253&amp;ti=1033432254059840&amp;s=436642897&amp;m=0&amp;n=013A7CA30D545D5B31521FD4672E32385D41B545D7F6B0E6A1D99546FBCEC8D5D2EB955BE4A8A4CEC39AF654FBF28357DF3E952BFBDEA4C0D6CB950DFBCAA4A4A1C2905DFAAAA5EAA5D9942EFAEB8139A7589451FAA6A5F3A5A8942CFAE9A5C3A5CE11C48DF49853A3DB63A1124544494F3211CC6D414C41434A52913A2B6C6F674A418A38292E72611331E45F00000000&amp;ih=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;fi=27&amp;pi=1033432253338880&amp;ff=0&amp;co=BA5C3D395BA72264D88E28AA2F830C15&amp;cm=1&amp;pk=lixian&amp;ak=1:0:6:4&amp;e=1447209695&amp;ms=10485760&amp;ck=601902F2D83C9A97ED4E6FAC83FA4010&amp;at=55AFB0FBED521F5190BEEB103739B7F0&quot;,&quot;vod&quot;:&quot;0&quot;,&quot;cdn&quot;:[],&quot;format_img&quot;:&quot;rar&quot;,&quot;filesize&quot;:&quot;436642897&quot;,&quot;verify&quot;:&quot;21f40dbe89d38e1f73048e25542313c7&quot;,&quot;url&quot;:&quot;bt:\/\/63CCD15EC94E79760E1180743F5C9C46E9F1FF8A\/27&quot;,&quot;openformat&quot;:&quot;rar&quot;,&quot;ext&quot;:&quot;rar&quot;,&quot;dirtitle&quot;:&quot;[MGRT][13.08.28] \u5287\u5834\u7248\u300c\u3042\u306e\u65e5\u898b\u305f\u82b1\u306e\u540d\u524d\u3092\u50d5\u9054\u306f\u307e\u3060\u77e5\u3089\u306a\u3044\u3002\u300d\u30aa\u30ea\u30b8\u30ca\u30eb\u30fb\u30b5\u30a6\u30f3\u30c9\u30c8\u30e9\u30c3\u30af  \u97f3\u697d\uff1aREMEDIOS (2ALAC+cue+log+png).rar&quot;,&quot;is_blocked&quot;:0&#125;,&#123;&quot;id&quot;:11,&quot;title&quot;:&quot;COMPILATION MUSIC.rar&quot;,&quot;download_status&quot;:&quot;2&quot;,&quot;cid&quot;:&quot;E2E717DA7A121A9ADE4EC07F942D0629F619CA48&quot;,&quot;size&quot;:&quot;379M&quot;,&quot;percent&quot;:100,&quot;taskid&quot;:&quot;1033432254125376&quot;,&quot;icon&quot;:&quot;RAR&quot;,&quot;livetime&quot;:&quot;365\u5929&quot;,&quot;downurl&quot;:&quot;http:\/\/gdl.lixian.vip.xunlei.com\/download?fid=4ucX2noSGpreTsB\/lC0GKfYZykjR4rQXAAAAAPcL77QMfZKZQ3\/UjmC\/3PfYfwT4&amp;mid=666&amp;threshold=150&amp;tid=140792B8B9FDBD3D9883D38634532C7F&amp;srcid=4&amp;verno=1&amp;g=F70BEFB40C7D9299437FD48E60BFDCF7D87F04F8&amp;scn=u2&amp;i=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;t=6&amp;ui=208115253&amp;ti=1033432254125376&amp;s=397730513&amp;m=0&amp;n=01227EA90F494C4154287EAA7F4D555349221F963E72000000&amp;ih=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;fi=28&amp;pi=1033432253338880&amp;ff=0&amp;co=9191E0BE47AF5E75280AF8D3C45725CB&amp;cm=1&amp;pk=lixian&amp;ak=1:0:6:4&amp;e=1447209695&amp;ms=10485760&amp;ck=601902F2D83C9A97ED4E6FAC83FA4010&amp;at=C8A9FBFE2116F272CE722B5D25AAC2CF&quot;,&quot;vod&quot;:&quot;0&quot;,&quot;cdn&quot;:[],&quot;format_img&quot;:&quot;rar&quot;,&quot;filesize&quot;:&quot;397730513&quot;,&quot;verify&quot;:&quot;00f7b749c39934c8aa438ed10b4ce115&quot;,&quot;url&quot;:&quot;bt:\/\/63CCD15EC94E79760E1180743F5C9C46E9F1FF8A\/28&quot;,&quot;openformat&quot;:&quot;rar&quot;,&quot;ext&quot;:&quot;rar&quot;,&quot;dirtitle&quot;:&quot;COMPILATION MUSIC.rar&quot;,&quot;is_blocked&quot;:0&#125;,&#123;&quot;id&quot;:12,&quot;title&quot;:&quot;Fonts.rar&quot;,&quot;download_status&quot;:&quot;2&quot;,&quot;cid&quot;:&quot;75F5BA6F476120B3663BB96F460D39C337111440&quot;,&quot;size&quot;:&quot;17.7M&quot;,&quot;percent&quot;:100,&quot;taskid&quot;:&quot;1033432254190912&quot;,&quot;icon&quot;:&quot;RAR&quot;,&quot;livetime&quot;:&quot;365\u5929&quot;,&quot;downurl&quot;:&quot;http:\/\/gdl.lixian.vip.xunlei.com\/download?fid=dfW6b0dhILNmO7lvRg05wzcRFEA7gBsBAAAAAHnPF0NBEx0oMYs70Hu9Wqg\/a0Q+&amp;mid=666&amp;threshold=150&amp;tid=CE4019E6D03E3A16451051D09D531008&amp;srcid=4&amp;verno=1&amp;g=79CF174341131D28318B3BD07BBD5AA83F6B443E&amp;scn=u2&amp;i=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;t=6&amp;ui=208115253&amp;ti=1033432254190912&amp;s=18579515&amp;m=0&amp;n=01275E8A2B732E72611331E45F00000000&amp;ih=63CCD15EC94E79760E1180743F5C9C46E9F1FF8A&amp;fi=29&amp;pi=1033432253338880&amp;ff=0&amp;co=B3789EBC09FF1DFE5557FDEFBCE51DDC&amp;cm=1&amp;pk=lixian&amp;ak=1:0:6:4&amp;e=1447209695&amp;ms=10485760&amp;ck=601902F2D83C9A97ED4E6FAC83FA4010&amp;at=2D70E9E97F5E0CC55DCDC8B6905B50CB&quot;,&quot;vod&quot;:&quot;0&quot;,&quot;cdn&quot;:[],&quot;format_img&quot;:&quot;rar&quot;,&quot;filesize&quot;:&quot;18579515&quot;,&quot;verify&quot;:&quot;a3d729967d842fed18c7b36308339b25&quot;,&quot;url&quot;:&quot;bt:\/\/63CCD15EC94E79760E1180743F5C9C46E9F1FF8A\/29&quot;,&quot;openformat&quot;:&quot;rar&quot;,&quot;ext&quot;:&quot;rar&quot;,&quot;dirtitle&quot;:&quot;Fonts.rar&quot;,&quot;is_blocked&quot;:0&#125;]&#125;&#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>更多XHR示例可在github项目的xhr-sample目录中找到。</p>
<h3 id="关于迅雷离线的登录验证方式"><a href="#关于迅雷离线的登录验证方式" class="headerlink" title="关于迅雷离线的登录验证方式"></a>关于迅雷离线的登录验证方式</h3><p>一开始我未找到模拟登录迅雷离线的方法，是通过人工登录获取cookie的方式实现的。后来我将登录页面的JS beautify之后，找到了登录API及相应加密算法。用户密码加密基于RSA。我用nodejs+express实现了一个加密密码的API，关键代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/api/crypto/rsa_encrypt.do'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> kn = req.query.check_n || <span class="string">'123'</span>;</div><div class="line">    <span class="keyword">var</span> ke = req.query.check_e || <span class="string">'123'</span>;</div><div class="line">    <span class="keyword">var</span> captcha = req.query.captcha || <span class="string">'123'</span>;</div><div class="line">    <span class="keyword">var</span> pwd = req.query.pwd || <span class="string">'123'</span>;</div><div class="line">    <span class="keyword">var</span> rsa = <span class="keyword">new</span> RSAKey();</div><div class="line">    rsa.setPublic(b64tohex(kn), b64tohex(ke));</div><div class="line">    <span class="keyword">var</span> code = captcha.toUpperCase();</div><div class="line">    <span class="keyword">var</span> encrypted_pwd = hex2b64(rsa.encrypt(md5(pwd) + code));</div><div class="line">    res.json(&#123;<span class="string">'encrypted_pwd'</span>:encrypted_pwd&#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="离线服务器的验证"><a href="#离线服务器的验证" class="headerlink" title="离线服务器的验证"></a>离线服务器的验证</h3><p>服务端脚本获取到离线下载地址后，需要弄清楚如何让用户能直接用这个链接下载。当然不能直接将服务器通过模拟登录获取到的cookie直接返回给用户。经过测试，发现用户只需要在cookie中提供正确的gdriveid的值，离线服务器就允许用户下载，因此服务器脚本需要返回该值。<br>要实现此功能，服务端脚本关键代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#从文件中读入模拟请求所需cookie</span></div><div class="line">cookie = str(open(<span class="string">'cookie.txt'</span>,<span class="string">'rb'</span>).read()).replace(<span class="string">'\n'</span>,<span class="string">''</span>)</div><div class="line">...</div><div class="line"><span class="comment">#从cookie中提取gdriveid字段</span></div><div class="line">app.config[<span class="string">'thunder_gdriveid'</span>] = re.search(<span class="string">r'gdriveid=(\w+?);'</span>, cookie).group(<span class="number">1</span>)</div><div class="line"><span class="comment">#用于返回gdriveid的API</span></div><div class="line"><span class="meta">@app.route('/api/gdriveid', methods=['GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">API_get_gdriveid</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> jsonify(&#123;<span class="string">'gdriveid'</span>:app.config[<span class="string">'thunder_gdriveid'</span>]&#125;)</div></pre></td></tr></table></figure></p>
<p>用户只需在Aria2请求中带上此cookie即可。在用户端生成的Aria2命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aria2c -c -s10 -x10 --header &quot;Cookie: gdriveid=XXXXX;&quot; -o &quot;filename.XXX&quot; &quot;http://gdl.lixian.vip.xunlei.com/download?...&quot;</div></pre></td></tr></table></figure></p>
<h3 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h3><p>使用Flask框架实现了API server，写了个简易的网页版前端。在API抓到并分析清楚后已没有多大难度，用requests实现模拟操作即可。有以下几点需要注意：  </p>
<ul>
<li>虽尚不明确迅雷离线网页端的登录过期时间是多少，但实验发现若服务器脚本长时间不进行重新登录，模拟请求失败率升高，因此使用cron实现每天定时重新模拟登录一次，获取新的cookie。</li>
<li>服务器需要拥有国内IP，若使用境外VPS做服务器，向迅雷服务器发出的请求很容易被reset。原因未明。</li>
<li>受服务器网络状况影响，单次请求可能耗时较长，为了提高性能，用gunicorn、uwsgi等容器来跑web server。</li>
</ul>
<h3 id="CLI客户端"><a href="#CLI客户端" class="headerlink" title="CLI客户端"></a>CLI客户端</h3><p>对于linux和mac，使用CLI更为方便。目前已上线CLI客户端，python实现，已上传pypi，通过pip可快速安装。使用详情见 <a href="https://github.com/Chion82/xunlei_share.git" target="_blank" rel="external">https://github.com/Chion82/xunlei_share.git</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于ThunderHack&quot;&gt;&lt;a href=&quot;#关于ThunderHack&quot; class=&quot;headerlink&quot; title=&quot;关于ThunderHack&quot;&gt;&lt;/a&gt;关于ThunderHack&lt;/h2&gt;&lt;p&gt;ThunderHack是一个运行于服务端的Pytho
    
    </summary>
    
      <category term="开发笔记" scheme="http://blog.chionlab.moe/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="http://blog.chionlab.moe/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/Python/"/>
    
    
      <category term="hack" scheme="http://blog.chionlab.moe/tags/hack/"/>
    
      <category term="python" scheme="http://blog.chionlab.moe/tags/python/"/>
    
      <category term="crawler" scheme="http://blog.chionlab.moe/tags/crawler/"/>
    
  </entry>
  
  <entry>
    <title>PixivHack：记P站爬图脚本开发</title>
    <link href="http://blog.chionlab.moe/2016/01/20/pixivhack-development-log/"/>
    <id>http://blog.chionlab.moe/2016/01/20/pixivhack-development-log/</id>
    <published>2016-01-19T17:28:14.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于7月学校考试，预习功课有点忙，最近又忙着做外包，一直都忘了维护博客，所以现在补上上个月本来应该写的技术博文。</p>
<h1 id="这是啥"><a href="#这是啥" class="headerlink" title="这是啥"></a>这是啥</h1><p>跟生活在2.5次元的老司机混久了便跟着入了ACG坑（看到本站首页LL大法时您应该意识到了，博主是个死宅<em>(:з」∠)</em> ）。P站找图是每一个ACG爱好者的必备技能，然而像我这种刚入坑不久的，收藏的画师才几个，再者没有钱买Premium，不能按人气选图，每次找图都要手动一页一页翻(╯‵□′)╯︵┻━┻ 于是我想用Py写个自动爬图脚本。这个脚本可以按你输入的关键词搜索作品，并根据Rating（评分次数，以此来判断作品人气）的最小值来筛选并自动下载，也可以手动指定画师ID列表，也是按照设定最小Rating的方法下载每个画师的图。目前支持下载插画、漫画和大图。</p>
<h1 id="你为什么还不用！"><a href="#你为什么还不用！" class="headerlink" title="你为什么还不用！"></a>你为什么还不用！</h1><p><a href="https://github.com/Chion82/PixivHack.git" target="_blank" rel="external">GitHub链接</a><br>使用方法详见README.md</p>
<h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><ul>
<li>要从P站搜图首先要登录。我原来的设想是通过抓包直接用Py模拟登录，但是不出所料，P站的登录API参数都是经过加密的（貌似是基于RSA的），在不知加密算法的情况下无法实现。（虽然在另一个开源项目中我已经能够分析登录部分的JS加密逻辑，但在那之前我还是懒得审查JS）<br>于是目前的解决方案是要求用户在浏览器登录进P站一次，通过浏览器debugger获取Cookies中的PHPSESSID的值并输入到脚本中，脚本向P站发出的每次http请求都要带上该Cookie，目的是让P站服务器认为我们已经登录。<br>下面贴一行每次请求带上Cookie的代码  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">search_result = self.__session.get(<span class="string">'http://www.pixiv.net/search.php?word='</span> + urllib.quote(self.__keyword) + <span class="string">'&amp;p='</span> + str(page), cookies=&#123;<span class="string">'PHPSESSID'</span>: self.__session_id&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>更好的方法：在requests的session中通过headers.update()方法在Header中设置Cookie，该session的每次请求都能自动带上该header，这样就不需要每次都在请求中加上cookies参数</strong></p>
<ul>
<li><p>从HTML源码中提取有用数据：虽然Python中可以使用HTMLParser更灵活地分析HTML，但是由于不想在这个小项目上浪费太多时间，我直接用正则从HTML中匹配。这里贴一行匹配作品搜索列表的代码：  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result_list = re.findall(<span class="string">r'&lt;a href="(/member_illust\.php\?mode=.*?&amp;amp;illust_id=.*?)"&gt;'</span>, search_result.text)</div></pre></td></tr></table></figure>
</li>
<li><p>自动脚本的流程是：获取作品搜索结果页面，从每个搜索结果分别进入作品首页，判断Rating是否高于设定的最小值（若低于则跳过该作品），判断作品类型（插画/漫画/大图）并根据不同的流程进入作品二级页面并获取原图的URL</p>
</li>
<li><p>绕过P站的防Bot机制：P站的原图不可直接下载。用户在浏览器中访问原图链接时，浏览器会自动加上Refer这个HTTP头，P站图片服务器会验证Refer是否合法。所以，脚本在访问原图链接并下载时，也需要在header中带上Refer。经过测试，Refer的值为作品首页或者作品二级页的URL。总之，在下载原图时带上当前页面（也就是HTML中能找到原图src的页面）的URL作为Refer就不会出问题。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">download_result = self.__session.get(url, cookies=&#123;<span class="string">'PHPSESSID'</span>: self.__session_id&#125;, headers=&#123;<span class="string">'Referer'</span>:referer&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>连接失败处理：经过测试，在长时间连续爬图时很有可能会有一两次requests请求超时（不排除是天朝某墙的TCP RST所致，也有可能是requests2.0在同域下长时间保持单TCP连接使P站服务器拒绝所致），因此，requests每次发出http请求时，都应该用try…except捕获超时异常并重试。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">	page_result = self.__session.get(url, cookies=&#123;<span class="string">'PHPSESSID'</span>: self.__session_id&#125;, headers=&#123;<span class="string">'Referer'</span>:referer&#125;)</div><div class="line"><span class="keyword">except</span> Exception:</div><div class="line">	print(<span class="string">'Connection failure. Retrying...'</span>)</div><div class="line">	self.__enter_manga_big_page(url, referer, directory)</div><div class="line">	<span class="keyword">return</span></div></pre></td></tr></table></figure>
</li>
<li><p>统计画师总评分数：按关键词爬完一波图后，需要统计所爬的每个画师的ID、Rating等值，方便我们之后能收藏人气高的画师。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__increment_author_ratings</span><span class="params">(self, author_id, increment, pixiv_id)</span>:</span></div><div class="line">	<span class="keyword">for</span> author <span class="keyword">in</span> self.__author_ratings:</div><div class="line">		<span class="keyword">if</span> (author[<span class="string">'author_id'</span>] == author_id):</div><div class="line">			<span class="keyword">if</span> (pixiv_id <span class="keyword">in</span> author[<span class="string">'illust_id'</span>]):</div><div class="line">				<span class="keyword">return</span></div><div class="line">			author[<span class="string">'total_ratings'</span>] = author[<span class="string">'total_ratings'</span>] + increment</div><div class="line">			author[<span class="string">'illust_id'</span>].append(pixiv_id)</div><div class="line">			<span class="keyword">return</span></div><div class="line">	self.__author_ratings.append(&#123;<span class="string">'author_id'</span>:author_id, <span class="string">'total_ratings'</span>:increment, <span class="string">'illust_id'</span>:[pixiv_id]&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>用户交互：用argparse实现CLI参数传入分析。在本脚本中，通过”-a”或”–authorlist”参数指定存储了画师ID列表的JSON文件。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">parser = argparse.ArgumentParser()</div><div class="line">parser.add_argument(<span class="string">'-a'</span>, <span class="string">'--authorlist'</span>, help=<span class="string">'Crawl illustrations by author IDs. A JSON file containg the list of Pixiv member IDs is required.'</span>)</div><div class="line">args = parser.parse_args()</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于7月学校考试，预习功课有点忙，最近又忙着做外包，一直都忘了维护博客，所以现在补上上个月本来应该写的技术博文。&lt;/p&gt;
&lt;h1 id=&quot;这是啥&quot;&gt;&lt;a href=&quot;#这是啥&quot; class=&quot;headerlink&quot; title=&quot;这是啥&quot;&gt;&lt;/a&gt;这是啥&lt;/h1&gt;&lt;p&gt;跟生
    
    </summary>
    
      <category term="开发笔记" scheme="http://blog.chionlab.moe/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="http://blog.chionlab.moe/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/Python/"/>
    
    
      <category term="python" scheme="http://blog.chionlab.moe/tags/python/"/>
    
      <category term="crawler" scheme="http://blog.chionlab.moe/tags/crawler/"/>
    
  </entry>
  
  <entry>
    <title>Using Gulp to Simplify Front end Development Workflow</title>
    <link href="http://blog.chionlab.moe/2016/01/20/Using-Gulp-to-Simplify-Front-end-Development-Workflow/"/>
    <id>http://blog.chionlab.moe/2016/01/20/Using-Gulp-to-Simplify-Front-end-Development-Workflow/</id>
    <published>2016-01-19T17:20:18.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-is-Gulp"><a href="#What-is-Gulp" class="headerlink" title="What is Gulp"></a>What is Gulp</h1><p>Gulp is a streaming build system which is usually used to simplify front-end development workflow, such as automatically minifying JavaScript or compiling LESS. In this tutorial, you’ll learn the basic usage of Gulp.</p>
<h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>To make sure you’ll have fun following my instructions, I assume you:</p>
<ul>
<li>have node.js &amp; npm installed</li>
<li>have basic knowledge of node.js scripting.</li>
</ul>
<h1 id="Installing-Gulp"><a href="#Installing-Gulp" class="headerlink" title="Installing Gulp"></a>Installing Gulp</h1><p>Let’s start with the installation of Gulp.<br>Run the following command in your shell terminal. The installation requires sudo or root previlege and you may be required to enter the password.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install --global gulp</div></pre></td></tr></table></figure></p>
<h1 id="Project-Setup"><a href="#Project-Setup" class="headerlink" title="Project Setup"></a>Project Setup</h1><p><code>cd</code> into the root directory of your project and run the following command, which will save the Gulp dependencies in your project directory.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev gulp</div></pre></td></tr></table></figure></p>
<h1 id="Create-gulpfile-js"><a href="#Create-gulpfile-js" class="headerlink" title="Create gulpfile.js"></a>Create gulpfile.js</h1><p>At the root of your project, create a <code>gulpfile.js</code> containing the following code.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'mytask'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line"> 	<span class="comment">//All task code places here  </span></div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Hello World!'</span>);  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>The code above defines a gulp task named “mytask” with the detailed commands defined in the callback function as the second parameter passed to the <code>gulp.task()</code> method. When running this task, <code>console.log(&#39;Hello World!&#39;);</code> will be executed.</p>
<h1 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h1><p>Now you should be able to run <code>mytask</code> using the following command:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp mytask</div></pre></td></tr></table></figure></p>
<p>Assume the root directory of your project is <code>~/project</code>, the output should be like:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  project  gulp mytask</div><div class="line">[21:14:25] Using gulpfile ~/project/gulpfile.js</div><div class="line">[21:14:25] Starting <span class="string">'mytask'</span>...</div><div class="line">Hello World!</div><div class="line">[21:14:25] Finished <span class="string">'mytask'</span> after 62 μs</div></pre></td></tr></table></figure></p>
<p>You can always run specific tasks by executing <code>gulp &lt;task&gt; &lt;other_task&gt;</code></p>
<h1 id="Basic-File-Streaming"><a href="#Basic-File-Streaming" class="headerlink" title="Basic File Streaming"></a>Basic File Streaming</h1><p>In this section we’ll use Gulp’s streaming system which is its primary function.<br>We will use <code>Gulp.src()</code>, <code>Gulp.dest()</code>, <code>readable.pipe()</code> to implement a basic JavaScript source file copying program using Gulp.<br>For detailed API doc of the methods above, please refer to <a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md" target="_blank" rel="external">Gulp API doc</a> and <a href="https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options" target="_blank" rel="external">Node.js:Stream</a>.  </p>
<ul>
<li>Create a directory named <code>js</code> at the root of your project (Assume you created this directory: <code>~/project/js</code>) and place some JavaScript files in it.  </li>
<li><p>Add the following code at the end of <code>gulpfile.js</code>  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'copyjs'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        gulp.src(<span class="string">'js/*.js'</span>)</div><div class="line">           .pipe(gulp.dest(<span class="string">'dest'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>At the root of the project which is <code>~/project</code>, run:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp copyjs</div></pre></td></tr></table></figure>
</li>
<li><p>Check out <code>~/project/dest</code> to which you’ll find all js files in <code>~/project/js</code> are copied.</p>
</li>
</ul>
<h1 id="Using-Gulp-to-Minify-JS"><a href="#Using-Gulp-to-Minify-JS" class="headerlink" title="Using Gulp to Minify JS"></a>Using Gulp to Minify JS</h1><p>Next we’ll use Gulp to do some amazing tasks which bring great convenience for front-end development.<br>Let’s start with JavaScript minifying.<br>To make Gulp powerful enouth to do this job, we must install some plugins of Gulp. Here we’ll use <strong>gulp-uglify</strong>.(For more amazing gulp plugins, check out <a href="http://gulpjs.com/plugins/" target="_blank" rel="external">Gulp Plugins</a>)  </p>
<ul>
<li><p>Back to <code>~/project</code>, run the following command to install <strong>gulp-uglify</strong>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev gulp-uglify</div></pre></td></tr></table></figure>
</li>
<li><p>Replace <code>gulpfile.js</code> with the following code.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'minifyjs'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        gulp.src(<span class="string">'js/*.js'</span>)	<span class="comment">//Get the stream of the source file</span></div><div class="line">                .pipe(uglify())<span class="comment">//Pass the stream to the uglify module to minify all JS files.</span></div><div class="line">                .pipe(gulp.dest(<span class="string">'build'</span>));<span class="comment">//Pass the stream to the destination directory which is ~/project/build</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>Exucute the task by running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp minifyjs</div></pre></td></tr></table></figure>
</li>
<li><p>Check out <code>~/project/build</code>. All minified JavaScript source files are placed here!</p>
</li>
</ul>
<h1 id="Using-Gulp-watch"><a href="#Using-Gulp-watch" class="headerlink" title="Using Gulp.watch()"></a>Using Gulp.watch()</h1><p>Sometimes we want the JS files to be automatically minified everytime we modify them and <code>Gulp.watch()</code> will do the trick.<br><code>Gulp.watch()</code> allows us to implement a daemon to monitor file modifications and automatically execute specific tasks every time the modifications are made.  </p>
<ul>
<li><p>Add the following code at the end of <code>gulpfile.js</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'watchjs'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        gulp.watch(<span class="string">'js/*.js'</span>,[<span class="string">'minifyjs'</span>]);	<span class="comment">//Watch all *.js files under ~/project/js directory and run task "minifyjs" when files are modified</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>Execute the daemon task by running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp watchjs</div></pre></td></tr></table></figure>
</li>
<li><p>Now, JS files will be automatically minified every time you modify them.</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;What-is-Gulp&quot;&gt;&lt;a href=&quot;#What-is-Gulp&quot; class=&quot;headerlink&quot; title=&quot;What is Gulp&quot;&gt;&lt;/a&gt;What is Gulp&lt;/h1&gt;&lt;p&gt;Gulp is a streaming build syst
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://blog.chionlab.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="front-end" scheme="http://blog.chionlab.moe/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>Project Conclusion of m.21dianping.com</title>
    <link href="http://blog.chionlab.moe/2016/01/20/Project-Conclusion-of-m-21dianping-com/"/>
    <id>http://blog.chionlab.moe/2016/01/20/Project-Conclusion-of-m-21dianping-com/</id>
    <published>2016-01-19T17:13:39.000Z</published>
    <updated>2016-09-09T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="About-This-Project"><a href="#About-This-Project" class="headerlink" title="About This Project"></a>About This Project</h1><p>The project is a commercial website where users share their experiences of renting houses.<br>I accepted this outsourced project in late April and finished in about 15 days.<br>The project required 2 developers including a front-end engineer and a back-end developer(me).</p>
<blockquote><p><strong>Tasks</strong>: development of the full site, deployment on server, maintainance for 3 months<br><strong>Profits</strong>: 4500 RMB in total, 3000 for back-end developer &amp; maintainer (me), 1500 for front-end engineer.</p>
</blockquote>
<h1 id="Technical-Info"><a href="#Technical-Info" class="headerlink" title="Technical Info"></a>Technical Info</h1><blockquote><p><strong>Back-end Language &amp; Framework</strong>: Python, Flask<br><strong>Database</strong>: MongoDB with mongoengine as ORM python engine<br><strong>Front-end Frameworks</strong>: Bootstrap(UI), Angular.JS(MVVM data-binding)<br><strong>Front-back Interaction Method</strong>: REST API<br><strong>Login Method</strong>: Only OAuth, logging in with Sina Weibo account or QQ account<br><strong>Production Environment</strong>: Nginx + uwsgi<br><strong>About Server</strong>: Ali Cloud, Ubuntu 14.04</p>
</blockquote>
<h1 id="What-I’ve-Done"><a href="#What-I’ve-Done" class="headerlink" title="What I’ve Done"></a>What I’ve Done</h1><ul>
<li>Back-end development</li>
<li>Significant modification of front-end code, including interaction with back-end using AJAX &amp; REST API calls (The front-end developer was really a rookie so I had to do much front-end stuff to fill his void. In fact he did nothing but wrote some static HTML &amp; CSS.)</li>
<li>Server-side production environment set-up</li>
</ul>
<h1 id="What-I’m-Doing"><a href="#What-I’m-Doing" class="headerlink" title="What I’m Doing"></a>What I’m Doing</h1><ul>
<li>Adding source code comments</li>
<li>Working on maintainance documentation</li>
<li>Website &amp; server maintainance</li>
</ul>
<h1 id="What-I’ve-learned"><a href="#What-I’ve-learned" class="headerlink" title="What I’ve learned"></a>What I’ve learned</h1><ul>
<li>Further understanding of Flask</li>
<li>Bootstrap</li>
<li>Front-end MVVM model using Angular.JS</li>
<li>Production environment setup with nginx+uwsgi</li>
</ul>
<h1 id="Improvement"><a href="#Improvement" class="headerlink" title="Improvement"></a>Improvement</h1><p>Search algorithm in back-end source needs to be improved. Current solution of house-info searching is to traverse all records in database and calculate match-weight for each row. However when the number of records grows there may be significant performance issues.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;About-This-Project&quot;&gt;&lt;a href=&quot;#About-This-Project&quot; class=&quot;headerlink&quot; title=&quot;About This Project&quot;&gt;&lt;/a&gt;About This Project&lt;/h1&gt;&lt;p&gt;The pr
    
    </summary>
    
      <category term="项目总结" scheme="http://blog.chionlab.moe/categories/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="project" scheme="http://blog.chionlab.moe/tags/project/"/>
    
  </entry>
  
</feed>
